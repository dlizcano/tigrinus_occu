[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "cargar paquetes",
    "section": "",
    "text": "Multispecies occupancy model from Rota et al. (2016), for two (or more) interacting species. The model generalizes the standard single-species occupancy model from MacKenzie et al. (2002). We used Leopardus tigrinus and domestic dog data from 7 regions across the Colombian Andes, sampled with arrays of 20 to 30 camera traps.\nthere may be interest in exploring evidence for species interactions while accounting for the effects of environmental variables."
  },
  {
    "objectID": "index.html#cargar-datos",
    "href": "index.html#cargar-datos",
    "title": "cargar paquetes",
    "section": "Cargar datos",
    "text": "Cargar datos\n\nUcumari, Pitalito, La cocha1, La Fe, Rio Grande\n\ncodigo R\nFull_data_ucu &lt;- read_excel(\"D:/BoxFiles/Box Sync/CodigoR/tigrinus/data/Full_data_Ucumari_Huila_Cocha1_Cocha2.xlsx\", \n    sheet = \"ucumari\", col_types = c(\"numeric\", \n        \"text\", \"text\", \"text\", \"text\", \"text\", \n        \"text\", \"text\", \"text\", \"text\", \"text\", \n        \"text\", \"text\", \"text\", \"text\", \"numeric\", \n        \"text\", \"text\", \"text\", \"text\", \"text\", \n        \"text\", \"text\", \"text\", \"text\", \"numeric\", \n        \"numeric\", \"numeric\", \"numeric\", \n        \"text\"))\n\nFull_data_pitalito &lt;- read_csv(\"D:/BoxFiles/Box Sync/CodigoR/tigrinus/data/huila_merged.csv\", \n    col_types = cols(`Date_Time Captured` = col_character(), \n        camera_trap_start_date = col_character(), \n        camera_trap_end_date = col_character()))\n\n\nFull_data_pitalito &lt;- read_csv(\"D:/BoxFiles/Box Sync/CodigoR/tigrinus/data/huila_merged.csv\", \n    col_types = cols(`Date_Time Captured` = col_character(), \n        camera_trap_start_date = col_character(), \n        camera_trap_end_date = col_character()))\n\nFull_data_cocha1  &lt;- read_csv(\"D:/BoxFiles/Box Sync/CodigoR/tigrinus/data/Cocha1_merged.csv\", \n    col_types = cols(camera_trap_start_date = col_character(), \n        camera_trap_end_date = col_character()))\n\n\n\nFull_data_cocha2  &lt;- read_csv(\"D:/BoxFiles/Box Sync/CodigoR/tigrinus/data/Cocha_2.csv\", \n    col_types = cols(camera_trap_start_date = col_character(), \n                     \"Photo time\" = col_character(),\n                     \"Photo Date\" = col_character(),\n        camera_trap_end_date = col_character())) \n\nFull_data_cocha2$camera_trap &lt;- Full_data_cocha2$`Camera Trap Name`\n\n\nlafe_data &lt;- read_excel(\"C:/CodigoR/tigrinus2/data/cuencaverde.xlsx\",   sheet = \"LaFe_2021\")\n\nlafe_data$year &lt;- year(lafe_data$Photo_Date)\n\n# filter by 2021\n# lafe_data &lt;- lafe_data_raw %&gt;% filter(year == \"2021\")\n\nriogrande_data &lt;-  read_excel(\"C:/CodigoR/tigrinus2/data/cuencaverde.xlsx\", \n    sheet = \"Riogrande_completo\") |&gt; mutate(yr=year(Photo_Date)) |&gt; filter(yr==2021) \n\nituango_data &lt;-  read_excel(\"D:/BoxFiles/Box Sync/CodigoR/tigrinus3/Ituango/Base de  Datos Final.xlsx\", \n    sheet = \"Datos_camaras12-07-2015\") |&gt; mutate(yr=Year) |&gt; filter(yr==2015) |&gt; filter (MES&gt;=3 & MES&lt;=6)\n\n\nget elevation and distance covariates"
  },
  {
    "objectID": "index.html#crerar-matrices-para-unmarked",
    "href": "index.html#crerar-matrices-para-unmarked",
    "title": "cargar paquetes",
    "section": "crerar matrices para unmarked",
    "text": "crerar matrices para unmarked\n\n\ncodigo R\n############# start spatial part\n#### make sf object\nriogrande_sf &lt;- st_as_sf(riogrande_data, coords = c(\"Longitude\", \"Latitude\"), crs = \"EPSG:4326\")\n\n\n# get centroid. 1st bbox, make pol\ncentroid_riogrande &lt;- st_centroid(st_as_sfc(st_bbox(riogrande_sf)))\n# get altitude\nelev_riogrande_full &lt;- elevation_3s(centroid_riogrande[[1]][1], centroid_riogrande[[1]][2], \n                         path=\"C:/CodigoR/tigrinus2/raster\")\n\n# elev_ucu_full_ras &lt;- elev_ucu_full %&gt;% raster()\n\n# st_bbox(ucumari_sf) # notice order xmin, xmax, ymin, ymax\next_riogrande &lt;- ext(-75.94, -75.275,  6.27,    6.896 )\nelev_riogrande &lt;- crop(elev_riogrande_full, ext_riogrande) \n\n# convert from terra to raster\nelev_riogrande_ras &lt;-  elev_riogrande %&gt;% raster()\n\n# get uniques\ncams_riogrande &lt;-riogrande_data %&gt;% dplyr::select(c(\"Longitude\", \"Latitude\", \"camera_trap\")) %&gt;% distinct()\n#### make sf object\ncams_riogrande_sf &lt;- st_as_sf(cams_riogrande, coords = c(\"Longitude\", \"Latitude\"), crs = \"EPSG:4326\")\n\n# extract values from raster using altitude\ncams_riogrande_sf$elev &lt;- extract(elev_riogrande_ras, cams_riogrande_sf)\n\n############## make distance map\n# # Convert points to sp spatialpointdatafram\n# casas_points &lt;- as(casas_sf, \"Spatial\")\n# # Projection\n# # Be sure to have rgdal first installed.\n# casas_points_utm &lt;- spTransform(casas_points, CRS('+init=epsg:32718'))\n# # convert to ppp\n# casas_points_ppp &lt;- as(as(casas_points_utm, \"SpatialPoints\"), \"ppp\")\n# # distance\n# casas_distance &lt;- distmap(casas_points_ppp)\n\n####### extract distance \n# \n# casas_distance_ras&lt;- raster(casas_distance) # convert raster\n# crs(casas_distance_ras) &lt;- '+init=epsg:32718' # add crs\n# \n# # project raster\n# casa_distance &lt;- projectRaster(casas_distance_ras, crs = crs(casas_points))\n\n# cams_ucu_sf$dist_casa &lt;- raster::extract(casas_distance_ras, cams_ucu_sf)\ncams_riogrande_sf$dist_casa &lt;- raster::extract(casa_distance, cams_riogrande_sf) # also works\n\n\n# plot map\nmapview(elev_riogrande_ras) + mapview(cams_riogrande_sf[\"camera_trap\"]) \n\n############### end spatial part\n\n#riogrande_data$binomial &lt;- str_c (riogrande_data$Genus, \"_\", riogrande_data$Species)\n\n#funcion para crear todas las tablas de datos\nall_data_riogrande &lt;-  f.matrix.creator2 (riogrande_data)\n\n# names(all_data) # ver lass especies y en que lista esta cada una\n# kable(names(all_data)) # html table\n# Tigrinus es lista 11\n# perro es 1\n\ndatatable(\ndata = as.data.frame(names(all_data_riogrande)),\ncaption = \"Especies Rio Grande\",\nfilter = \"top\"\n)"
  },
  {
    "objectID": "index.html#unmarked",
    "href": "index.html#unmarked",
    "title": "cargar paquetes",
    "section": "unmarked",
    "text": "unmarked\n\ncodigo R\n# colapsa a una semana take time\ntigrinus_riogrande_48&lt;-f.shrink.matrix.to26(matrix = all_data_riogrande[[11]])\n\n# tabla con solo tiginus\ntigrinus_riogrande &lt;- tigrinus_riogrande_48 #all_data_riogrande[[11]]\n\n\n\n# crear objeto umf\numf_tigrinus_riogrande &lt;- unmarkedFrameOccu(y=tigrinus_riogrande)\n# verificar datos en grafica\n# plot(umf_tigrinus_ucu)\n\n# colapsa a una semana take time\nperros_riogrande_48&lt;-f.shrink.matrix.to26(matrix = all_data_riogrande[[1]])\n\n# tabla con solo perros\nperros_riogrande &lt;- perros_riogrande_48 #all_data_riogrande[[1]]\n# crear objeto umf\numf_perros_riogrande &lt;- unmarkedFrameOccu(y=perros_riogrande)\n# verificar datos en grafica\n# plot(umf_perros_ucu)\n\n# # tabla con solo ocelote\n# ocelote_riogrande &lt;- all_data[[16]]\n# # crear objeto umf\n# umf_ocelote_riogrande &lt;- unmarkedFrameOccu(y=ocelote_ucu)\n# # verificar datos en grafica\n# # plot(umf_ocelote_ucu)"
  },
  {
    "objectID": "index.html#modelo-nulo",
    "href": "index.html#modelo-nulo",
    "title": "cargar paquetes",
    "section": "Modelo nulo",
    "text": "Modelo nulo\n\ncodigo R\n# modelo nulo tigrinus\nfm_tig_riogrande &lt;- occu(~1 ~1, umf_tigrinus_riogrande)  # fit a model\n\nbackTransform(fm_tig_riogrande, type=\"det\") #estimado lineal de deteccion\nbackTransform(fm_tig_riogrande, type=\"state\") # estimado linel de ocupacion\n\n# modelo nulo perro\nfm_perros_riogrande &lt;- occu(~1 ~1, umf_perros_riogrande)  # fit a model\n\nbackTransform(fm_perros_riogrande, type=\"det\") #estimado lineal de deteccion\nbackTransform(fm_perros_riogrande, type=\"state\") # estimado linel de ocupacion\n\n# # modelo nulo ocelote\n# fm_ocelote_riogrande &lt;- occu(~1 ~1, umf_ocelote_riogrande)  # fit a model\n# \n# backTransform(fm_ocelote_riogrande, type=\"det\") #estimado lineal de deteccion\n# backTransform(fm_ocelote_riogrande, type=\"state\") # estimado linel de ocupacion\n#"
  },
  {
    "objectID": "index.html#modelos-de-co-ocurrencia",
    "href": "index.html#modelos-de-co-ocurrencia",
    "title": "cargar paquetes",
    "section": "MODELOS DE CO-OCURRENCIA",
    "text": "MODELOS DE CO-OCURRENCIA\n\ncodigo R\ndetformulas &lt;- c( \"~1\", \"~1\")#, \"~1\")\n#stateformulas &lt;- c('~elev','~elev', '~elev', \"~1\", \"~1\", \"~1\", \"~0\")# 3 sp\nstateformulas &lt;- c('~elev','~elev', \"~1\") #\"~0\"\nstateformulas_2 &lt;- c('~elev + I(elev^2)','~elev + I(elev^2)', \"~1\") #\"~0\"\n\ny &lt;- list(as.matrix(DL_tigrinus_p[,1:10]),# truncate 10\n          as.matrix(DL_perros_p[,1:10])\n          )#[,1:5]))# , tigrinus y perros)\nnames(y) &lt;- c(\"tigrinus\", \"perros\")#, \"ocelote\")\n\n\n# obs_covs &lt;-as.data.frame(scale(cams_ucu_sf$dist_casa))\n# names(obs_covs) &lt;- \"dist_casa\"\n\nsite_covs_ucu &lt;- data.frame(site_covs[,c('elev','dist_casa')])[,1:2]\nsite_covs_ucu &lt;-as.data.frame(apply(site_covs_ucu,2,scale)) # notice scale here\nnames(site_covs_ucu) &lt;- c(\"elev\", \"dist_casa\")\n\n\n#### effort\nobs_covs &lt;- list(\n  efort_tig=as.data.frame(DL_effort[,1:10]), # truncate to 10\n  effort_perro=as.data.frame(DL_effort[,1:10])\n)\n\n\nlibrary(unmarked)\n\numf &lt;-  unmarkedFrameOccuMulti(y=y, \n                              siteCovs=site_covs_ucu,\n                              obsCovs = obs_covs)#NULL)\nplot(umf)\n\n\n\ncodigo R\n#umf\n\n# occFormulas Length should match number/order of columns in fDesign\numf@fDesign\n\n    f1[tigrinus] f2[perros] f3[tigrinus:perros]\npsi[11] 1 1 1 psi[10] 1 0 0 psi[01] 0 1 0 psi[00] 0 0 0\n\ncodigo R\n#########################\nnull_det &lt;- c(\"~1\", \"~1\")\nnull_occu &lt;- c(\"~1\", \"~1\")#, \"~0\")\nnull &lt;- occuMulti(null_det, null_occu, \n                  umf,\n                  method=\"BFGS\", \n                  se=TRUE, \n                  engine=c(\"C\"), \n                  silent=TRUE,\n                  maxOrder=1, \n                  penalty =2,#0.5 * sum(paramvals^2)\n                  boot=250\n                  )\n\nBootstraping covariance matrix\n\ncodigo R\nnull\n\nCall: occuMulti(detformulas = null_det, stateformulas = null_occu, data = umf, maxOrder = 1, penalty = 2, boot = 250, method = “BFGS”, se = TRUE, engine = c(“C”), silent = TRUE)\nOccupancy: Estimate SE z P(&gt;|z|) [tigrinus] (Intercept) -0.509 0.218 -2.33 1.97e-02 [perros] (Intercept) -1.029 0.208 -4.94 7.98e-07\nDetection: Estimate SE z P(&gt;|z|) [tigrinus] (Intercept) -2.00 0.157 -12.7 4.10e-37 [perros] (Intercept) -1.94 0.185 -10.5 1.28e-25\nAIC: 1403.575\n\ncodigo R\n########################\nfit1 &lt;- occuMulti(detformulas, stateformulas, umf,    \n        method=\"BFGS\", se=TRUE, engine=c(\"C\"), silent=TRUE,\n        maxOrder=2, \n                  penalty =2,#0.5 * sum(paramvals^2)\n                  boot=250)\n\nBootstraping covariance matrix\n\ncodigo R\nfit1\n\nCall: occuMulti(detformulas = detformulas, stateformulas = stateformulas, data = umf, maxOrder = 2, penalty = 2, boot = 250, method = “BFGS”, se = TRUE, engine = c(“C”), silent = TRUE)\nOccupancy: Estimate SE z P(&gt;|z|) [tigrinus] (Intercept) -0.46136 0.261 -1.7669 7.72e-02 [tigrinus] elev 0.31187 0.141 2.2107 2.71e-02 [perros] (Intercept) -1.00940 0.235 -4.2960 1.74e-05 [perros] elev 0.00241 0.153 0.0157 9.87e-01 [tigrinus:perros] (Intercept) -0.05412 0.315 -0.1720 8.63e-01\nDetection: Estimate SE z P(&gt;|z|) [tigrinus] (Intercept) -2.02 0.169 -11.98 4.57e-33 [perros] (Intercept) -1.94 0.197 -9.86 6.14e-23\nAIC: 1406.288\n\ncodigo R\n# update model\n# occFormulas2 &lt;- c('~dist_casa', '~dist_casa', '~dist_casa', \"~1\", \"~1\", \"~1\", \"~0\")\noccFormulas2 &lt;- c('~dist_casa', '~dist_casa', \"~1\")\nfit2 &lt;- update(fit1, stateformulas=occFormulas2)\n\nBootstraping covariance matrix\n\ncodigo R\nfit2\n\nCall: occuMulti(detformulas = c(“~1”, “~1”), stateformulas = c(“~dist_casa”, “~dist_casa”, “~1”), data = umf, maxOrder = 2, penalty = 2, boot = 250, method = “BFGS”, se = TRUE, engine = c(“C”), silent = TRUE)\nOccupancy: Estimate SE z P(&gt;|z|) [tigrinus] (Intercept) -0.5002 0.245 -2.045 4.08e-02 [tigrinus] dist_casa -0.0782 0.168 -0.466 6.41e-01 [perros] (Intercept) -1.1018 0.256 -4.297 1.73e-05 [perros] dist_casa -0.6122 0.204 -3.000 2.70e-03 [tigrinus:perros] (Intercept) -0.0324 0.295 -0.110 9.12e-01\nDetection: Estimate SE z P(&gt;|z|) [tigrinus] (Intercept) -2.00 0.162 -12.34 5.77e-35 [perros] (Intercept) -1.94 0.207 -9.34 9.44e-21\nAIC: 1398.559\n\ncodigo R\ndetFormulas_eff &lt;- c('~efort_tig', '~effort_perro')\nfit3 &lt;- update(fit1, detformulas=detFormulas_eff)\n\nBootstraping covariance matrix\n\ncodigo R\nfit3\n\nCall: occuMulti(detformulas = c(“~efort_tig”, “~effort_perro”), stateformulas = c(“~elev”, “~elev”, “~1”), data = umf, maxOrder = 2, penalty = 2, boot = 250, method = “BFGS”, se = TRUE, engine = c(“C”), silent = TRUE)\nOccupancy: Estimate SE z P(&gt;|z|) [tigrinus] (Intercept) -0.4775 0.244 -1.957 0.05039 [tigrinus] elev 0.2867 0.152 1.880 0.06005 [perros] (Intercept) -0.9291 0.321 -2.892 0.00382 [perros] elev 0.0394 0.188 0.209 0.83439 [tigrinus:perros] (Intercept) -0.0316 0.308 -0.102 0.91850\nDetection: Estimate SE z P(&gt;|z|) [tigrinus] (Intercept) -1.9118 0.2678 -7.138 9.48e-13 [tigrinus] efort_tig -0.0156 0.0291 -0.537 5.91e-01 [perros] (Intercept) -2.2346 0.5717 -3.909 9.28e-05 [perros] effort_perro 0.0291 0.0448 0.651 5.15e-01\nAIC: 1409.56\n\ncodigo R\nfit4 &lt;- update(fit2, detformulas=detFormulas_eff)\n\nBootstraping covariance matrix\n\ncodigo R\nfit1_2 &lt;- occuMulti(detFormulas_eff, stateformulas_2, umf,    \n        method=\"BFGS\", se=TRUE, engine=c(\"C\"), silent=TRUE,\n        maxOrder=2, \n                  penalty =2,#0.5 * sum(paramvals^2)\n                  boot=250)\n\nBootstraping covariance matrix\n\ncodigo R\nnull_2order &lt;- optimizePenalty(null, \n                                stateformulas = c(\"~1\", \"~1\", \"~0\"),\n                                penalties = 2, # c(0, 2^seq(-4, 4))\n                                maxOrder=2,\n                                k = 5, boot = 250)\n\nOptimal penalty is 2 Bootstraping covariance matrix\n\ncodigo R\nsummary(null_2order)\n\nCall: occuMulti(detformulas = c(“~1”, “~1”), stateformulas = c(“~1”, “~1”), data = object@data, maxOrder = 1, penalty = 2, boot = boot, method = “BFGS”, se = TRUE, engine = c(“C”), silent = TRUE)\nOccupancy (logit-scale): Estimate SE z P(&gt;|z|) [tigrinus] (Intercept) -0.509 0.231 -2.20 2.77e-02 [perros] (Intercept) -1.029 0.204 -5.05 4.51e-07\nDetection (logit-scale): Estimate SE z P(&gt;|z|) [tigrinus] (Intercept) -2.00 0.166 -11.99 3.85e-33 [perros] (Intercept) -1.94 0.201 -9.64 5.52e-22\nAIC: 1403.575 Number of sites: 331 optim convergence code: 0 optim iterations: 39 Bootstrap iterations: 250\n\nModel Selection\n\ncodigo R\n#List of fitted models\nfmList &lt;- fitList(elev = fit1, \n                  distCasa = fit2, \n                  elev_effort = fit3,\n                  distCasa_effort = fit4,\n                  null_2order = null_2order,\n                  null = null,\n                  elev2_eff = fit1_2)\n\n\n#Model selection\nmodSel(fmList)\n\n            nPars     AIC delta  AICwt cumltvWt\ndistCasa 7 1398.56 0.00 0.5104 0.51 elev2_eff 11 1399.91 1.36 0.2590 0.77 distCasa_effort 9 1401.22 2.66 0.1347 0.90 null_2order 4 1403.58 5.02 0.0416 0.95 null 4 1403.58 5.02 0.0416 0.99 elev 7 1406.29 7.73 0.0107 1.00 elev_effort 9 1409.56 11.00 0.0021 1.00\n\ncodigo R\n# coef(fmList)\n\n#############\n# Model fit #\n#############\n\n# bt &lt;- parboot(fit2, nsim=100) # takes time best model\n# plot(bt)\n\n\n\nplot predicted marginal occupancy\nlook at occupancy for species individually.\n\ncodigo R\n#Plot predicted marginal occupancy as a function of disturbance\nr &lt;- range(site_covs$elev)\nx1 &lt;- seq(r[1],r[2],length.out=100)\nx_scale &lt;- (x1-mean(site_covs$elev))/sd(site_covs$elev)\n\nr2 &lt;- range(site_covs$dist_casa)\nx2 &lt;- seq(r2[1],r2[2],length.out=100)\nx2_scale &lt;- (x2-mean(site_covs$dist_casa))/sd(site_covs$dist_casa)\n\nnd &lt;- matrix(NA, 100, 2)\nnd &lt;- data.frame(elev=x_scale, dist_casa= x2_scale)\n\n\n\ntigrinus_pred &lt;- predict(fit1_2, \"state\", species=\"tigrinus\", newdata=nd)\ntigrinus_pred$Species &lt;- \"tigrinus\"\n\nperros_pred &lt;- predict(fit1_2, \"state\", species=\"perros\", newdata=nd)\nperros_pred$Species &lt;- \"perros\"\n\n# ocelote_pred &lt;- predict(fit2, \"state\", species=\"ocelote\", newdata=nd)\n# ocelote_pred$Species &lt;- \"ocelote\"\n\n\n\n\n\n\n################### point plot\n############## Null model \ntigrinus_pred_null &lt;- predict(null, \"state\", species=\"tigrinus\")\ntigrinus_pred_null$Species &lt;- \"tigrinus\"\n\nperros_pred_null &lt;- predict(null, \"state\", species=\"perros\")\nperros_pred_null$Species &lt;- \"perros\"\n\nall_marginal &lt;- rbind(tigrinus_pred_null[1,], perros_pred_null[1,])\nall_marginal$Species &lt;- c(\"tigrinus\", \"perros\")\n\n#plot\nplot(1:2, all_marginal$Predicted, ylim=c(0,0.9), \n     xlim=c(0.5,2.5), pch=19, cex=1.5, xaxt='n', \n     xlab=\"\", ylab=\"Marginal occupancy and 95% CI\")\naxis(1, at=1:2, labels=all_marginal$Species)\n\n# CIs\ntop &lt;- 0.1\nfor (i in 1:2){\n  segments(i, all_marginal$lower[i], i, all_marginal$upper[i])\n  segments(i-top, all_marginal$lower[i], i+top)\n  segments(i-top, all_marginal$upper[i], i+top)\n}\n\n\n\ncodigo R\n#################################\n\nplot_dat &lt;- rbind(tigrinus_pred, perros_pred)#, ocelote_pred)\n\nggplot(data=plot_dat, aes(x=rep(x1,2), y=Predicted)) + # change to 3 sp and x2 to distance\n  geom_ribbon(aes(ymin=lower, ymax=upper, fill=Species), alpha=0.3) +\n  geom_line(aes(col=Species)) +\n  labs(x=\"elevation\", y=\"Marginal occupancy\") +\n  theme_bw() +\n  theme(panel.grid.major=element_blank(), panel.grid.minor=element_blank(),\n        axis.text=element_text(size=12), axis.title=element_text(size=14),\n        legend.text=element_text(size=12), legend.title=element_text(size=14))\n\n\n\n\nplot predicted co-occurrence occupancy\n\ncodigo R\n#Plot predicted marginal occupancy as a function of disturbance\nr &lt;- range(site_covs$elev)\nx1 &lt;- seq(r[1],r[2],length.out=100)\nx_scale &lt;- (x1-mean(site_covs$elev))/sd(site_covs$elev)\n\nr2 &lt;- range(site_covs$dist_casa)\nx2 &lt;- seq(r2[1],r2[2],length.out=100)\nx2_scale &lt;- (x2-mean(site_covs$dist_casa))/sd(site_covs$dist_casa)\n\nnd &lt;- matrix(NA, 100, 2)\nnd &lt;- data.frame(elev=x_scale, dist_casa= x2_scale)\n\n\ntigrinus_perros_pred &lt;- predict(fit1_2, \"state\", \n                         species=c(\"tigrinus\", \"perros\"), \n                         # cond=c('-perros'), #perro absent\n                         newdata=nd)\n\n# tigrinus_pred$Species &lt;- c(\"tigrinus\", \"perros\")\n\n# perros_pred &lt;- predict(fit1, \"state\", species=\"perros\", newdata=nd)\n# perros_pred$Species &lt;- \"perros\"\n\n# ocelote_pred &lt;- predict(fit2, \"state\", species=\"ocelote\", newdata=nd)\n# ocelote_pred$Species &lt;- \"ocelote\"\n\n\nplot_dat &lt;- tigrinus_perros_pred #rbind(tigrinus_pred, perros_pred)#, ocelote_pred)\n\nggplot(data=plot_dat, aes(x=rep(x1), y=Predicted)) + # change to 3 sp and x2 to distance\n  geom_ribbon(aes(ymin=lower, ymax=upper, fill = \"grey50\"), alpha=0.3) +\n  geom_line(aes(y=Predicted), col=\"blue\") +\n  labs(x=\"elev\", y=\"co-occurence\") +\n  theme_bw() +\n  theme(panel.grid.major=element_blank(), panel.grid.minor=element_blank(),\n        axis.text=element_text(size=12), axis.title=element_text(size=14),\n        legend.text=element_text(size=12), legend.title=element_text(size=14))\n\n\n\n\nplot predicted conditional occupancy\nyou want to know the probability of occupancy of one species, conditional on the presence of another\n\ncodigo R\n#Plot predicted marginal occupancy as a function of disturbance\nr &lt;- range(site_covs$elev)\nx1 &lt;- seq(r[1],r[2],length.out=100)\nx_scale &lt;- (x1-mean(site_covs$elev))/sd(site_covs$elev)\n\nr2 &lt;- range(site_covs$dist_casa)\nx2 &lt;- seq(r2[1],r2[2],length.out=100)\nx2_scale &lt;- (x2-mean(site_covs$dist_casa))/sd(site_covs$dist_casa)\n\nnd &lt;- matrix(NA, 100, 2)\nnd &lt;- data.frame(elev=x_scale, dist_casa= x2_scale)\n\n##############\n######## point plot\n######## null model\n##############\n\ntigrinus_con_perro &lt;- predict(null, type=\"state\", species=\"tigrinus\", cond=\"perros\")\n\ntigrinus_no_perro &lt;- predict(null, type=\"state\", species=\"tigrinus\", cond=\"-perros\")\n\ncond_data &lt;- rbind(tigrinus_con_perro[1,], tigrinus_no_perro[1,])\ncond_data$tigrinus_status &lt;- c(\"Present\",\"Absent\")\n\nplot(1:2, cond_data$Predicted, ylim=c(0.15,0.9), \n     xlim=c(0.5,2.5), pch=19, cex=1.5, xaxt='n', \n     xlab=\"Perro status\", ylab=\"tigrinus occupancy and 95% CI\")\naxis(1, at=1:2, labels=cond_data$tigrinus_status)\n\n# CIs\ntop &lt;- 0.1\nfor (i in 1:2){\n  segments(i, cond_data$lower[i], i, cond_data$upper[i])\n  segments(i-top, cond_data$lower[i], i+top)\n  segments(i-top, cond_data$upper[i], i+top)\n}\n\n\n\ncodigo R\n##############\n# new data conditional\nnd_cond &lt;- data.frame(\n  #elev = rep(mean(site_covs$elev), 100),\n  dist_casa = rep(mean(x2_scale), 100),\n  # roads = rep(mean(site_covs$roads), 100),\n  elev = seq(min(x_scale), max(x_scale),\n                 length.out = 100)\n)\n\n##### conditional\n\ntigrinus_dog_0 &lt;- predict(fit1_2, \"state\", \n                         species = \"tigrinus\", \n                         cond = '-perros',\n                         newdata = nd_cond)\n\ntigrinus_dog_0$Species &lt;- \"perro ausente\"\n\ntigrinus_dog_1 &lt;- predict(fit1_2, \"state\", \n                         species = \"tigrinus\", \n                         cond = 'perros',\n                         newdata = nd_cond)\n\ntigrinus_dog_1$Species &lt;- \"perro presente\"\n\n\n\n\n\nperros_pred &lt;- predict(fit1, \"state\", species = \"perros\", newdata = nd)\nperros_pred$Species &lt;- \"perros\"\n\n# ocelote_pred &lt;- predict(fit2, \"state\", species=\"ocelote\", newdata=nd)\n# ocelote_pred$Species &lt;- \"ocelote\"\n\n# old plot\nplot_dat &lt;- rbind(tigrinus_dog_1, tigrinus_dog_0)#, ocelote_pred)\n\nggplot(data=plot_dat, aes(x=rep(x1,2), y=Predicted)) + # change to 3 sp and x2 to distance\n   geom_ribbon(aes(ymin=lower, ymax=upper, fill=Species), alpha=0.3) +\n   geom_line(aes(col=Species)) +\n   labs(x=\"elev\", y=\"tigrinus conditional occupancy\") +\n   theme_bw() +\n   theme(panel.grid.major=element_blank(), panel.grid.minor=element_blank(),\n         axis.text=element_text(size=12), axis.title=element_text(size=14),\n         legend.text=element_text(size=12), legend.title=element_text(size=14))\n\n\n\ncodigo R\n# new plot\n\n\n\n\ngg_df_cond1 &lt;- data.frame(\n  elev = rep(nd_cond$elev, 2),\n  occupancy = c(tigrinus_dog_1$Predicted,\n                tigrinus_dog_0$Predicted),\n  low = c(tigrinus_dog_1$lower,\n          tigrinus_dog_0$lower),\n  high = c(tigrinus_dog_1$upper,\n           tigrinus_dog_0$upper),\n  conditional = rep(c('Dog present', 'Dog absent'),\n                    each = 100)\n)\n\n\ncond_fig1 &lt;- ggplot(gg_df_cond1, aes(x = elev, y = occupancy,\n                                   group = conditional)) +\n  geom_ribbon(aes(ymin = low, ymax = high, fill = conditional),  alpha=0.5) +\n  geom_line() +\n  ylab('Conditional L. tigrinus\\noccupancy probability') +\n  xlab('elev') +\n  labs(fill = 'Dog state') +\n  theme(text = element_text(size = 15),\n        #legend.position = c(0.75, 0.85)\n        )\n\ncond_fig1"
  },
  {
    "objectID": "index.html#crerar-matrices-para-unmarked-1",
    "href": "index.html#crerar-matrices-para-unmarked-1",
    "title": "cargar paquetes",
    "section": "crerar matrices para unmarked",
    "text": "crerar matrices para unmarked\n\n\ncodigo R\n############# start spatial part\n#### make sf object\nriogrande_sf &lt;- st_as_sf(riogrande_data, coords = c(\"Longitude\", \"Latitude\"), crs = \"EPSG:4326\")\n\n\n# get centroid. 1st bbox, make pol\ncentroid_riogrande &lt;- st_centroid(st_as_sfc(st_bbox(riogrande_sf)))\n# get altitude\nelev_riogrande_full &lt;- elevation_3s(centroid_riogrande[[1]][1], centroid_riogrande[[1]][2], \n                         path=\"C:/CodigoR/tigrinus2/raster\")\n\n# elev_ucu_full_ras &lt;- elev_ucu_full %&gt;% raster()\n\n# st_bbox(ucumari_sf) # notice order xmin, xmax, ymin, ymax\next_riogrande &lt;- ext(-75.94, -75.275,  6.27,    6.896 )\nelev_riogrande &lt;- crop(elev_riogrande_full, ext_riogrande) \n\n# convert from terra to raster\nelev_riogrande_ras &lt;-  elev_riogrande %&gt;% raster()\n\n# get uniques\ncams_riogrande &lt;-riogrande_data %&gt;% dplyr::select(c(\"Longitude\", \"Latitude\", \"camera_trap\")) %&gt;% distinct()\n#### make sf object\ncams_riogrande_sf &lt;- st_as_sf(cams_riogrande, coords = c(\"Longitude\", \"Latitude\"), crs = \"EPSG:4326\")\n\n# extract values from raster using altitude\ncams_riogrande_sf$elev &lt;- extract(elev_riogrande_ras, cams_riogrande_sf)\n\n############## make distance map\n# # Convert points to sp spatialpointdatafram\n# casas_points &lt;- as(casas_sf, \"Spatial\")\n# # Projection\n# # Be sure to have rgdal first installed.\n# casas_points_utm &lt;- spTransform(casas_points, CRS('+init=epsg:32718'))\n# # convert to ppp\n# casas_points_ppp &lt;- as(as(casas_points_utm, \"SpatialPoints\"), \"ppp\")\n# # distance\n# casas_distance &lt;- distmap(casas_points_ppp)\n\n####### extract distance \n# \n# casas_distance_ras&lt;- raster(casas_distance) # convert raster\n# crs(casas_distance_ras) &lt;- '+init=epsg:32718' # add crs\n# \n# # project raster\n# casa_distance &lt;- projectRaster(casas_distance_ras, crs = crs(casas_points))\n\n# cams_ucu_sf$dist_casa &lt;- raster::extract(casas_distance_ras, cams_ucu_sf)\ncams_riogrande_sf$dist_casa &lt;- raster::extract(casa_distance, cams_riogrande_sf) # also works\n\n\n# plot map\nmapview(elev_riogrande_ras) + mapview(cams_riogrande_sf[\"camera_trap\"]) \n\n############### end spatial part\n\n#riogrande_data$binomial &lt;- str_c (riogrande_data$Genus, \"_\", riogrande_data$Species)\n\n#funcion para crear todas las tablas de datos\nall_data_riogrande &lt;-  f.matrix.creator2 (riogrande_data)\n\n# names(all_data) # ver lass especies y en que lista esta cada una\n# kable(names(all_data)) # html table\n# Tigrinus es lista 11\n# perro es 1\n\ndatatable(\ndata = as.data.frame(names(all_data_riogrande)),\ncaption = \"Especies Rio Grande\",\nfilter = \"top\"\n)"
  },
  {
    "objectID": "index.html#crerar-matrices-para-unmarked-2",
    "href": "index.html#crerar-matrices-para-unmarked-2",
    "title": "Occupación tigrinus",
    "section": "crerar matrices para unmarked",
    "text": "crerar matrices para unmarked\n\n\ncodigo R\n############# start spatial part\n#### make sf object\ncocha1_sf <- st_as_sf(cocha1_data, coords = c(\"Longitude\", \"Latitude\"), crs = \"EPSG:4326\")\n#### make sf object\ncocha2_sf <- st_as_sf(cocha2_data, coords = c(\"Longitude\", \"Latitude\"), crs = \"EPSG:4326\")\n\n\n# get centroid. 1st bbox, make pol\ncentroid_cocha <- st_centroid(st_as_sfc(st_bbox(cocha1_sf)))\n# get altitude\nelev_cocha_full <- elevation_3s(centroid_cocha[[1]][1], centroid_cocha[[1]][2], \n                         path=\"C:/CodigoR/tigrinus2/raster\")\n\n# elev_ucu_full_ras <- elev_ucu_full %>% raster()\n\n# st_bbox(ucumari_sf) # notice order xmin, xmax, ymin, ymax\next_cocha <- ext(-77.17, -77.05,  0.886,    1.085 )\nelev_cocha <- crop(elev_cocha_full, ext_cocha) \n\n# convert from terra to raster\nelev_cocha_ras <-  elev_cocha %>% raster()\n\n##### get uniques\ncams_cocha1 <-cocha1_data %>% dplyr::select(c(\"Longitude\", \"Latitude\", \"camera_trap\")) %>% distinct()\n#### make sf object\ncams_cocha1_sf <- st_as_sf(cams_cocha1, coords = c(\"Longitude\", \"Latitude\"), crs = \"EPSG:4326\")\n\ncams_cocha2 <-cocha2_data %>% dplyr::select(c(\"Longitude\", \"Latitude\", \"camera_trap\")) %>% distinct()\n#### make sf object\ncams_cocha2_sf <- st_as_sf(cams_cocha2, coords = c(\"Longitude\", \"Latitude\"), crs = \"EPSG:4326\")\n\n\n\n# extract values from raster using altitude\ncams_cocha1_sf$elev <- extract(elev_cocha_ras, cams_cocha1_sf)\ncams_cocha2_sf$elev <- extract(elev_cocha_ras, cams_cocha2_sf)\n\n\n############## make distance map\n# # Convert points to sp spatialpointdatafram\n# casas_points <- as(casas_sf, \"Spatial\")\n# # Projection\n# # Be sure to have rgdal first installed.\n# casas_points_utm <- spTransform(casas_points, CRS('+init=epsg:32718'))\n# # convert to ppp\n# casas_points_ppp <- as(as(casas_points_utm, \"SpatialPoints\"), \"ppp\")\n# # distance\n# casas_distance <- distmap(casas_points_ppp)\n\n####### extract distance \n# \n# casas_distance_ras<- raster(casas_distance) # convert raster\n# crs(casas_distance_ras) <- '+init=epsg:32718' # add crs\n# \n# # project raster\n# casa_distance <- projectRaster(casas_distance_ras, crs = crs(casas_points))\n\n\n# extracr raster values\n# cams_ucu_sf$dist_casa <- raster::extract(casas_distance_ras, cams_ucu_sf)\ncams_cocha1_sf$dist_casa <- raster::extract(casa_distance, cams_cocha1_sf) # also works\ncams_cocha2_sf$dist_casa <- raster::extract(casa_distance, cams_cocha2_sf) # also works\n\n\n# plot map\nmapview(elev_cocha_ras) + mapview(cams_cocha1_sf[\"camera_trap\"]) + mapview(cams_cocha2_sf[\"camera_trap\"]) \n\n\n\n\n\n\n\ncodigo R\n############### end spatial part\n\n# fix cocha2 data\n# cocha2_data$binomial <- str_c (cocha2_data$Genus, \"_\", cocha2_data$Species)\n\n#funcion para crear todas las tablas de datos\nall_data_cocha1 <-  f.matrix.creator2 (cocha1_data)\nall_data_cocha2 <-  f.matrix.creator2 (cocha2_data)\n# names(all_data) # ver lass especies y en que lista esta cada una\n\n\n# kable(names(all_data_cocha1)) # html table\n# Tigrinus es lista 11 y perro 2\n\n# kable(names(all_data_cocha2)) # html table\n# Tigrinus es 30\n# Perro no hay\n\ndatatable(\ndata = as.data.frame(names(all_data_cocha1)),\ncaption = \"Especies La Cocha\",\nfilter = \"top\"\n)"
  },
  {
    "objectID": "index.html#unmarked-1",
    "href": "index.html#unmarked-1",
    "title": "cargar paquetes",
    "section": "unmarked",
    "text": "unmarked\n\ncodigo R\n# colapsa a una semana take time\ntigrinus_riogrande_48&lt;-f.shrink.matrix.to26(matrix = all_data_riogrande[[11]])\n\n# tabla con solo tiginus\ntigrinus_riogrande &lt;- tigrinus_riogrande_48 #all_data_riogrande[[11]]\n\n\n\n# crear objeto umf\numf_tigrinus_riogrande &lt;- unmarkedFrameOccu(y=tigrinus_riogrande)\n# verificar datos en grafica\n# plot(umf_tigrinus_ucu)\n\n# colapsa a una semana take time\nperros_riogrande_48&lt;-f.shrink.matrix.to26(matrix = all_data_riogrande[[1]])\n\n# tabla con solo perros\nperros_riogrande &lt;- perros_riogrande_48 #all_data_riogrande[[1]]\n# crear objeto umf\numf_perros_riogrande &lt;- unmarkedFrameOccu(y=perros_riogrande)\n# verificar datos en grafica\n# plot(umf_perros_ucu)\n\n# # tabla con solo ocelote\n# ocelote_riogrande &lt;- all_data[[16]]\n# # crear objeto umf\n# umf_ocelote_riogrande &lt;- unmarkedFrameOccu(y=ocelote_ucu)\n# # verificar datos en grafica\n# # plot(umf_ocelote_ucu)"
  },
  {
    "objectID": "index.html#modelo-nulo-1",
    "href": "index.html#modelo-nulo-1",
    "title": "cargar paquetes",
    "section": "Modelo nulo",
    "text": "Modelo nulo\n\ncodigo R\n# modelo nulo tigrinus\nfm_tig_riogrande &lt;- occu(~1 ~1, umf_tigrinus_riogrande)  # fit a model\n\nbackTransform(fm_tig_riogrande, type=\"det\") #estimado lineal de deteccion\nbackTransform(fm_tig_riogrande, type=\"state\") # estimado linel de ocupacion\n\n# modelo nulo perro\nfm_perros_riogrande &lt;- occu(~1 ~1, umf_perros_riogrande)  # fit a model\n\nbackTransform(fm_perros_riogrande, type=\"det\") #estimado lineal de deteccion\nbackTransform(fm_perros_riogrande, type=\"state\") # estimado linel de ocupacion\n\n# # modelo nulo ocelote\n# fm_ocelote_riogrande &lt;- occu(~1 ~1, umf_ocelote_riogrande)  # fit a model\n# \n# backTransform(fm_ocelote_riogrande, type=\"det\") #estimado lineal de deteccion\n# backTransform(fm_ocelote_riogrande, type=\"state\") # estimado linel de ocupacion\n#"
  },
  {
    "objectID": "index.html#modelos-de-co-ocurrencia-1",
    "href": "index.html#modelos-de-co-ocurrencia-1",
    "title": "cargar paquetes",
    "section": "MODELOS DE CO-OCURRENCIA",
    "text": "MODELOS DE CO-OCURRENCIA\n\ncodigo R\ndetformulas &lt;- c( \"~1\", \"~1\")#, \"~1\")\n#stateformulas &lt;- c('~elev','~elev', '~elev', \"~1\", \"~1\", \"~1\", \"~0\")# 3 sp\nstateformulas &lt;- c('~elev','~elev', \"~0\")\ny &lt;- list(tigrinus_riogrande, perros_riogrande)# , ocelote_riogrande)\nnames(y) &lt;- c(\"tigrinus\", \"perros\")#, \"ocelote\")\n\n\nobs_covs &lt;-as.data.frame(scale(cams_riogrande_sf$dist_casa))\nnames(obs_covs) &lt;- \"dist_casa\"\n\nsite_covs_riogrande &lt;- data.frame(cams_riogrande_sf[,c('elev','dist_casa')])[,1:2]\nsite_covs_riogrande &lt;-as.data.frame(apply(site_covs_riogrande,2,scale))\nnames(site_covs_riogrande) &lt;- c(\"elev\", \"dist_casa\")\n\n\numf &lt;-  unmarkedFrameOccuMulti(y=y, \n                              siteCovs=site_covs_riogrande,\n                              obsCovs = NULL)\nplot(umf)\n#umf\n\n# occFormulas Length should match number/order of columns in fDesign\numf@fDesign\n\n\nfit1 &lt;- occuMulti(detformulas, stateformulas, umf,    \n        method=\"BFGS\", se=TRUE, engine=c(\"C\"), silent=FALSE)\n\nfit1\n\n# update model\n# occFormulas2 &lt;- c('~dist_casa', '~dist_casa', '~dist_casa', \"~1\", \"~1\", \"~1\", \"~0\")\noccFormulas2 &lt;- c('~dist_casa', '~dist_casa', \"~0\")\nfit2 &lt;- update(fit1, stateformulas=occFormulas2)\nfit2\n\n\nModel Selection\n\ncodigo R\n#List of fitted models\nfl &lt;- fitList(elev=fit1, dist=fit2)\n# coef(fl)\n\n###################\n# Model selection #\n###################\n\nmodSel(fl)\n\n#############\n# Model fit #\n#############\n\n# bt &lt;- parboot(fit1, nsim=50) # takes time best model\n# plot(bt)\n\n\n\nplot predicted marginal occupancy\n\ncodigo R\n#Plot predicted marginal occupancy as a function of disturbance\nr &lt;- range(cams_riogrande_sf$elev)\nx1 &lt;- seq(r[1],r[2],length.out=100)\nx_scale &lt;- (x1-mean(cams_riogrande_sf$elev))/sd(cams_riogrande_sf$elev)\n\nr2 &lt;- range(cams_riogrande_sf$dist_casa)\nx2 &lt;- seq(r2[1],r2[2],length.out=100)\nx2_scale &lt;- (x2-mean(cams_riogrande_sf$dist_casa))/sd(cams_riogrande_sf$dist_casa)\n\nnd &lt;- matrix(NA, 100, 2)\nnd &lt;- data.frame(elev=x_scale, dist_casa= x2_scale)\n\n\n\ntigrinus_pred &lt;- predict(fit2, \"state\", species=\"tigrinus\", newdata=nd)\ntigrinus_pred$Species &lt;- \"tigrinus\"\n\nperros_pred &lt;- predict(fit2, \"state\", species=\"perros\", newdata=nd)\nperros_pred$Species &lt;- \"perros\"\n\n# ocelote_pred &lt;- predict(fit2, \"state\", species=\"ocelote\", newdata=nd)\n# ocelote_pred$Species &lt;- \"ocelote\"\n\n\nplot_dat &lt;- rbind(tigrinus_pred, perros_pred)#, ocelote_pred)\n\nggplot(data=plot_dat, aes(x=rep(x2,2), y=Predicted)) + # change to 3 sp and x2 to distance\n  geom_ribbon(aes(ymin=lower, ymax=upper, fill=Species), alpha=0.3) +\n  geom_line(aes(col=Species)) +\n  labs(x=\"Distancia Casa\", y=\"Marginal occupancy\") +\n  theme_bw() +\n  theme(panel.grid.major=element_blank(), panel.grid.minor=element_blank(),\n        axis.text=element_text(size=12), axis.title=element_text(size=14),\n        legend.text=element_text(size=12), legend.title=element_text(size=14))\n\n\n\nplot predicted co-occurrence occupancy\n\ncodigo R\n#Plot predicted marginal occupancy as a function of disturbance\nr &lt;- range(cams_lafe_sf$elev)\nx1 &lt;- seq(r[1],r[2],length.out=100)\nx_scale &lt;- (x1-mean(cams_lafe_sf$elev))/sd(cams_lafe_sf$elev)\n\nr2 &lt;- range(cams_lafe_sf$dist_casa)\nx2 &lt;- seq(r2[1],r2[2],length.out=100)\nx2_scale &lt;- (x2-mean(cams_lafe_sf$dist_casa))/sd(cams_lafe_sf$dist_casa)\n\nnd &lt;- matrix(NA, 100, 2)\nnd &lt;- data.frame(elev=x_scale, dist_casa= x2_scale)\n\n\ntigrinus_perros_pred &lt;- predict(fit2, \"state\", \n                         species=c(\"tigrinus\", \"perros\"), newdata=nd)\n\n# tigrinus_pred$Species &lt;- c(\"tigrinus\", \"perros\")\n\n# perros_pred &lt;- predict(fit1, \"state\", species=\"perros\", newdata=nd)\n# perros_pred$Species &lt;- \"perros\"\n\n# ocelote_pred &lt;- predict(fit2, \"state\", species=\"ocelote\", newdata=nd)\n# ocelote_pred$Species &lt;- \"ocelote\"\n\n\nplot_dat &lt;- tigrinus_perros_pred #rbind(tigrinus_pred, perros_pred)#, ocelote_pred)\n\nggplot(data=plot_dat, aes(x=rep(x2), y=Predicted)) + # change to 3 sp and x2 to distance\n  geom_ribbon(aes(ymin=lower, ymax=upper, fill = \"grey50\"), alpha=0.3) +\n  geom_line(aes(y=Predicted), col=\"blue\") +\n  labs(x=\"Distancia Casa\", y=\"co-occurence\") +\n  theme_bw() +\n  theme(panel.grid.major=element_blank(), panel.grid.minor=element_blank(),\n        axis.text=element_text(size=12), axis.title=element_text(size=14),\n        legend.text=element_text(size=12), legend.title=element_text(size=14))\n\n\n\nplot predicted conditional occupancy\n\ncodigo R\n#Plot predicted marginal occupancy as a function of disturbance\nr &lt;- range(cams_riogrande_sf$elev)\nx1 &lt;- seq(r[1],r[2],length.out=100)\nx_scale &lt;- (x1-mean(cams_riogrande_sf$elev))/sd(cams_riogrande_sf$elev)\n\nr2 &lt;- range(cams_riogrande_sf$dist_casa)\nx2 &lt;- seq(r2[1],r2[2],length.out=100)\nx2_scale &lt;- (x2-mean(cams_riogrande_sf$dist_casa))/sd(cams_riogrande_sf$dist_casa)\n\nnd &lt;- matrix(NA, 100, 2)\nnd &lt;- data.frame(elev=x_scale, dist_casa= x2_scale)\n\n##### conditional\n\ntigrinus_perro_no &lt;- predict(fit2, \"state\", \n                         species=\"tigrinus\", \n                         cond='-perros',\n                         newdata=nd)\n\ntigrinus_perro_no$Species &lt;- \"perro ausente\"\n\ntigrinus_perro_si &lt;- predict(fit2, \"state\", \n                         species=\"tigrinus\", \n                         cond='perros',\n                         newdata=nd)\n\ntigrinus_perro_si$Species &lt;- \"perro presente\"\n\n\n\n\n\n# perros_pred &lt;- predict(fit1, \"state\", species=\"perros\", newdata=nd)\n# perros_pred$Species &lt;- \"perros\"\n\n# ocelote_pred &lt;- predict(fit2, \"state\", species=\"ocelote\", newdata=nd)\n# ocelote_pred$Species &lt;- \"ocelote\"\n\n\nplot_dat &lt;- rbind(tigrinus_perro_si, tigrinus_perro_no)#, ocelote_pred)\n\nggplot(data=plot_dat, aes(x=rep(x1,2), y=Predicted)) + # change to 3 sp and x2 to distance\n  geom_ribbon(aes(ymin=lower, ymax=upper, fill=Species), alpha=0.3) +\n  geom_line(aes(col=Species)) +\n  labs(x=\"Distancia Casa\", y=\"tigrinus conditional occupancy\") +\n  theme_bw() +\n  theme(panel.grid.major=element_blank(), panel.grid.minor=element_blank(),\n        axis.text=element_text(size=12), axis.title=element_text(size=14),\n        legend.text=element_text(size=12), legend.title=element_text(size=14))"
  },
  {
    "objectID": "index.html#unmarked-2",
    "href": "index.html#unmarked-2",
    "title": "Occupación tigrinus",
    "section": "unmarked",
    "text": "unmarked\n\ncodigo R\n# tabla con solo tiginus\ntigrinus_cocha1 <- all_data_cocha1[[11]]\ntigrinus_cocha2 <- all_data_cocha2[[30]]\n# cargar paquete\nlibrary(unmarked)\n# crear objeto umf\numf_tigrinus_cocha1 <- unmarkedFrameOccu(y=tigrinus_cocha1)\numf_tigrinus_cocha2 <- unmarkedFrameOccu(y=tigrinus_cocha2)\n# verificar datos en grafica\nplot(umf_tigrinus_cocha1)\n\n\n\n\n\ncodigo R\nplot(umf_tigrinus_cocha2)\n\n\n\n\n\ncodigo R\n# tabla con solo perro\nperros_cocha1 <- all_data_cocha1[[2]]\n# cargar paquete\nlibrary(unmarked)\n# crear objeto umf\numf_perros_cocha1 <- unmarkedFrameOccu(y=perros_cocha1)\n# verificar datos en grafica\nplot(umf_perros_cocha1)"
  },
  {
    "objectID": "index.html#modelo-nulo-2",
    "href": "index.html#modelo-nulo-2",
    "title": "Occupación tigrinus",
    "section": "Modelo nulo",
    "text": "Modelo nulo\n\ncodigo R\n# modelo nulo\nfm_tig_cocha1 <- occu(~1 ~1, umf_tigrinus_cocha1)  # fit a model\nfm_tig_cocha2 <- occu(~1 ~1, umf_tigrinus_cocha2)  # fit a model\n\nbackTransform(fm_tig_cocha1, type=\"det\") #estimado lineal de deteccion\n\nBacktransformed linear combination(s) of Detection estimate(s)\nEstimate SE LinComb (Intercept) 0.0171 0.0092 -4.05 1\nTransformation: logistic\n\ncodigo R\nbackTransform(fm_tig_cocha1, type=\"state\") # estimado linel de ocupacion\n\nBacktransformed linear combination(s) of Occupancy estimate(s)\nEstimate SE LinComb (Intercept) 0.263 0.131 -1.03 1\nTransformation: logistic\n\ncodigo R\nbackTransform(fm_tig_cocha2, type=\"det\") #estimado lineal de deteccion\n\nBacktransformed linear combination(s) of Detection estimate(s)\nEstimate SE LinComb (Intercept) 0.0112 0.0052 -4.48 1\nTransformation: logistic\n\ncodigo R\nbackTransform(fm_tig_cocha2, type=\"state\") # estimado linel de ocupacion\n\nBacktransformed linear combination(s) of Occupancy estimate(s)\nEstimate SE LinComb (Intercept) 0.236 0.105 -1.17 1\nTransformation: logistic\n\ncodigo R\n# modelo nulo\nfm_perros_cocha1 <- occu(~1 ~1, umf_perros_cocha1)  # fit a model\n\nbackTransform(fm_perros_cocha1, type=\"det\") #estimado lineal de deteccion\n\nBacktransformed linear combination(s) of Detection estimate(s)\nEstimate SE LinComb (Intercept) 0.00179 0.000896 -6.32 1\nTransformation: logistic\n\ncodigo R\nbackTransform(fm_perros_cocha1, type=\"state\") # estimado linel de ocupacion\n\nBacktransformed linear combination(s) of Occupancy estimate(s)\nEstimate SE LinComb (Intercept) 1 NaN 7.83 1\nTransformation: logistic"
  },
  {
    "objectID": "index.html#modelos-de-co-ocurrencia-2",
    "href": "index.html#modelos-de-co-ocurrencia-2",
    "title": "cargar paquetes",
    "section": "MODELOS DE CO-OCURRENCIA",
    "text": "MODELOS DE CO-OCURRENCIA\n\ncodigo R\ndetformulas &lt;- c( \"~1\", \"~1\")#, \"~1\")\n#stateformulas &lt;- c('~elev','~elev', '~elev', \"~1\", \"~1\", \"~1\", \"~0\")# 3 sp\nstateformulas &lt;- c('~elev','~elev', \"~0\")\ny_full &lt;- list(tigrinus_full_26, perros_full_26)# , ocelote_ucu)\nnames(y_full) &lt;- c(\"tigrinus\", \"perros\")#, \"ocelote\")\n\n\n# obs_covs &lt;-as.data.frame(scale(cams_ucu_sf$dist_casa))\n# names(obs_covs) &lt;- \"dist_casa\"\n\n\numf &lt;-  unmarkedFrameOccuMulti(y=y_full, \n                              siteCovs=site_covs_full,\n                              obsCovs = NULL)\nplot(umf)\n#umf\n\n# occFormulas Length should match number/order of columns in fDesign\numf@fDesign\n\n\nfit1 &lt;- occuMulti(detformulas, stateformulas, umf,    \n        method=\"BFGS\", se=TRUE, engine=c(\"C\"), silent=FALSE)\n\nfit1\n\n# fit_opt &lt;- optimizePenalty(fit1, penalties=c(0,1,2))\n\n# update model\n# occFormulas2 &lt;- c('~dist_casa', '~dist_casa', '~dist_casa', \"~1\", \"~1\", \"~1\", \"~0\")\noccFormulas2 &lt;- c('~dist_casa', '~dist_casa', \"~0\")\nfit2 &lt;- update(fit1, stateformulas=occFormulas2)\nfit2\n\n\nModel Selection\n\ncodigo R\n#List of fitted models\nfl &lt;- fitList(elev=fit1, dist=fit2)\n# coef(fl)\n\n\n###################\n# Model selection #\n###################\n\nmodSel(fl)\n\n#############\n# Model fit #\n#############\n\n# bt &lt;- parboot(fit1, nsim=50) # takes time best model\n# plot(bt)"
  },
  {
    "objectID": "index.html#crerar-matrices-para-unmarked-3",
    "href": "index.html#crerar-matrices-para-unmarked-3",
    "title": "Occupación tigrinus",
    "section": "crerar matrices para unmarked",
    "text": "crerar matrices para unmarked\n\n\ncodigo R\n############# start spatial part\n#### make sf object\nlafe_sf <- st_as_sf(lafe_data, coords = c(\"Longitude\", \"Latitude\"), crs = \"EPSG:4326\")\n\n\n# get centroid. 1st bbox, make pol\ncentroid_lafe <- st_centroid(st_as_sfc(st_bbox(lafe_sf)))\n# get altitude\nelev_lafe_full <- elevation_3s(centroid_lafe[[1]][1], centroid_lafe[[1]][2], \n                         path=\"C:/CodigoR/tigrinus2/raster\")\n\n# elev_ucu_full_ras <- elev_ucu_full %>% raster()\n\n# st_bbox(ucumari_sf) # notice order xmin, xmax, ymin, ymax\next_lafe <- ext(-75.49, -75.179,  5.81,    6.03 )\nelev_lafe <- crop(elev_lafe_full, ext_lafe) \n\n# convert from terra to raster\nelev_lafe_ras <-  elev_lafe %>% raster()\n\n# get uniques\ncams_lafe <-lafe_data %>% dplyr::select(c(\"Longitude\", \"Latitude\", \"camera_trap\")) %>% distinct()\n#### make sf object\ncams_lafe_sf <- st_as_sf(cams_lafe, coords = c(\"Longitude\", \"Latitude\"), crs = \"EPSG:4326\")\n\n# extract values from raster using altitude\ncams_lafe_sf$elev <- extract(elev_lafe_ras, cams_lafe_sf)\n\n############## make distance map\n# # Convert points to sp spatialpointdatafram\n# casas_points <- as(casas_sf, \"Spatial\")\n# # Projection\n# # Be sure to have rgdal first installed.\n# casas_points_utm <- spTransform(casas_points, CRS('+init=epsg:32718'))\n# # convert to ppp\n# casas_points_ppp <- as(as(casas_points_utm, \"SpatialPoints\"), \"ppp\")\n# # distance\n# casas_distance <- distmap(casas_points_ppp)\n\n####### extract distance \n# \n# casas_distance_ras<- raster(casas_distance) # convert raster\n# crs(casas_distance_ras) <- '+init=epsg:32718' # add crs\n# \n# # project raster\n# casa_distance <- projectRaster(casas_distance_ras, crs = crs(casas_points))\n\n# cams_ucu_sf$dist_casa <- raster::extract(casas_distance_ras, cams_ucu_sf)\ncams_lafe_sf$dist_casa <- raster::extract(casa_distance, cams_lafe_sf) # also works\n\n\n# plot map\nmapview(elev_lafe_ras) + mapview(cams_lafe_sf[\"camera_trap\"]) \n\n\n\n\n\n\n\ncodigo R\n############### end spatial part\n\n#lafe_data$binomial <- str_c (lafe_data$Genus, \"_\", lafe_data$Species)\n\n#funcion para crear todas las tablas de datos\nall_data_lafe <-  f.matrix.creator2 (lafe_data)\n\n# names(all_data) # ver lass especies y en que lista esta cada una\n# kable(names(all_data)) # html table\n# Tigrinus es lista 3\n# perro es 2\n\ndatatable(\ndata = as.data.frame(names(all_data_lafe)),\ncaption = \"Especies La Fe\",\nfilter = \"top\"\n)"
  },
  {
    "objectID": "index.html#unmarked-3",
    "href": "index.html#unmarked-3",
    "title": "Occupación tigrinus",
    "section": "unmarked",
    "text": "unmarked\n\ncodigo R\n# tabla con solo tiginus\ntigrinus_lafe <- all_data_lafe[[3]]\n\n# colapsa a una semana take time\ntigrinus_lafe_48<-f.shrink.matrix.to26(matrix = all_data_lafe[[3]])\n\n# crear objeto umf\numf_tigrinus_lafe <- unmarkedFrameOccu(y=tigrinus_lafe_48)\n# verificar datos en grafica\n# plot(umf_tigrinus_ucu)\n\n# tabla con solo perros\nperros_lafe <- all_data_lafe[[2]]\n\n# colapsa a una semana take time\nperros_lafe_48<-f.shrink.matrix.to26(matrix = all_data_lafe[[2]])\n# crear objeto umf\numf_perros_lafe <- unmarkedFrameOccu(y=perros_lafe_48)\n# verificar datos en grafica\n# plot(umf_perros_ucu)\n\n# # tabla con solo ocelote\n# ocelote_lafe <- all_data[[16]]\n# # crear objeto umf\n# umf_ocelote_lafe <- unmarkedFrameOccu(y=ocelote_ucu)\n# # verificar datos en grafica\n# # plot(umf_ocelote_ucu)"
  },
  {
    "objectID": "index.html#modelo-nulo-3",
    "href": "index.html#modelo-nulo-3",
    "title": "Occupación tigrinus",
    "section": "Modelo nulo",
    "text": "Modelo nulo\n\ncodigo R\n# modelo nulo tigrinus\nfm_tig_lafe <- occu(~1 ~1, umf_tigrinus_lafe)  # fit a model\n\nbackTransform(fm_tig_lafe, type=\"det\") #estimado lineal de deteccion\n\nBacktransformed linear combination(s) of Detection estimate(s)\nEstimate SE LinComb (Intercept) 0.129 0.0797 -1.91 1\nTransformation: logistic\n\ncodigo R\nbackTransform(fm_tig_lafe, type=\"state\") # estimado linel de ocupacion\n\nBacktransformed linear combination(s) of Occupancy estimate(s)\nEstimate SE LinComb (Intercept) 0.513 0.293 0.0508 1\nTransformation: logistic\n\ncodigo R\n# modelo nulo perro\nfm_perros_lafe <- occu(~1 ~1, umf_perros_lafe)  # fit a model\n\nbackTransform(fm_perros_lafe, type=\"det\") #estimado lineal de deteccion\n\nBacktransformed linear combination(s) of Detection estimate(s)\nEstimate SE LinComb (Intercept) 0.247 0.06 -1.11 1\nTransformation: logistic\n\ncodigo R\nbackTransform(fm_perros_lafe, type=\"state\") # estimado linel de ocupacion\n\nBacktransformed linear combination(s) of Occupancy estimate(s)\nEstimate SE LinComb (Intercept) 0.748 0.171 1.09 1\nTransformation: logistic\n\ncodigo R\n# # modelo nulo ocelote\n# fm_ocelote_lafe <- occu(~1 ~1, umf_ocelote_lafe)  # fit a model\n# \n# backTransform(fm_ocelote_lafe, type=\"det\") #estimado lineal de deteccion\n# backTransform(fm_ocelote_lafe, type=\"state\") # estimado linel de ocupacion\n#"
  },
  {
    "objectID": "index.html#modelos-de-co-ocurrencia-3",
    "href": "index.html#modelos-de-co-ocurrencia-3",
    "title": "cargar paquetes",
    "section": "MODELOS DE CO-OCURRENCIA",
    "text": "MODELOS DE CO-OCURRENCIA\n\ncodigo R\ndetformulas &lt;- c( \"~1\", \"~1\")#, \"~1\")\n#stateformulas &lt;- c('~elev','~elev', '~elev', \"~1\", \"~1\", \"~1\", \"~0\")# 3 sp\nstateformulas &lt;- c('~elev','~elev', \"~0\")\ny_full &lt;- list(tigrinus_full_26, perros_full_26)# , ocelote_ucu)\nnames(y_full) &lt;- c(\"tigrinus\", \"perros\")#, \"ocelote\")\n\n\n# obs_covs &lt;-as.data.frame(scale(cams_ucu_sf$dist_casa))\n# names(obs_covs) &lt;- \"dist_casa\"\n\n\numf &lt;-  unmarkedFrameOccuMulti(y=y_full, \n                              siteCovs=site_covs_full,\n                              obsCovs = NULL)\nplot(umf)\n#umf\n\n# occFormulas Length should match number/order of columns in fDesign\numf@fDesign\n\n\nfit1 &lt;- occuMulti(detformulas, stateformulas, umf,    \n        method=\"BFGS\", se=TRUE, engine=c(\"C\"), silent=FALSE)\n\nfit1\n\n# fit_opt &lt;- optimizePenalty(fit1, penalties=c(0,1,2))\n\n# update model\n# occFormulas2 &lt;- c('~dist_casa', '~dist_casa', '~dist_casa', \"~1\", \"~1\", \"~1\", \"~0\")\noccFormulas2 &lt;- c('~dist_casa', '~dist_casa', \"~0\")\nfit2 &lt;- update(fit1, stateformulas=occFormulas2)\nfit2\n\n\nModel Selection\n\ncodigo R\n#List of fitted models\nfl &lt;- fitList(elev=fit1, dist=fit2)\n# coef(fl)\n\n\n###################\n# Model selection #\n###################\n\nmodSel(fl)\n\n#############\n# Model fit #\n#############\n\n# bt &lt;- parboot(fit1, nsim=50) # takes time best model\n# plot(bt)\n\n\n\nplot predicted marginal occupancy\n\ncodigo R\n#Plot predicted marginal occupancy as a function of disturbance\nr &lt;- range(site_covs_join$elev)\nx1 &lt;- seq(r[1],r[2],length.out=100)\nx_scale &lt;- (x1-mean(site_covs_join$elev))/sd(site_covs_join$elev)\n\nr2 &lt;- range(site_covs_join$dist_casa)\nx2 &lt;- seq(r2[1],r2[2],length.out=100)\nx2_scale &lt;- (x2-mean(site_covs_join$dist_casa))/sd(site_covs_join$dist_casa)\n\nnd &lt;- matrix(NA, 100, 2)\nnd &lt;- data.frame(elev=x_scale, dist_casa= x2_scale)\n\n\n\ntigrinus_pred &lt;- predict(fit2, \"state\", species=\"tigrinus\", newdata=nd)\ntigrinus_pred$Species &lt;- \"tigrinus\"\n\nperros_pred &lt;- predict(fit2, \"state\", species=\"perros\", newdata=nd)\nperros_pred$Species &lt;- \"perros\"\n\n# ocelote_pred &lt;- predict(fit2, \"state\", species=\"ocelote\", newdata=nd)\n# ocelote_pred$Species &lt;- \"ocelote\"\n\n\nplot_dat &lt;- rbind(tigrinus_pred, perros_pred)#, ocelote_pred)\n\nggplot(data=plot_dat, aes(x=rep(x2,2), y=Predicted)) + # change to 3 sp and x2 to distance\n  geom_ribbon(aes(ymin=lower, ymax=upper, fill=Species), alpha=0.3) +\n  geom_line(aes(col=Species)) +\n  labs(x=\"Dist Casas\", y=\"Marginal occupancy\") +\n  theme_bw() +\n  theme(panel.grid.major=element_blank(), panel.grid.minor=element_blank(),\n        axis.text=element_text(size=12), axis.title=element_text(size=14),\n        legend.text=element_text(size=12), legend.title=element_text(size=14))\n\n\n\nplot predicted co-occurrence occupancy\n\ncodigo R\n#Plot predicted marginal occupancy as a function of disturbance\nr &lt;- range(cams_ucu_sf$elev)\nx1 &lt;- seq(r[1],r[2],length.out=100)\nx_scale &lt;- (x1-mean(cams_ucu_sf$elev))/sd(cams_ucu_sf$elev)\n\nr2 &lt;- range(cams_ucu_sf$dist_casa)\nx2 &lt;- seq(r2[1],r2[2],length.out=100)\nx2_scale &lt;- (x2-mean(cams_ucu_sf$dist_casa))/sd(cams_ucu_sf$dist_casa)\n\nnd &lt;- matrix(NA, 100, 2)\nnd &lt;- data.frame(elev=x_scale, dist_casa= x2_scale)\n\n\ntigrinus_perros_pred &lt;- predict(fit2, \"state\", \n                         species=c(\"tigrinus\", \"perros\"), newdata=nd)\n\n# tigrinus_pred$Species &lt;- c(\"tigrinus\", \"perros\")\n\n# perros_pred &lt;- predict(fit1, \"state\", species=\"perros\", newdata=nd)\n# perros_pred$Species &lt;- \"perros\"\n\n# ocelote_pred &lt;- predict(fit2, \"state\", species=\"ocelote\", newdata=nd)\n# ocelote_pred$Species &lt;- \"ocelote\"\n\n\nplot_dat &lt;- tigrinus_perros_pred #rbind(tigrinus_pred, perros_pred)#, ocelote_pred)\n\nggplot(data=plot_dat, aes(x=rep(x2), y=Predicted)) + # change to 3 sp and x2 to distance\n  geom_ribbon(aes(ymin=lower, ymax=upper, fill = \"grey50\"), alpha=0.3) +\n  geom_line(aes(y=Predicted), col=\"blue\") +\n  labs(x=\"Dist Casa\", y=\"co-occurence\") +\n  theme_bw() +\n  theme(panel.grid.major=element_blank(), panel.grid.minor=element_blank(),\n        axis.text=element_text(size=12), axis.title=element_text(size=14),\n        legend.text=element_text(size=12), legend.title=element_text(size=14))\n\n\n\nplot predicted conditional occupancy\n\ncodigo R\n#Plot predicted marginal occupancy as a function of disturbance\nr &lt;- range(cams_ucu_sf$elev)\nx1 &lt;- seq(r[1],r[2],length.out=100)\nx_scale &lt;- (x1-mean(cams_ucu_sf$elev))/sd(cams_ucu_sf$elev)\n\nr2 &lt;- range(cams_ucu_sf$dist_casa)\nx2 &lt;- seq(r2[1],r2[2],length.out=100)\nx2_scale &lt;- (x2-mean(cams_ucu_sf$dist_casa))/sd(cams_ucu_sf$dist_casa)\n\nnd &lt;- matrix(NA, 100, 2)\nnd &lt;- data.frame(elev=x_scale, dist_casa= x2_scale)\n\n##### conditional\n\ntigrinus_perro_no &lt;- predict(fit2, \"state\", \n                         species=\"tigrinus\", \n                         cond='-perros',\n                         newdata=nd)\n\ntigrinus_perro_no$Species &lt;- \"perro ausente\"\n\ntigrinus_perro_si &lt;- predict(fit2, \"state\", \n                         species=\"tigrinus\", \n                         cond='perros',\n                         newdata=nd)\n\ntigrinus_perro_si$Species &lt;- \"perro presente\"\n\n\n\n\n\n# perros_pred &lt;- predict(fit1, \"state\", species=\"perros\", newdata=nd)\n# perros_pred$Species &lt;- \"perros\"\n\n# ocelote_pred &lt;- predict(fit2, \"state\", species=\"ocelote\", newdata=nd)\n# ocelote_pred$Species &lt;- \"ocelote\"\n\n\nplot_dat &lt;- rbind(tigrinus_perro_si, tigrinus_perro_no)#, ocelote_pred)\n\nggplot(data=plot_dat, aes(x=rep(x2,2), y=Predicted)) + # change to 3 sp and x2 to distance\n  geom_ribbon(aes(ymin=lower, ymax=upper, fill=Species), alpha=0.3) +\n  geom_line(aes(col=Species)) +\n  labs(x=\"Dist Casa\", y=\"tigrinus conditional occupancy\") +\n  theme_bw() +\n  theme(panel.grid.major=element_blank(), panel.grid.minor=element_blank(),\n        axis.text=element_text(size=12), axis.title=element_text(size=14),\n        legend.text=element_text(size=12), legend.title=element_text(size=14))"
  },
  {
    "objectID": "index.html#crerar-matrices-para-unmarked-4",
    "href": "index.html#crerar-matrices-para-unmarked-4",
    "title": "Occupación tigrinus",
    "section": "crerar matrices para unmarked",
    "text": "crerar matrices para unmarked\n\n\ncodigo R\n############# start spatial part\n#### make sf object\nriogrande_sf <- st_as_sf(riogrande_data, coords = c(\"Longitude\", \"Latitude\"), crs = \"EPSG:4326\")\n\n\n# get centroid. 1st bbox, make pol\ncentroid_riogrande <- st_centroid(st_as_sfc(st_bbox(riogrande_sf)))\n# get altitude\nelev_riogrande_full <- elevation_3s(centroid_riogrande[[1]][1], centroid_riogrande[[1]][2], \n                         path=\"C:/CodigoR/tigrinus2/raster\")\n\n# elev_ucu_full_ras <- elev_ucu_full %>% raster()\n\n# st_bbox(ucumari_sf) # notice order xmin, xmax, ymin, ymax\next_riogrande <- ext(-75.94, -75.275,  6.27,    6.896 )\nelev_riogrande <- crop(elev_riogrande_full, ext_riogrande) \n\n# convert from terra to raster\nelev_riogrande_ras <-  elev_riogrande %>% raster()\n\n# get uniques\ncams_riogrande <-riogrande_data %>% dplyr::select(c(\"Longitude\", \"Latitude\", \"camera_trap\")) %>% distinct()\n#### make sf object\ncams_riogrande_sf <- st_as_sf(cams_riogrande, coords = c(\"Longitude\", \"Latitude\"), crs = \"EPSG:4326\")\n\n# extract values from raster using altitude\ncams_riogrande_sf$elev <- extract(elev_riogrande_ras, cams_riogrande_sf)\n\n############## make distance map\n# # Convert points to sp spatialpointdatafram\n# casas_points <- as(casas_sf, \"Spatial\")\n# # Projection\n# # Be sure to have rgdal first installed.\n# casas_points_utm <- spTransform(casas_points, CRS('+init=epsg:32718'))\n# # convert to ppp\n# casas_points_ppp <- as(as(casas_points_utm, \"SpatialPoints\"), \"ppp\")\n# # distance\n# casas_distance <- distmap(casas_points_ppp)\n\n####### extract distance \n# \n# casas_distance_ras<- raster(casas_distance) # convert raster\n# crs(casas_distance_ras) <- '+init=epsg:32718' # add crs\n# \n# # project raster\n# casa_distance <- projectRaster(casas_distance_ras, crs = crs(casas_points))\n\n# cams_ucu_sf$dist_casa <- raster::extract(casas_distance_ras, cams_ucu_sf)\ncams_riogrande_sf$dist_casa <- raster::extract(casa_distance, cams_riogrande_sf) # also works\n\n\n# plot map\nmapview(elev_riogrande_ras) + mapview(cams_riogrande_sf[\"camera_trap\"]) \n\n\n\n\n\n\n\ncodigo R\n############### end spatial part\n\n#riogrande_data$binomial <- str_c (riogrande_data$Genus, \"_\", riogrande_data$Species)\n\n#funcion para crear todas las tablas de datos\nall_data_riogrande <-  f.matrix.creator2 (riogrande_data)\n\n# names(all_data) # ver lass especies y en que lista esta cada una\n# kable(names(all_data)) # html table\n# Tigrinus es lista 11\n# perro es 1\n\ndatatable(\ndata = as.data.frame(names(all_data_riogrande)),\ncaption = \"Especies Rio Grande\",\nfilter = \"top\"\n)"
  },
  {
    "objectID": "index.html#unmarked-4",
    "href": "index.html#unmarked-4",
    "title": "Occupación tigrinus",
    "section": "unmarked",
    "text": "unmarked\n\ncodigo R\n# colapsa a una semana take time\ntigrinus_riogrande_48<-f.shrink.matrix.to26(matrix = all_data_riogrande[[11]])\n\n# tabla con solo tiginus\ntigrinus_riogrande <- tigrinus_riogrande_48 #all_data_riogrande[[11]]\n\n\n\n# crear objeto umf\numf_tigrinus_riogrande <- unmarkedFrameOccu(y=tigrinus_riogrande)\n# verificar datos en grafica\n# plot(umf_tigrinus_ucu)\n\n# colapsa a una semana take time\nperros_riogrande_48<-f.shrink.matrix.to26(matrix = all_data_riogrande[[1]])\n\n# tabla con solo perros\nperros_riogrande <- perros_riogrande_48 #all_data_riogrande[[1]]\n# crear objeto umf\numf_perros_riogrande <- unmarkedFrameOccu(y=perros_riogrande)\n# verificar datos en grafica\n# plot(umf_perros_ucu)\n\n# # tabla con solo ocelote\n# ocelote_riogrande <- all_data[[16]]\n# # crear objeto umf\n# umf_ocelote_riogrande <- unmarkedFrameOccu(y=ocelote_ucu)\n# # verificar datos en grafica\n# # plot(umf_ocelote_ucu)"
  },
  {
    "objectID": "index.html#modelo-nulo-4",
    "href": "index.html#modelo-nulo-4",
    "title": "Occupación tigrinus",
    "section": "Modelo nulo",
    "text": "Modelo nulo\n\ncodigo R\n# modelo nulo tigrinus\nfm_tig_riogrande <- occu(~1 ~1, umf_tigrinus_riogrande)  # fit a model\n\nbackTransform(fm_tig_riogrande, type=\"det\") #estimado lineal de deteccion\n\nBacktransformed linear combination(s) of Detection estimate(s)\nEstimate SE LinComb (Intercept) 0.225 0.102 -1.24 1\nTransformation: logistic\n\ncodigo R\nbackTransform(fm_tig_riogrande, type=\"state\") # estimado linel de ocupacion\n\nBacktransformed linear combination(s) of Occupancy estimate(s)\nEstimate SE LinComb (Intercept) 0.236 0.111 -1.18 1\nTransformation: logistic\n\ncodigo R\n# modelo nulo perro\nfm_perros_riogrande <- occu(~1 ~1, umf_perros_riogrande)  # fit a model\n\nbackTransform(fm_perros_riogrande, type=\"det\") #estimado lineal de deteccion\n\nBacktransformed linear combination(s) of Detection estimate(s)\nEstimate SE LinComb (Intercept) 0.118 0.0936 -2.01 1\nTransformation: logistic\n\ncodigo R\nbackTransform(fm_perros_riogrande, type=\"state\") # estimado linel de ocupacion\n\nBacktransformed linear combination(s) of Occupancy estimate(s)\nEstimate SE LinComb (Intercept) 0.482 0.33 -0.0723 1\nTransformation: logistic\n\ncodigo R\n# # modelo nulo ocelote\n# fm_ocelote_riogrande <- occu(~1 ~1, umf_ocelote_riogrande)  # fit a model\n# \n# backTransform(fm_ocelote_riogrande, type=\"det\") #estimado lineal de deteccion\n# backTransform(fm_ocelote_riogrande, type=\"state\") # estimado linel de ocupacion\n#"
  },
  {
    "objectID": "index.html#modelos-de-co-ocurrencia-4",
    "href": "index.html#modelos-de-co-ocurrencia-4",
    "title": "Occupación tigrinus",
    "section": "MODELOS DE CO-OCURRENCIA",
    "text": "MODELOS DE CO-OCURRENCIA\n\ncodigo R\ndetformulas <- c( \"~1\", \"~1\")#, \"~1\")\n#stateformulas <- c('~elev','~elev', '~elev', \"~1\", \"~1\", \"~1\", \"~0\")# 3 sp\nstateformulas <- c('~elev','~elev', \"~0\")\ny <- list(tigrinus_riogrande, perros_riogrande)# , ocelote_riogrande)\nnames(y) <- c(\"tigrinus\", \"perros\")#, \"ocelote\")\n\n\nobs_covs <-as.data.frame(scale(cams_riogrande_sf$dist_casa))\nnames(obs_covs) <- \"dist_casa\"\n\nsite_covs_riogrande <- data.frame(cams_riogrande_sf[,c('elev','dist_casa')])[,1:2]\nsite_covs_riogrande <-as.data.frame(apply(site_covs_riogrande,2,scale))\nnames(site_covs_riogrande) <- c(\"elev\", \"dist_casa\")\n\n\numf <-  unmarkedFrameOccuMulti(y=y, \n                              siteCovs=site_covs_riogrande,\n                              obsCovs = NULL)\nplot(umf)\n\n\n\n\n\ncodigo R\n#umf\n\n# occFormulas Length should match number/order of columns in fDesign\numf@fDesign\n\n    f1[tigrinus] f2[perros] f3[tigrinus:perros]\npsi[11] 1 1 1 psi[10] 1 0 0 psi[01] 0 1 0 psi[00] 0 0 0\n\ncodigo R\nfit1 <- occuMulti(detformulas, stateformulas, umf,    \n        method=\"BFGS\", se=TRUE, engine=c(\"C\"), silent=FALSE)\n\nfit1\n\nCall: occuMulti(detformulas = detformulas, stateformulas = stateformulas, data = umf, method = “BFGS”, se = TRUE, engine = c(“C”), silent = FALSE, maxOrder = 2L)\nOccupancy: Estimate SE z P(>|z|) [tigrinus] (Intercept) -0.888 0.763 -1.164 0.245 [tigrinus] elev -2.289 1.549 -1.478 0.140 [perros] (Intercept) -0.498 0.861 -0.578 0.564 [perros] elev -0.579 0.655 -0.884 0.377\nDetection: Estimate SE z P(>|z|) [tigrinus] (Intercept) -1.48 0.592 -2.49 0.0126 [perros] (Intercept) -1.70 0.713 -2.39 0.0170\nAIC: 143.037\n\ncodigo R\n# update model\n# occFormulas2 <- c('~dist_casa', '~dist_casa', '~dist_casa', \"~1\", \"~1\", \"~1\", \"~0\")\noccFormulas2 <- c('~dist_casa', '~dist_casa', \"~0\")\nfit2 <- update(fit1, stateformulas=occFormulas2)\nfit2\n\nCall: occuMulti(detformulas = c(“~1”, “~1”), stateformulas = c(“~dist_casa”, “~dist_casa”, “~0”), data = umf, maxOrder = 2L, method = “BFGS”, se = TRUE, engine = c(“C”), silent = FALSE)\nOccupancy: Estimate SE z P(>|z|) [tigrinus] (Intercept) -1.211 0.632 -1.916 0.0554 [tigrinus] dist_casa -0.364 1.029 -0.354 0.7237 [perros] (Intercept) -0.315 1.114 -0.283 0.7772 [perros] dist_casa 1.859 2.907 0.639 0.5225\nDetection: Estimate SE z P(>|z|) [tigrinus] (Intercept) -1.23 0.584 -2.11 0.0349 [perros] (Intercept) -1.69 0.721 -2.34 0.0190\nAIC: 143.4188\n\nModel Selection\n\ncodigo R\n#List of fitted models\nfl <- fitList(elev=fit1, dist=fit2)\n# coef(fl)\n\n###################\n# Model selection #\n###################\n\nmodSel(fl)\n\n nPars    AIC delta AICwt cumltvWt\nelev 6 143.04 0.00 0.55 0.55 dist 6 143.42 0.38 0.45 1.00\n\ncodigo R\n#############\n# Model fit #\n#############\n\n# bt <- parboot(fit1, nsim=50) # takes time best model\n# plot(bt)\n\n\n\nplot predicted marginal occupancy\n\ncodigo R\n#Plot predicted marginal occupancy as a function of disturbance\nr <- range(cams_riogrande_sf$elev)\nx1 <- seq(r[1],r[2],length.out=100)\nx_scale <- (x1-mean(cams_riogrande_sf$elev))/sd(cams_riogrande_sf$elev)\n\nr2 <- range(cams_riogrande_sf$dist_casa)\nx2 <- seq(r2[1],r2[2],length.out=100)\nx2_scale <- (x2-mean(cams_riogrande_sf$dist_casa))/sd(cams_riogrande_sf$dist_casa)\n\nnd <- matrix(NA, 100, 2)\nnd <- data.frame(elev=x_scale, dist_casa= x2_scale)\n\n\n\ntigrinus_pred <- predict(fit2, \"state\", species=\"tigrinus\", newdata=nd)\ntigrinus_pred$Species <- \"tigrinus\"\n\nperros_pred <- predict(fit2, \"state\", species=\"perros\", newdata=nd)\nperros_pred$Species <- \"perros\"\n\n# ocelote_pred <- predict(fit2, \"state\", species=\"ocelote\", newdata=nd)\n# ocelote_pred$Species <- \"ocelote\"\n\n\nplot_dat <- rbind(tigrinus_pred, perros_pred)#, ocelote_pred)\n\nggplot(data=plot_dat, aes(x=rep(x2,2), y=Predicted)) + # change to 3 sp and x2 to distance\n  geom_ribbon(aes(ymin=lower, ymax=upper, fill=Species), alpha=0.3) +\n  geom_line(aes(col=Species)) +\n  labs(x=\"Distancia Casa\", y=\"Marginal occupancy\") +\n  theme_bw() +\n  theme(panel.grid.major=element_blank(), panel.grid.minor=element_blank(),\n        axis.text=element_text(size=12), axis.title=element_text(size=14),\n        legend.text=element_text(size=12), legend.title=element_text(size=14))\n\n\n\n\n\n\nplot predicted co-occurrence occupancy\n\ncodigo R\n#Plot predicted marginal occupancy as a function of disturbance\nr <- range(cams_lafe_sf$elev)\nx1 <- seq(r[1],r[2],length.out=100)\nx_scale <- (x1-mean(cams_lafe_sf$elev))/sd(cams_lafe_sf$elev)\n\nr2 <- range(cams_lafe_sf$dist_casa)\nx2 <- seq(r2[1],r2[2],length.out=100)\nx2_scale <- (x2-mean(cams_lafe_sf$dist_casa))/sd(cams_lafe_sf$dist_casa)\n\nnd <- matrix(NA, 100, 2)\nnd <- data.frame(elev=x_scale, dist_casa= x2_scale)\n\n\ntigrinus_perros_pred <- predict(fit2, \"state\", \n                         species=c(\"tigrinus\", \"perros\"), newdata=nd)\n\n# tigrinus_pred$Species <- c(\"tigrinus\", \"perros\")\n\n# perros_pred <- predict(fit1, \"state\", species=\"perros\", newdata=nd)\n# perros_pred$Species <- \"perros\"\n\n# ocelote_pred <- predict(fit2, \"state\", species=\"ocelote\", newdata=nd)\n# ocelote_pred$Species <- \"ocelote\"\n\n\nplot_dat <- tigrinus_perros_pred #rbind(tigrinus_pred, perros_pred)#, ocelote_pred)\n\nggplot(data=plot_dat, aes(x=rep(x2), y=Predicted)) + # change to 3 sp and x2 to distance\n  geom_ribbon(aes(ymin=lower, ymax=upper, fill = \"grey50\"), alpha=0.3) +\n  geom_line(aes(y=Predicted), col=\"blue\") +\n  labs(x=\"Distancia Casa\", y=\"co-occurence\") +\n  theme_bw() +\n  theme(panel.grid.major=element_blank(), panel.grid.minor=element_blank(),\n        axis.text=element_text(size=12), axis.title=element_text(size=14),\n        legend.text=element_text(size=12), legend.title=element_text(size=14))\n\n\n\n\n\n\nplot predicted conditional occupancy\n\ncodigo R\n#Plot predicted marginal occupancy as a function of disturbance\nr <- range(cams_riogrande_sf$elev)\nx1 <- seq(r[1],r[2],length.out=100)\nx_scale <- (x1-mean(cams_riogrande_sf$elev))/sd(cams_riogrande_sf$elev)\n\nr2 <- range(cams_riogrande_sf$dist_casa)\nx2 <- seq(r2[1],r2[2],length.out=100)\nx2_scale <- (x2-mean(cams_riogrande_sf$dist_casa))/sd(cams_riogrande_sf$dist_casa)\n\nnd <- matrix(NA, 100, 2)\nnd <- data.frame(elev=x_scale, dist_casa= x2_scale)\n\n##### conditional\n\ntigrinus_perro_no <- predict(fit2, \"state\", \n                         species=\"tigrinus\", \n                         cond='-perros',\n                         newdata=nd)\n\ntigrinus_perro_no$Species <- \"perro ausente\"\n\ntigrinus_perro_si <- predict(fit2, \"state\", \n                         species=\"tigrinus\", \n                         cond='perros',\n                         newdata=nd)\n\ntigrinus_perro_si$Species <- \"perro presente\"\n\n\n\n\n\n# perros_pred <- predict(fit1, \"state\", species=\"perros\", newdata=nd)\n# perros_pred$Species <- \"perros\"\n\n# ocelote_pred <- predict(fit2, \"state\", species=\"ocelote\", newdata=nd)\n# ocelote_pred$Species <- \"ocelote\"\n\n\nplot_dat <- rbind(tigrinus_perro_si, tigrinus_perro_no)#, ocelote_pred)\n\nggplot(data=plot_dat, aes(x=rep(x1,2), y=Predicted)) + # change to 3 sp and x2 to distance\n  geom_ribbon(aes(ymin=lower, ymax=upper, fill=Species), alpha=0.3) +\n  geom_line(aes(col=Species)) +\n  labs(x=\"Distancia Casa\", y=\"tigrinus conditional occupancy\") +\n  theme_bw() +\n  theme(panel.grid.major=element_blank(), panel.grid.minor=element_blank(),\n        axis.text=element_text(size=12), axis.title=element_text(size=14),\n        legend.text=element_text(size=12), legend.title=element_text(size=14))"
  },
  {
    "objectID": "index.html#modelos-de-co-ocurrencia-5",
    "href": "index.html#modelos-de-co-ocurrencia-5",
    "title": "Occupación tigrinus",
    "section": "MODELOS DE CO-OCURRENCIA",
    "text": "MODELOS DE CO-OCURRENCIA\n\ncodigo R\ndetformulas <- c( \"~1\", \"~1\")#, \"~1\")\n#stateformulas <- c('~elev','~elev', '~elev', \"~1\", \"~1\", \"~1\", \"~0\")# 3 sp\nstateformulas <- c('~elev','~elev', \"~0\")\ny_full <- list(tigrinus_full_26, perros_full_26)# , ocelote_ucu)\nnames(y_full) <- c(\"tigrinus\", \"perros\")#, \"ocelote\")\n\n\n# obs_covs <-as.data.frame(scale(cams_ucu_sf$dist_casa))\n# names(obs_covs) <- \"dist_casa\"\n\n\numf <-  unmarkedFrameOccuMulti(y=y_full, \n                              siteCovs=site_covs_full,\n                              obsCovs = NULL)\nplot(umf)\n\n\n\n\n\ncodigo R\n#umf\n\n# occFormulas Length should match number/order of columns in fDesign\numf@fDesign\n\n    f1[tigrinus] f2[perros] f3[tigrinus:perros]\npsi[11] 1 1 1 psi[10] 1 0 0 psi[01] 0 1 0 psi[00] 0 0 0\n\ncodigo R\nfit1 <- occuMulti(detformulas, stateformulas, umf,    \n        method=\"BFGS\", se=TRUE, engine=c(\"C\"), silent=FALSE)\n\nfit1\n\nCall: occuMulti(detformulas = detformulas, stateformulas = stateformulas, data = umf, method = “BFGS”, se = TRUE, engine = c(“C”), silent = FALSE, maxOrder = 2L)\nOccupancy: Estimate SE z P(>|z|) [tigrinus] (Intercept) 4.62 3.12 1.48054 0.139 [tigrinus] elev -3.49 2.19 -1.59028 0.112 [perros] (Intercept) 28.26 16777.22 0.00168 0.999 [perros] elev -1.54 3.17 -0.48613 0.627\nDetection: Estimate SE z P(>|z|) [tigrinus] (Intercept) -3.72 0.164 -22.7 1.09e-113 [perros] (Intercept) -4.55 0.197 -23.1 1.32e-117\nAIC: 775.9273\n\ncodigo R\n# fit_opt <- optimizePenalty(fit1, penalties=c(0,1,2))\n\n# update model\n# occFormulas2 <- c('~dist_casa', '~dist_casa', '~dist_casa', \"~1\", \"~1\", \"~1\", \"~0\")\noccFormulas2 <- c('~dist_casa', '~dist_casa', \"~0\")\nfit2 <- update(fit1, stateformulas=occFormulas2)\nfit2\n\nCall: occuMulti(detformulas = c(“~1”, “~1”), stateformulas = c(“~dist_casa”, “~dist_casa”, “~0”), data = umf, maxOrder = 2L, method = “BFGS”, se = TRUE, engine = c(“C”), silent = FALSE)\nOccupancy: Estimate SE z P(>|z|) [tigrinus] (Intercept) -0.7606 0.337 -2.254 2.42e-02 [tigrinus] dist_casa -0.2583 0.259 -0.998 3.18e-01 [perros] (Intercept) -1.7709 0.332 -5.335 9.55e-08 [perros] dist_casa -0.0737 0.239 -0.309 7.57e-01\nDetection: Estimate SE z P(>|z|) [tigrinus] (Intercept) -2.65 0.279 -9.50 2.04e-21 [perros] (Intercept) -2.24 0.396 -5.65 1.63e-08\nAIC: 752.2022\n\nModel Selection\n\ncodigo R\n#List of fitted models\nfl <- fitList(elev=fit1, dist=fit2)\n# coef(fl)\n\n\n###################\n# Model selection #\n###################\n\nmodSel(fl)\n\n nPars    AIC delta AICwt cumltvWt\ndist 6 752.20 0.00 1e+00 1.00 elev 6 775.93 23.73 7e-06 1.00\n\ncodigo R\n#############\n# Model fit #\n#############\n\n# bt <- parboot(fit1, nsim=50) # takes time best model\n# plot(bt)\n\n\n\nplot predicted marginal occupancy\n\ncodigo R\n#Plot predicted marginal occupancy as a function of disturbance\nr <- range(site_covs_join$elev)\nx1 <- seq(r[1],r[2],length.out=100)\nx_scale <- (x1-mean(site_covs_join$elev))/sd(site_covs_join$elev)\n\nr2 <- range(site_covs_join$dist_casa)\nx2 <- seq(r2[1],r2[2],length.out=100)\nx2_scale <- (x2-mean(site_covs_join$dist_casa))/sd(site_covs_join$dist_casa)\n\nnd <- matrix(NA, 100, 2)\nnd <- data.frame(elev=x_scale, dist_casa= x2_scale)\n\n\n\ntigrinus_pred <- predict(fit2, \"state\", species=\"tigrinus\", newdata=nd)\ntigrinus_pred$Species <- \"tigrinus\"\n\nperros_pred <- predict(fit2, \"state\", species=\"perros\", newdata=nd)\nperros_pred$Species <- \"perros\"\n\n# ocelote_pred <- predict(fit2, \"state\", species=\"ocelote\", newdata=nd)\n# ocelote_pred$Species <- \"ocelote\"\n\n\nplot_dat <- rbind(tigrinus_pred, perros_pred)#, ocelote_pred)\n\nggplot(data=plot_dat, aes(x=rep(x2,2), y=Predicted)) + # change to 3 sp and x2 to distance\n  geom_ribbon(aes(ymin=lower, ymax=upper, fill=Species), alpha=0.3) +\n  geom_line(aes(col=Species)) +\n  labs(x=\"Dist Casas\", y=\"Marginal occupancy\") +\n  theme_bw() +\n  theme(panel.grid.major=element_blank(), panel.grid.minor=element_blank(),\n        axis.text=element_text(size=12), axis.title=element_text(size=14),\n        legend.text=element_text(size=12), legend.title=element_text(size=14))\n\n\n\n\n\n\nplot predicted co-occurrence occupancy\n\ncodigo R\n#Plot predicted marginal occupancy as a function of disturbance\nr <- range(cams_ucu_sf$elev)\nx1 <- seq(r[1],r[2],length.out=100)\nx_scale <- (x1-mean(cams_ucu_sf$elev))/sd(cams_ucu_sf$elev)\n\nr2 <- range(cams_ucu_sf$dist_casa)\nx2 <- seq(r2[1],r2[2],length.out=100)\nx2_scale <- (x2-mean(cams_ucu_sf$dist_casa))/sd(cams_ucu_sf$dist_casa)\n\nnd <- matrix(NA, 100, 2)\nnd <- data.frame(elev=x_scale, dist_casa= x2_scale)\n\n\ntigrinus_perros_pred <- predict(fit2, \"state\", \n                         species=c(\"tigrinus\", \"perros\"), newdata=nd)\n\n# tigrinus_pred$Species <- c(\"tigrinus\", \"perros\")\n\n# perros_pred <- predict(fit1, \"state\", species=\"perros\", newdata=nd)\n# perros_pred$Species <- \"perros\"\n\n# ocelote_pred <- predict(fit2, \"state\", species=\"ocelote\", newdata=nd)\n# ocelote_pred$Species <- \"ocelote\"\n\n\nplot_dat <- tigrinus_perros_pred #rbind(tigrinus_pred, perros_pred)#, ocelote_pred)\n\nggplot(data=plot_dat, aes(x=rep(x2), y=Predicted)) + # change to 3 sp and x2 to distance\n  geom_ribbon(aes(ymin=lower, ymax=upper, fill = \"grey50\"), alpha=0.3) +\n  geom_line(aes(y=Predicted), col=\"blue\") +\n  labs(x=\"Dist Casa\", y=\"co-occurence\") +\n  theme_bw() +\n  theme(panel.grid.major=element_blank(), panel.grid.minor=element_blank(),\n        axis.text=element_text(size=12), axis.title=element_text(size=14),\n        legend.text=element_text(size=12), legend.title=element_text(size=14))\n\n\n\n\n\n\nplot predicted conditional occupancy\n\ncodigo R\n#Plot predicted marginal occupancy as a function of disturbance\nr <- range(cams_ucu_sf$elev)\nx1 <- seq(r[1],r[2],length.out=100)\nx_scale <- (x1-mean(cams_ucu_sf$elev))/sd(cams_ucu_sf$elev)\n\nr2 <- range(cams_ucu_sf$dist_casa)\nx2 <- seq(r2[1],r2[2],length.out=100)\nx2_scale <- (x2-mean(cams_ucu_sf$dist_casa))/sd(cams_ucu_sf$dist_casa)\n\nnd <- matrix(NA, 100, 2)\nnd <- data.frame(elev=x_scale, dist_casa= x2_scale)\n\n##### conditional\n\ntigrinus_perro_no <- predict(fit2, \"state\", \n                         species=\"tigrinus\", \n                         cond='-perros',\n                         newdata=nd)\n\ntigrinus_perro_no$Species <- \"perro ausente\"\n\ntigrinus_perro_si <- predict(fit2, \"state\", \n                         species=\"tigrinus\", \n                         cond='perros',\n                         newdata=nd)\n\ntigrinus_perro_si$Species <- \"perro presente\"\n\n\n\n\n\n# perros_pred <- predict(fit1, \"state\", species=\"perros\", newdata=nd)\n# perros_pred$Species <- \"perros\"\n\n# ocelote_pred <- predict(fit2, \"state\", species=\"ocelote\", newdata=nd)\n# ocelote_pred$Species <- \"ocelote\"\n\n\nplot_dat <- rbind(tigrinus_perro_si, tigrinus_perro_no)#, ocelote_pred)\n\nggplot(data=plot_dat, aes(x=rep(x2,2), y=Predicted)) + # change to 3 sp and x2 to distance\n  geom_ribbon(aes(ymin=lower, ymax=upper, fill=Species), alpha=0.3) +\n  geom_line(aes(col=Species)) +\n  labs(x=\"Dist Casa\", y=\"tigrinus conditional occupancy\") +\n  theme_bw() +\n  theme(panel.grid.major=element_blank(), panel.grid.minor=element_blank(),\n        axis.text=element_text(size=12), axis.title=element_text(size=14),\n        legend.text=element_text(size=12), legend.title=element_text(size=14))"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "CO-OCURRENCIA DEL TIGRILLO LANUDO (Leopardus trigrinus) CON PERROS DOMÉSTICOS A LO LARGO DE LOS ANDES COLOMBIANOS\nEl tigrillo lanudo (Leopardus tigrinus) en Colombia está restringido a bosques de niebla y páramos. La presencia de animales domésticos en estos ambientes suele ser frecuente, debido a las poblaciones locales y el manejo tradicional que se les ha dado. En términos generales, a las mascotas se les permite ir y venir a voluntad, incluyendo su desplazamiento en hábitats naturales sin ningún tipo de supervisión. El impacto de la presencia de perros en ambientes naturales ha sido documentado previamente en términos de competencia, depredación y recientemente se han identificado como vectores de enfermedades perjudiciales para la fauna silvestre, como sarna y parvovirus. El objetivo de este trabajo fue determinar como la altitud y la distancia a las casas influyen en la co-ocurrencia de tigrillos y perros domésticos, así como identificar si existe segregación temporal en estas áreas de co-ocurrencia. Usamos datos de 302 sitios en los que se ubicaron trampas cámara para construir modelos de co-ocurrencia, usando el paquete unmarked en R, para seis localidades en los Andes colombianos: altiplano norte de Antioquia, oriente antioqueño, Ucumari (Risaralda), Pitalito (Huila) y dos sitios en la Laguna de La Cocha (Nariño). Los resultados obtenidos muestran que ambas especies co-ocurren en menos del 8% de los sitios muestreados y que la elevación y la distancia a las casas influyen en la co-ocurrencia de las dos especies a escala local, a escala regional la distancia a las casas fue más importante. Adicional a la baja co-ocurrencia ambas especies presentan una alta segregación temporal."
  },
  {
    "objectID": "index.html#cocha-data",
    "href": "index.html#cocha-data",
    "title": "cargar paquetes",
    "section": "cocha data",
    "text": "cocha data\n\ncodigo R\n# fix dates\n\nFull_data_cocha1$start_date &lt;- as.Date(Full_data_cocha1$\"camera_trap_start_date\", \"%Y-%m-%d\")\nFull_data_cocha1$end_date &lt;- as.Date(Full_data_cocha1$\"camera_trap_end_date\", \"%Y-%m-%d\")\nFull_data_cocha1$eventDateTime &lt;- Full_data_cocha1$Date_Time #, \"%Y-%m-%d\")\n# remove NA in datetime\n\n# Full_data_cocha1$eventDateTime &lt;- ymd_hms(paste(Full_data_cocha1$\"Photo_Date\", Full_data_cocha1$\"Photo time\", sep=\" \"))\n# rename camera id\nFull_data_cocha1$camid &lt;- Full_data_cocha1$`camera_trap`\n\n\n\n# filter 2021 and make uniques\ncocha1_CToperation  &lt;- Full_data_cocha1 |&gt; dplyr::group_by(camid) |&gt; #(array_locID) |&gt; \n                           mutate(minStart=start_date, maxEnd=end_date) |&gt; distinct(Longitude, Latitude, minStart, maxEnd) |&gt; dplyr::ungroup()\n# remove one duplicated\n# View(CToperation)\n# CToperation &lt;- CToperation[-15,]\n\n\n# Generamos la matríz de operación de las cámaras\n\ncocha1_camop &lt;- cameraOperation(CTtable= cocha1_CToperation, # Tabla de operación\n                         stationCol= \"camid\", # Columna que define la estación\n                         setupCol= \"minStart\", #Columna fecha de colocación\n                         retrievalCol= \"maxEnd\", #Columna fecha de retiro\n                         #hasProblems= T, # Hubo fallos de cámaras\n                         dateFormat= \"%Y-%m-%d\")#, #, # Formato de las fechas\n                         #cameraCol=\"Camera_Id\")\n                         # sessionCol= \"Year\")\n\n\n\n# Generar las historias de detección ---------------------------------------\n## remove problem species\n\nFull_data_cocha1$scientificName &lt;- Full_data_cocha1$`Genus Species`\n\n#### remove setups\ncocha1_ind &lt;- which(is.na((Full_data_cocha1$scientificName)))\nFull_data_cocha1 &lt;- Full_data_cocha1[-cocha1_ind,]\n\n# ind &lt;- which(Ecu_full$scientificName==\"Set up\")\n# Ecu_full &lt;- Ecu_full[-ind,]\n# \n# ind &lt;- which(Ecu_full$scientificName==\"Blank\")\n# Ecu_full &lt;- Ecu_full[-ind,]\n# \n# ind &lt;- which(Ecu_full$scientificName==\"Unidentifiable\")\n# Ecu_full &lt;- Ecu_full[-ind,]\n\n\n############### cocha1\n\ncocha1_DetHist_list &lt;- lapply(unique(Full_data_cocha1$scientificName), FUN = function(x) {\n  detectionHistory(\n    recordTable         = Full_data_cocha1, # abla de registros\n    camOp                = cocha1_camop, # Matriz de operación de cámaras\n    stationCol           = \"camid\",\n    speciesCol           = \"scientificName\",\n    recordDateTimeCol    = \"eventDateTime\",\n    recordDateTimeFormat  = \"%Y-%m-%d %H:%M:%S\",\n    species              = x,     # la función reemplaza x por cada una de las especies\n    occasionLength       = 8, # Colapso de las historias a 10 ías\n    day1                 = \"station\", # \"survey\" a specific date, \"station\", #inicie en la fecha de cada survey\n    datesAsOccasionNames = FALSE,\n    includeEffort        = TRUE,\n    scaleEffort          = FALSE,\n    #unmarkedMultFrameInput=TRUE\n    timeZone             = \"America/Bogota\" \n    )\n  }\n)\n\n# names\nnames(cocha1_DetHist_list) &lt;- unique(Full_data_cocha1$scientificName)\n# Finalmente creamos una lista nueva donde estén solo las historias de detección\ncocha1_ylist &lt;- lapply(cocha1_DetHist_list, FUN = function(x) x$detection_history)\n# otra lista con effort scaled\ncocha1_efort &lt;- lapply(cocha1_DetHist_list, FUN = function(x) x$effort)\n\n# number of observetions per sp, collapsed to 7 days\n# lapply(ylist, sum, na.rm = TRUE)\n\n\n# leopardus tigrinus 9\n# canis 1\n\n############################\n#### Cocha 2\n############################\n\n\n# fix dates\n\nFull_data_cocha2$start_date &lt;- as.Date(Full_data_cocha2$\"camera_trap_start_date\", \"%Y-%m-%d\")\nFull_data_cocha2$end_date &lt;- as.Date(Full_data_cocha2$\"camera_trap_end_date\", \"%Y-%m-%d\")\n\nFull_data_cocha2$eventDateTime &lt;- ymd_hms(paste(Full_data_cocha2$\"Photo Date\", Full_data_cocha2$\"Photo time\", sep=\" \"))\n\n# remove NA in datetime\n\n# Full_data_cocha1$eventDateTime &lt;- ymd_hms(paste(Full_data_cocha1$\"Photo_Date\", Full_data_cocha1$\"Photo time\", sep=\" \"))\n# rename camera id\nFull_data_cocha2$camid &lt;- Full_data_cocha2$`Camera Trap Name`\n\n\n\n# filter 2021 and make uniques\ncocha2_CToperation  &lt;- Full_data_cocha2 |&gt; dplyr::group_by(camid) |&gt; #(array_locID) |&gt; \n                           mutate(minStart=start_date, maxEnd=end_date) |&gt; distinct(Longitude, Latitude, minStart, maxEnd) |&gt; dplyr::ungroup()\n# remove one duplicated\n# View(CToperation)\n# CToperation &lt;- CToperation[-15,]\n\n\n# Generamos la matríz de operación de las cámaras\n\ncocha2_camop &lt;- cameraOperation(CTtable= cocha2_CToperation, # Tabla de operación\n                         stationCol= \"camid\", # Columna que define la estación\n                         setupCol= \"minStart\", #Columna fecha de colocación\n                         retrievalCol= \"maxEnd\", #Columna fecha de retiro\n                         #hasProblems= T, # Hubo fallos de cámaras\n                         dateFormat= \"%Y-%m-%d\")#, #, # Formato de las fechas\n                         #cameraCol=\"Camera_Id\")\n                         # sessionCol= \"Year\")\n\n\n\n# Generar las historias de detección ---------------------------------------\n## remove problem species\n\nFull_data_cocha2$scientificName &lt;- Full_data_cocha2$`Genus Species`\n\n#### remove setups\ncocha2_ind &lt;- which(is.na((Full_data_cocha2$scientificName)))\nFull_data_cocha2 &lt;- Full_data_cocha2[-cocha2_ind,]\n\n# ind &lt;- which(Ecu_full$scientificName==\"Set up\")\n# Ecu_full &lt;- Ecu_full[-ind,]\n\n############### cocha2\n\ncocha2_DetHist_list &lt;- lapply(unique(Full_data_cocha2$scientificName), FUN = function(x) {\n  detectionHistory(\n    recordTable         = Full_data_cocha2, # abla de registros\n    camOp                = cocha2_camop, # Matriz de operación de cámaras\n    stationCol           = \"camid\",\n    speciesCol           = \"scientificName\",\n    recordDateTimeCol    = \"eventDateTime\",\n    recordDateTimeFormat  = \"%Y-%m-%d %H:%M:%S\",\n    species              = x,     # la función reemplaza x por cada una de las especies\n    occasionLength       = 13, # Colapso de las historias a 10 ías\n    day1                 = \"station\", # \"survey\" a specific date, \"station\", #inicie en la fecha de cada survey\n    datesAsOccasionNames = FALSE,\n    includeEffort        = TRUE,\n    scaleEffort          = FALSE,\n    #unmarkedMultFrameInput=TRUE\n    timeZone             = \"America/Bogota\" \n    )\n  }\n)\n\n# names\nnames(cocha2_DetHist_list) &lt;- unique(Full_data_cocha2$scientificName)\n# Finalmente creamos una lista nueva donde estén solo las historias de detección\ncocha2_ylist &lt;- lapply(cocha2_DetHist_list, FUN = function(x) x$detection_history)\n# otra lista con effort scaled\ncocha2_efort &lt;- lapply(cocha2_DetHist_list, FUN = function(x) x$effort)\n\n# number of observetions per sp, collapsed to 7 days\n# lapply(ylist, sum, na.rm = TRUE)\n\n\n# leopardus tigrinus 29\n# canis NA\n\n\n# Pitalito\n# perro 41\n# tigrinus 5"
  },
  {
    "objectID": "index.html#data-assembly",
    "href": "index.html#data-assembly",
    "title": "cargar paquetes",
    "section": "Data assembly",
    "text": "Data assembly\n\ncodigo R\n#### Cocha 2\ntigrinus_cocha2 &lt;- cocha2_ylist[[29]] |&gt; as.data.frame()\neffort_cocha2 &lt;- cocha2_efort[[29]] |&gt;  as.data.frame() |&gt; \n  mutate(across(everything(), ~replace_na(., 0))) # replace NA to 0 \n\n# perro no hay en cocha2\nmy_vector &lt;- cocha2_ylist[[29]]\nperros_cocha2 &lt;- ifelse(my_vector == 1, 0, my_vector)  |&gt; as.data.frame() # convert 1 to 0\n\n#### Cocha 1\ntigrinus_cocha1 &lt;- cocha1_ylist[[9]] |&gt; as.data.frame()\neffort_cocha1 &lt;- cocha1_efort[[9]] |&gt; as.data.frame() |&gt; \n  mutate(across(everything(), ~replace_na(., 0))) # replace NA to 0 \n# si hay perro en cocha2\n# my_vector &lt;- tigrinus_cocha2\nperros_cocha1 &lt;- cocha1_ylist[[1]] |&gt; as.data.frame()# ifelse(my_vector == 1, 0, my_vector) # convert 1 to 0\n\n#### LaFe\ntigrinus_lafe &lt;- lafe_ylist[[3]] |&gt; as.data.frame()\neffort_lafe &lt;- lafe_efort[[3]] |&gt; as.data.frame()|&gt; \n  mutate(across(everything(), ~replace_na(., 0))) # replace NA to 0 \n# my_vector &lt;- tigrinus_cocha2\nperros_lafe &lt;- lafe_ylist[[2]] |&gt; as.data.frame() # ifelse(my_vector == 1, 0, my_vector) # convert 1 to 0\n\n# perro 2\n# tigrinus 3\n\n\n#### Rio Grande\ntigrinus_riogrande &lt;- riogrande_ylist[[11]] |&gt; as.data.frame()\neffort_riogrande &lt;- riogrande_efort[[11]] |&gt; as.data.frame()|&gt; \n  mutate(across(everything(), ~replace_na(., 0))) # replace NA to 0 \n# my_vector &lt;- tigrinus_cocha2\nperros_riogrande &lt;- riogrande_ylist[[1]] |&gt; as.data.frame() # ifelse(my_vector == 1, 0, my_vector) # convert 1 to 0\n\n# perro 1\n# tigrinus 11\n\n\n#### Ituango\ntigrinus_ituango &lt;- ituango_ylist[[26]] |&gt; as.data.frame()\neffort_ituango &lt;- ituango_efort[[26]] |&gt; as.data.frame()|&gt; \n  mutate(across(everything(), ~replace_na(., 0))) # replace NA to 0 \n# my_vector &lt;- tigrinus_cocha2\nperros_ituango &lt;- ituango_ylist[[5]] |&gt; as.data.frame() # ifelse(my_vector == 1, 0, my_vector) # convert 1 to 0\n\n# perro 5\n# tigrinus 26\n\n\n#### Pitalito\n\ntigrinus_pitalito &lt;- pitalito_ylist[[5]] |&gt; as.data.frame()\neffort_pitalito &lt;- pitalito_efort[[5]] |&gt; as.data.frame()|&gt; \n  mutate(across(everything(), ~replace_na(., 0))) # replace NA to 0 \n# my_vector &lt;- tigrinus_cocha2\nperros_pitalito &lt;- pitalito_ylist[[41]] |&gt; as.data.frame() # ifelse(my_vector == 1, 0, my_vector) # convert 1 to 0\n\n# perro 41\n# tigrinus 5\n\n######### Ucumari\n\ntigrinus_ucumari &lt;- ucumari_ylist[[7]] |&gt; as.data.frame()\neffort_ucumari &lt;- ucumari_efort[[7]] |&gt; as.data.frame()|&gt;\n  mutate(across(everything(), ~replace_na(., 0))) # replace NA to 0 \n# my_vector &lt;- tigrinus_cocha2\nperros_ucumari &lt;- ucumari_ylist[[18]] |&gt; as.data.frame() # ifelse(my_vector == 1, 0, my_vector) # convert 1 to 0\n\n# leopardus tigrinus 7\n# canis 18\n\n\n# fix tigrinus_pitalito to complete 11 ocasiones\n# tigrinus_pitalito$o11 &lt;- NA\n# perros_pitalito$o11 &lt;- NA\n# effort_pitalito$o11 &lt;- NA\n \n# fix tigrinus_lafe to complete 11 ocasiones\n# tigrinus_lafe$o11 &lt;- NA\n# perros_lafe$o11 &lt;- NA\n# effort_lafe$o11 &lt;- NA\n\nDL_tigrinus &lt;- rbind(tigrinus_ucumari,\n                     tigrinus_pitalito,\n                     tigrinus_cocha1,\n                     tigrinus_lafe,\n                     tigrinus_riogrande,\n                     tigrinus_ituango,\n                     tigrinus_cocha2)\n                     # tigrinus_cocha2\n                     #)\n\nDL_perros &lt;- rbind(perros_ucumari,\n                   perros_pitalito,\n                   perros_cocha1,\n                   perros_lafe,\n                   perros_riogrande,\n                   perros_ituango,\n                   perros_cocha2)\n                   # perros_cocha2)\n\nDL_effort &lt;- rbind(effort_ucumari,\n                effort_pitalito,\n                effort_cocha1,\n                effort_lafe,\n                effort_riogrande,\n                effort_ituango,\n                perros_cocha2)#,\n                #effort_cocha2)\n\n# add colname to later extract  covs\nDL_tigrinus$camera_trap &lt;- row.names(DL_tigrinus)\nDL_perros$camera_trap &lt;- row.names(DL_perros)\nDL_effort$camera_trap &lt;- row.names(DL_effort)\n\n# Letf join con puntos\nDL_tigrinus_p &lt;- left_join(DL_tigrinus, puntos)\nDL_perros_p &lt;- left_join(DL_perros, puntos)\n# DL_tigrinus_p &lt;- left_join(DL_tigrinus, puntos)\n\n########## add spatial covs\n\n# make sf and add projection\npuntos_tigrinus_sf &lt;- DL_tigrinus_p |&gt; st_as_sf(coords = \n                              c(\"Longitude\", \"Latitude\"), \n           crs = \"EPSG:4326\")\n\n# Extract coordinates and drop geometry\n# coordinates &lt;- st_coordinates(puntos_sf)\n# data_no_geometry &lt;- st_drop_geometry(sf_data)\n\n\n# get elevation points... slow!\nsite_covs_ucu &lt;- get_elev_point(puntos_tigrinus_sf[1:61,], \n                                src = \"aws\", z = 12)\nsite_covs_pit &lt;- get_elev_point(puntos_tigrinus_sf[62:122,], \n                                src = \"aws\", z = 12)\nsite_covs_coc1 &lt;- get_elev_point(puntos_tigrinus_sf[123:165,], \n                                src = \"aws\", z = 12)\n# site_covs_coc2 &lt;- get_elev_point(puntos_tigrinus_sf[166:218,], \n#                                 src = \"aws\", z = 12)\nsite_covs_lafe &lt;- get_elev_point(puntos_tigrinus_sf[166:192,], \n                                src = \"aws\", z = 12)\nsite_covs_riogrande &lt;- get_elev_point(puntos_tigrinus_sf[193:224,], \n                                src = \"aws\", z = 12)\nsite_covs_ituango &lt;- get_elev_point(puntos_tigrinus_sf[225:278,], \n                                src = \"aws\", z = 12)\nsite_covs_coc2 &lt;- get_elev_point(puntos_tigrinus_sf[279:331,], \n                                src = \"aws\", z = 12)\n\n# combine points in one sf object\nsite_covs &lt;- rbind(site_covs_ucu, \n                   site_covs_pit, \n                   site_covs_coc1,\n                   site_covs_lafe,\n                   site_covs_riogrande,\n                   site_covs_ituango,\n                   site_covs_coc2)#, \n#                   site_covs_coc2)\n                   #z =1-14\n# bb &lt;-  st_as_sfc(st_bbox(elevation_17)) # make bounding box \n\n\n\n\n############## make distance map using SF\n# Convert points to sp spatialpointdatafram\n# casas_points &lt;- as(casas_sf, \"Spatial\")\n# Projection\n\ncasas_points_utm &lt;- st_transform(casas_sf, CRS('+init=epsg:21818'))\n# convert sf to ppp\n\nnc_spatvect &lt;- vect(casas_points_utm)\nc_spatvect  &lt;- vect(casas_points_utm)\ncasa_dist_rast &lt;- distance(rast(nc_spatvect, resolution = 100), c_spatvect) #|&gt; mask(nc_spatvect) # &lt; resolution + detail"
  },
  {
    "objectID": "index.html#package-citation",
    "href": "index.html#package-citation",
    "title": "cargar paquetes",
    "section": "Package Citation",
    "text": "Package Citation\n\ncodigo R\npkgs &lt;- cite_packages(output = \"paragraph\", pkgs=\"Session\", out.dir = \".\")\n# knitr::kable(pkgs)\npkgs\n\nWe used R version 4.4.2 (R Core Team 2024) and the following R packages: camtrapR v. 2.3.0 (Niedballa et al. 2016), DT v. 0.33 (Xie, Cheng, and Tan 2024), elevatr v. 0.99.0 (Hollister et al. 2023), geodata v. 0.6.2 (Hijmans et al. 2024), knitr v. 1.49 (Xie 2014, 2015, 2024), mapview v. 2.11.2 (Appelhans et al. 2023), nlme v. 3.1.166 (J. C. Pinheiro and Bates 2000; J. Pinheiro, Bates, and R Core Team 2024), raster v. 3.6.30 (Hijmans 2024), rpart v. 4.1.23 (Therneau and Atkinson 2023), sf v. 1.0.19 (E. Pebesma 2018; E. Pebesma and Bivand 2023), sp v. 2.1.4 (E. J. Pebesma and Bivand 2005; Bivand, Pebesma, and Gomez-Rubio 2013), spatstat v. 3.3.3 (Baddeley and Turner 2005a; Baddeley et al. 2013a; Baddeley, Rubak, and Turner 2015a), spatstat.data v. 3.1.6 (Baddeley and Turner 2005b; Baddeley et al. 2013b; Baddeley, Rubak, and Turner 2015b), spatstat.explore v. 3.4.3 (Baddeley and Turner 2005c; Baddeley et al. 2013c; Baddeley, Rubak, and Turner 2015c), spatstat.geom v. 3.4.1 (Baddeley and Turner 2005d; Baddeley et al. 2013d; Baddeley, Rubak, and Turner 2015d), spatstat.linnet v. 3.2.6 (Baddeley and Turner 2005e; Baddeley et al. 2013e; Baddeley, Rubak, and Turner 2015e), spatstat.model v. 3.3.6 (Baddeley and Turner 2005f; Baddeley et al. 2013f; Baddeley, Rubak, and Turner 2015f), spatstat.random v. 3.4.1 (Baddeley and Turner 2005g; Baddeley et al. 2013g; Baddeley, Rubak, and Turner 2015g), spatstat.univar v. 3.1.3 (Baddeley and Turner 2005h; Baddeley et al. 2013h; Baddeley, Rubak, and Turner 2015h), terra v. 1.8.21 (Hijmans 2025), tidyverse v. 2.0.0 (Wickham et al. 2019), tmap v. 4.0 (Tennekes 2018), unmarked v. 1.4.3 (Fiske and Chandler 2011; Kellner et al. 2023)."
  },
  {
    "objectID": "index.html#sesion-info",
    "href": "index.html#sesion-info",
    "title": "cargar paquetes",
    "section": "Sesion info",
    "text": "Sesion info\n\n\n\n\n\n\nNote\n\n\n\n\n\n\ncodigo R\nprint(sessionInfo(), locale = FALSE)\n\nR version 4.4.2 (2024-10-31 ucrt) Platform: x86_64-w64-mingw32/x64 Running under: Windows 10 x64 (build 19045)\nMatrix products: internal\nattached base packages: [1] stats graphics grDevices utils datasets methods base\nother attached packages: [1] unmarked_1.4.3 lubridate_1.9.4 forcats_1.0.0\n[4] stringr_1.5.1 dplyr_1.1.4 purrr_1.0.2\n[7] tidyr_1.3.1 tibble_3.2.1 ggplot2_3.5.2\n[10] tidyverse_2.0.0 grateful_0.2.10 tmap_4.0\n[13] elevatr_0.99.0 camtrapR_2.3.0 DT_0.33\n[16] spatstat_3.3-3 spatstat.linnet_3.2-6 spatstat.model_3.3-6\n[19] rpart_4.1.23 spatstat.explore_3.4-3 nlme_3.1-166\n[22] spatstat.random_3.4-1 spatstat.geom_3.4-1 spatstat.univar_3.1-3 [25] spatstat.data_3.1-6 raster_3.6-30 sp_2.1-4\n[28] geodata_0.6-2 terra_1.8-21 sf_1.0-19\n[31] readr_2.1.5 readxl_1.4.3 mapview_2.11.2\n[34] knitr_1.49\nloaded via a namespace (and not attached): [1] RColorBrewer_1.1-3 rstudioapi_0.17.1 jsonlite_1.8.9\n[4] wk_0.9.4 magrittr_2.0.3 spatstat.utils_3.1-4\n[7] farver_2.1.2 nloptr_2.1.1 rmarkdown_2.29\n[10] vctrs_0.6.5 minqa_1.2.8 base64enc_0.1-3\n[13] RcppNumerical_0.6-0 progress_1.2.3 htmltools_0.5.8.1\n[16] leafsync_0.1.0 curl_6.0.0 cellranger_1.1.0\n[19] s2_1.1.7 slippymath_0.3.1 KernSmooth_2.23-24\n[22] htmlwidgets_1.6.4 stars_0.6-8 lifecycle_1.0.4\n[25] pkgconfig_2.0.3 cols4all_0.8 Matrix_1.7-1\n[28] R6_2.6.1 fastmap_1.2.0 digest_0.6.37\n[31] colorspace_2.1-1 tensor_1.5 leafem_0.2.3\n[34] crosstalk_1.2.1 labeling_0.4.3 lwgeom_0.2-14\n[37] progressr_0.15.0 spacesXYZ_1.3-0 spatstat.sparse_3.1-0\n[40] timechange_0.3.0 httr_1.4.7 polyclip_1.10-7\n[43] abind_1.4-8 mgcv_1.9-1 compiler_4.4.2\n[46] microbenchmark_1.5.0 proxy_0.4-27 bit64_4.5.2\n[49] withr_3.0.2 DBI_1.2.3 maptiles_0.8.0\n[52] MASS_7.3-61 tmaptools_3.2 leaflet_2.2.2\n[55] classInt_0.4-10 tools_4.4.2 units_0.8-5\n[58] leaflegend_1.2.1 goftest_1.2-3 glue_1.8.0\n[61] satellite_1.0.5 grid_4.4.2 generics_0.1.3\n[64] gtable_0.3.6 leaflet.providers_2.0.0 tzdb_0.4.0\n[67] class_7.3-22 data.table_1.16.4 hms_1.1.3\n[70] pillar_1.10.1 vroom_1.6.5 splines_4.4.2\n[73] lattice_0.22-6 bit_4.5.0.1 deldir_2.0-4\n[76] tidyselect_1.2.1 stats4_4.4.2 xfun_0.49\n[79] stringi_1.8.4 boot_1.3-31 yaml_2.3.10\n[82] evaluate_1.0.1 codetools_0.2-20 cli_3.6.3\n[85] RcppParallel_5.1.9 munsell_0.5.1 secr_5.1.0\n[88] dichromat_2.0-0.1 Rcpp_1.0.13-1 png_0.1-8\n[91] XML_3.99-0.17 parallel_4.4.2 prettyunits_1.2.0\n[94] lme4_1.1-35.5 viridisLite_0.4.2 mvtnorm_1.3-2\n[97] scales_1.3.0 e1071_1.7-16 crayon_1.5.3\n[100] rlang_1.1.4"
  },
  {
    "objectID": "index.html#to-include-forest-gfw-cover-y-huella-humana",
    "href": "index.html#to-include-forest-gfw-cover-y-huella-humana",
    "title": "cargar paquetes",
    "section": "to include forest (GFW) cover y huella humana",
    "text": "to include forest (GFW) cover y huella humana\n\n\ncodigo R\n#casas &lt;- read_csv(\"C:/CodigoR/tigrinus2/data/casas.csv\")\n# casas_sf &lt;- st_as_sf(casas, coords = c(\"lon\", \"lat\"), crs = \"EPSG:4326\")\ncasas_sf &lt;- st_read(\"C:/CodigoR/tigrinus2/data/casas.shp\")\n\nReading layer casas' from data sourceC:.shp’ using driver `ESRI Shapefile’ Simple feature collection with 545 features and 3 fields Geometry type: POINT Dimension: XY Bounding box: xmin: -77.17977 ymin: -0.98924 xmax: -75.32256 ymax: 7.17079 Geodetic CRS: WGS 84\n\ncodigo R\n############# start spatial part\n#### make sf object\nucumari &lt;- Full_data_ucu |&gt; \n  select(\"Latitude\",\n         \"Longitude\",\n          \"camera_trap\") |&gt;\n  dplyr::distinct( ) |&gt; \n  mutate(region=\"Ucumari\")\n  \n\npitalito &lt;- Full_data_pitalito |&gt; \n    select(\"Latitude\",\n         \"Longitude\",\n          \"camera_trap\") |&gt;\n  dplyr::distinct( ) |&gt; \n  mutate(region=\"Pitalito\")\n\ncocha1 &lt;- Full_data_cocha1 |&gt; \n    select(\"Latitude\",\n         \"Longitude\",\n          \"camera_trap\") |&gt;\n  dplyr::distinct( ) |&gt; \n  mutate(region=\"Cocha1\")\n\ncocha2 &lt;- Full_data_cocha2 |&gt; \n    select(\"Latitude\",\n         \"Longitude\",\n          \"camera_trap\") |&gt;\n  dplyr::distinct( ) |&gt; \n  mutate(region=\"Cocha2\")\n\nlafe &lt;- lafe_data  |&gt; \n    select(\"Latitude\",\n         \"Longitude\",\n          \"camera_trap\") |&gt;\n  dplyr::distinct( ) |&gt; \n  mutate(region=\"LaFe\")\n\nriogrande &lt;- riogrande_data  |&gt; \n    select(\"Latitude\",\n         \"Longitude\",\n          \"camera_trap\") |&gt;\n  dplyr::distinct( ) |&gt; \n  mutate(region=\"RioGrande\")\n\nituango &lt;- ituango_data  |&gt; \n    select(\"Latitude\",\n         \"Longitude\",\n          \"camera_trap\") |&gt;\n  dplyr::distinct( ) |&gt; \n  mutate(region=\"Ituango\")\n\n# join\npuntos &lt;- rbind(ucumari,\n                pitalito, \n                cocha1, \n                lafe,\n                riogrande,\n                ituango,\n                cocha2)\n\n\n\n################\n# plot map\n################\n# \n# pal = mapviewPalette(\"mapviewTopoColors\") #color palete\n# \n# mapview(elev_ucu_ras) + \n#   mapview(casa_dist_rast, col.regions = pal(100), at = seq(600, 240000, 100), legend = TRUE) +\n#   mapview(puntos_sf[\"camera_trap\"]) \n\n############### end spatial part\n\n\n\ncrerar historias detección\n\ncodigo R\n# make species names\nFull_data_ucu$binomial &lt;- str_c (Full_data_ucu$Genus, \"_\", Full_data_ucu$Species)\n\nFull_data_pitalito$binomial &lt;- Full_data_pitalito$`Genus Species`\n\n\n# #funcion para crear todas las tablas de datos\n# all_data_ucu &lt;-  f.matrix.creator2 (Full_data_ucu)\n# \n# # names(all_data) # ver lass especies y en que lista esta cada una\n# # kable(names(all_data)) # html table\n# # Tigrinus es lista 8\n# \n# datatable(\n# data = as.data.frame(names(all_data_ucu)),\n# caption = \"Especies Ucumari\",\n# filter = \"top\"\n# )\n\n# fix date format\n# Ucumari\n\nFull_data_ucu$start_date &lt;- as.Date(Full_data_ucu$\"camera_trap_start_date\", \"%Y-%m-%d\")\nFull_data_ucu$end_date &lt;- as.Date(Full_data_ucu$\"camera_trap_end_date\", \"%Y-%m-%d\")\nFull_data_ucu$eventDate &lt;- as.Date(Full_data_ucu$\"Photo_Date\", \"%Y-%m-%d\")\nFull_data_ucu$eventDateTime &lt;- ymd_hms(paste(Full_data_ucu$\"Photo_Date\", Full_data_ucu$\"Photo time\", sep=\" \"))\n# rename camera id\nFull_data_ucu$camid &lt;- Full_data_ucu$`camera_trap`\n\n# Pitalito\nFull_data_pitalito$start_date &lt;- as.Date(Full_data_pitalito$\"camera_trap_start_date\", \"%Y-%m-%d\")\nFull_data_pitalito$end_date &lt;- as.Date(Full_data_pitalito$\"camera_trap_end_date\", \"%Y-%m-%d\")\n# Full_data_pitalito$eventDate &lt;- as.Date(Full_data_pitalito$, \"%Y-%m-%d\")\nFull_data_pitalito$eventDateTime &lt;- ymd_hms(Full_data_pitalito$`Date_Time Captured`)\n# rename camera id\nFull_data_pitalito$camid &lt;- Full_data_pitalito$camera_trap\n\n# La Fe\n\nlafe_data$start_date &lt;- as.Date(lafe_data$\"camera_trap_start_date\", \"%Y-%m-%d\")\nlafe_data$end_date &lt;- as.Date(lafe_data$\"camera_trap_end_date\", \"%Y-%m-%d\")\nlafe_data$eventDate &lt;- as.Date(lafe_data$Photo_Date, \"%Y-%m-%d\")\n\nlafe_data$eventDateTime &lt;- ymd_hms(paste(lafe_data$\"Photo_Date\", lafe_data$\"Photo time\", sep=\" \"))# rename camera id\nlafe_data$camid &lt;- lafe_data$camera_trap\n\n\n\n# Rio Grande\n\nriogrande_data$start_date &lt;- as.Date(riogrande_data$\"camera_trap_start_date\", \"%Y-%m-%d\")\nriogrande_data$end_date &lt;- as.Date(riogrande_data$\"camera_trap_end_date\", \"%Y-%m-%d\")\nriogrande_data$eventDate &lt;- as.Date(riogrande_data$Photo_Date, \"%Y-%m-%d\")\n\n\nriogrande_data$eventDateTime &lt;- lubridate::ymd_hm(paste(\n  as.Date(riogrande_data$\"Photo_Date\", \"%Y-%m-%d\"), \n riogrande_data$\"Photo time\", \n  sep=\" \"),\n  tz = \"America/Bogota\")\n\n# rename camera id\nriogrande_data$camid &lt;- riogrande_data$camera_trap\n\n\n# Ituango add start end\nituango_data$start_date &lt;- as.Date(\"2015-03-01\", \"%Y-%m-%d\")\nituango_data$end_date &lt;- as.Date(\"2015-06-30\", \"%Y-%m-%d\")\nituango_data$eventDate &lt;- as.Date(\n                        paste(ituango_data$Year, \n                              ituango_data$MES,\n                              ituango_data$DIA,\n                              sep=\"-\"\n                              ),\"%Y-%m-%d\")\n\n\nituango_data$eventDateTime &lt;- lubridate::ymd_hm(paste(\n  as.character(ituango_data$eventDate), \n ituango_data$\"HORA\", \n  sep=\" \"),\n  tz = \"America/Bogota\")\n\n# rename camera id\nituango_data$camid &lt;- ituango_data$camera_trap\n\n\n# filter 2021 and make uniques\nucu_CToperation  &lt;- Full_data_ucu |&gt; dplyr::group_by(camid) |&gt; #(array_locID) |&gt; \n                           mutate(minStart=start_date, maxEnd=end_date) |&gt; distinct(Longitude, Latitude, minStart, maxEnd) |&gt; dplyr::ungroup()\n# remove one duplicated\n# View(CToperation)\n# CToperation &lt;- CToperation[-15,]\n\n\npitalito_CToperation  &lt;- Full_data_pitalito |&gt; dplyr::group_by(camid) |&gt; #(array_locID) |&gt; \n                           mutate(minStart=start_date, maxEnd=end_date) |&gt; distinct(Longitude, Latitude, minStart, maxEnd) |&gt; dplyr::ungroup()\n\n\n\nlafe_CToperation  &lt;- lafe_data |&gt; dplyr::group_by(camid) |&gt; #(array_locID) |&gt; \n                           mutate(minStart=start_date, maxEnd=end_date) |&gt; distinct(Longitude, Latitude, minStart, maxEnd) |&gt; dplyr::ungroup()\n\n\n### selecting 2021\nriogrande_CToperation  &lt;- riogrande_data |&gt; \n    dplyr::group_by(camid) |&gt; #(array_locID) |&gt; \n                           mutate(minStart=start_date, maxEnd=end_date) |&gt; distinct(Longitude, Latitude, minStart, maxEnd) |&gt; dplyr::ungroup() \n\n\nituango_CToperation  &lt;- ituango_data |&gt; \n    dplyr::group_by(camid) |&gt; #(array_locID) |&gt; \n                           mutate(minStart=start_date, maxEnd=end_date) |&gt; distinct(Longitude, Latitude, minStart, maxEnd) |&gt; dplyr::ungroup() \n\n\n\n# remove dos problematic in lafe\n# lafe_CToperation &lt;- lafe_CToperation[-c(28,29),]\n\n# Generamos la matríz de operación de las cámaras\n\nucu_camop &lt;- cameraOperation(CTtable= ucu_CToperation, # Tabla de operación\n                         stationCol= \"camid\", # Columna que define la estación\n                         setupCol= \"minStart\", #Columna fecha de colocación\n                         retrievalCol= \"maxEnd\", #Columna fecha de retiro\n                         #hasProblems= T, # Hubo fallos de cámaras\n                         dateFormat= \"%Y-%m-%d\")#, #, # Formato de las fechas\n                         #cameraCol=\"Camera_Id\")\n                         # sessionCol= \"Year\")\n\n\npitalito_camop &lt;- cameraOperation(CTtable= pitalito_CToperation, # Tabla de operación\n                         stationCol= \"camid\", # Columna que define la estación\n                         setupCol= \"minStart\", #Columna fecha de colocación\n                         retrievalCol= \"maxEnd\", #Columna fecha de retiro\n                         #hasProblems= T, # Hubo fallos de cámaras\n                         dateFormat= \"%Y-%m-%d\")#, #, # Formato de las fechas\n                         #cameraCol=\"Camera_Id\")\n                         # sessionCol= \"Year\")\n\n\nlafe_camop &lt;- cameraOperation(CTtable= lafe_CToperation, # Tabla de operación\n                         stationCol= \"camid\", # Columna que define la estación\n                         setupCol= \"minStart\", #Columna fecha de colocación\n                         retrievalCol= \"maxEnd\", #Columna fecha de retiro\n                         #hasProblems= T, # Hubo fallos de cámaras\n                         dateFormat= \"%Y-%m-%d\")#, #, # Formato de las fechas\n                         #cameraCol=\"Camera_Id\")\n                         # sessionCol= \"Year\")\n\n\n\n\n\nriogrande_camop &lt;- cameraOperation(CTtable= riogrande_CToperation, # Tabla de operación\n                         stationCol= \"camid\", # Columna que define la estación\n                         setupCol= \"minStart\", #Columna fecha de colocación\n                         retrievalCol= \"maxEnd\", #Columna fecha de retiro\n                         #hasProblems= T, # Hubo fallos de cámaras\n                         dateFormat= \"%Y-%m-%d\")#, #, # Formato de las fechas\n                         #cameraCol=\"Camera_Id\")\n                         # sessionCol= \"Year\")\n\n\nituango_camop &lt;- cameraOperation(CTtable= ituango_CToperation, # Tabla de operación\n                         stationCol= \"camid\", # Columna que define la estación\n                         setupCol= \"minStart\", #Columna fecha de colocación\n                         retrievalCol= \"maxEnd\", #Columna fecha de retiro\n                         #hasProblems= T, # Hubo fallos de cámaras\n                         dateFormat= \"%Y-%m-%d\")#, #, # Formato de las fechas\n                         #cameraCol=\"Camera_Id\")\n                         # sessionCol= \"Year\")\n\n\n# Generar las historias de detección ---------------------------------------\n## remove problem species\n\nFull_data_ucu$scientificName &lt;- paste(Full_data_ucu$Genus, \n                                      Full_data_ucu$Species, \n                                      sep=\" \")\n\n#### remove setups\nucu_ind &lt;- which(Full_data_ucu$scientificName==\"NA NA\")\nFull_data_ucu &lt;- Full_data_ucu[-ucu_ind,]\n\n# ind &lt;- which(Ecu_full$scientificName==\"Set up\")\n# Ecu_full &lt;- Ecu_full[-ind,]\n# \n# ind &lt;- which(Ecu_full$scientificName==\"Blank\")\n# Ecu_full &lt;- Ecu_full[-ind,]\n# \n# ind &lt;- which(Ecu_full$scientificName==\"Unidentifiable\")\n# Ecu_full &lt;- Ecu_full[-ind,]\n\nFull_data_pitalito$scientificName &lt;- Full_data_pitalito$`Genus Species`\n\n#### remove setups and NAs\npitalito_ind &lt;- which(is.na(Full_data_pitalito$scientificName))\nFull_data_pitalito &lt;- Full_data_pitalito[-pitalito_ind,]\n\n# fix lafe\nlafe_data$scientificName &lt;- lafe_data$binomial\n# fix riogrande\nriogrande_data$scientificName &lt;- riogrande_data$binomial\n\n#### remove setups and NAs\nriogrande_data_ind &lt;- which(riogrande_data$scientificName==\"NA_NA\")\nriogrande_data &lt;- riogrande_data[-riogrande_data_ind,]\n\n#### remove setups and NAs\nituango_data_ind &lt;- which(ituango_data$scientificName==\"NA\")\nituango_data &lt;- ituango_data[-ituango_data_ind,]\n\n\n\n############### Ucu\n\nucu_DetHist_list &lt;- lapply(unique(Full_data_ucu$scientificName), FUN = function(x) {\n  detectionHistory(\n    recordTable         = Full_data_ucu, # abla de registros\n    camOp                = ucu_camop, # Matriz de operación de cámaras\n    stationCol           = \"camid\",\n    speciesCol           = \"scientificName\",\n    recordDateTimeCol    = \"eventDateTime\",\n    recordDateTimeFormat  = \"%Y-%m-%d %H:%M:%S\",\n    species              = x,     # la función reemplaza x por cada una de las especies\n    occasionLength       = 8, # Colapso de las historias a 10 ías\n    day1                 = \"station\", # \"survey\" a specific date, \"station\", #inicie en la fecha de cada survey\n    datesAsOccasionNames = FALSE,\n    includeEffort        = TRUE,\n    scaleEffort          = FALSE,\n    #unmarkedMultFrameInput=TRUE\n    timeZone             = \"America/Bogota\" \n    )\n  }\n)\n\n# names\nnames(ucu_DetHist_list) &lt;- unique(Full_data_ucu$scientificName)\n# Finalmente creamos una lista nueva donde estén solo las historias de detección\nucumari_ylist &lt;- lapply(ucu_DetHist_list, FUN = function(x) x$detection_history)\n# otra lista con effort scaled\nucumari_efort &lt;- lapply(ucu_DetHist_list, FUN = function(x) x$effort) \n\n# number of observetions per sp, collapsed to 7 days\n# lapply(ylist, sum, na.rm = TRUE)\n\n\n# leopardus tigrinus 7\n# canis 18\n\n############## Pitalito\n\npitalito_DetHist_list &lt;- lapply(unique(Full_data_pitalito$scientificName), FUN = function(x) {\n  detectionHistory(\n    recordTable         = Full_data_pitalito, # tabla de registros\n    camOp                = pitalito_camop, # Matriz de operación de cámaras\n    stationCol           = \"camid\",\n    speciesCol           = \"scientificName\",\n    recordDateTimeCol    = \"eventDateTime\",\n    recordDateTimeFormat  = \"%Y-%m-%d %H:%M:%S\",\n    species              = x,     # la función reemplaza x por cada una de las especies\n    occasionLength       = 6, # Colapso de las historias a 10 días\n    day1                 = \"station\", # \"survey\" a specific date, \"station\", #inicie en la fecha de cada survey\n    datesAsOccasionNames = FALSE,\n    includeEffort        = TRUE,\n    scaleEffort          = FALSE,\n    #unmarkedMultFrameInput=TRUE\n    timeZone             = \"America/Bogota\" \n    )\n  }\n)\n\n# names\nnames(pitalito_DetHist_list) &lt;- unique(Full_data_pitalito$scientificName)\n# Finalmente creamos una lista nueva donde estén solo las historias de detección\npitalito_ylist &lt;- lapply(pitalito_DetHist_list, FUN = function(x) x$detection_history)\n# otra lista con effort scaled\npitalito_efort &lt;- lapply(pitalito_DetHist_list, FUN = function(x) x$effort)\n\n\n# perro 41\n# tigrinus 5\n\n############## La Fe\n\n# lafe_data &lt;- lafe_data |&gt; \n#   filter(camid != \"Palmas_Ladera\") |&gt; \n#   filter(camid != \"Abuel_Ladera\") \n\nlafe_DetHist_list &lt;- lapply(unique(lafe_data$scientificName), FUN = function(x) {\n  detectionHistory(\n    recordTable         = lafe_data, # tabla de registros\n    camOp                = lafe_camop, # Matriz de operación de cámaras\n    stationCol           = \"camid\",\n    speciesCol           = \"scientificName\",\n    recordDateTimeCol    = \"eventDateTime\",\n    recordDateTimeFormat  = \"%Y-%m-%d %H:%M:%S\",\n    species              = x,     # la función reemplaza x por cada una de las especies\n    occasionLength       = 7, # Colapso de las historias a 10 días\n    day1                 = \"station\", # \"survey\" a specific date, \"station\", #inicie en la fecha de cada survey\n    datesAsOccasionNames = FALSE,\n    includeEffort        = TRUE,\n    scaleEffort          = FALSE,\n    #unmarkedMultFrameInput=TRUE\n    timeZone             = \"America/Bogota\" \n    )\n  }\n)\n\n# names\nnames(lafe_DetHist_list) &lt;- unique(lafe_data$scientificName)\n# Finalmente creamos una lista nueva donde estén solo las historias de detección\nlafe_ylist &lt;- lapply(lafe_DetHist_list, FUN = function(x) x$detection_history)\n# otra lista con effort scaled\nlafe_efort &lt;- lapply(lafe_DetHist_list, FUN = function(x) x$effort)\n\n\n# perro 2\n# tigrinus 3\n\n\n############## Rio Grande\n\n# lafe_data &lt;- lafe_data |&gt; \n#   filter(camid != \"Palmas_Ladera\") |&gt; \n#   filter(camid != \"Abuel_Ladera\") \n\nriogrande_DetHist_list &lt;- lapply(unique(riogrande_data$scientificName), FUN = function(x) {\n  detectionHistory(\n    recordTable         = riogrande_data, # tabla de registros\n    camOp                = riogrande_camop, # Matriz de operación de cámaras\n    stationCol           = \"camid\",\n    speciesCol           = \"scientificName\",\n    recordDateTimeCol    = \"eventDateTime\",\n    recordDateTimeFormat  = \"%Y-%m-%d %H:%M:%S\",\n    species              = x,     # la función reemplaza x por cada una de las especies\n    occasionLength       = 8, # Colapso de las historias a 10 días\n    day1                 = \"station\", # \"survey\" a specific date, \"station\", #inicie en la fecha de cada survey\n    datesAsOccasionNames = FALSE,\n    includeEffort        = TRUE,\n    scaleEffort          = FALSE,\n    #unmarkedMultFrameInput=TRUE\n    timeZone             = \"America/Bogota\" \n    )\n  }\n)\n\n# names\nnames(riogrande_DetHist_list) &lt;- unique(riogrande_data$scientificName)\n# Finalmente creamos una lista nueva donde estén solo las historias de detección\nriogrande_ylist &lt;- lapply(riogrande_DetHist_list, FUN = function(x) x$detection_history)\n# otra lista con effort scaled\nriogrande_efort &lt;- lapply(riogrande_DetHist_list, FUN = function(x) x$effort)\n\n\n# perro 2\n# tigrinus 3\n\n############## Ituango\n\n# lafe_data &lt;- lafe_data |&gt; \n#   filter(camid != \"Palmas_Ladera\") |&gt; \n#   filter(camid != \"Abuel_Ladera\") \n\nituango_DetHist_list &lt;- lapply(unique(ituango_data$scientificName), FUN = function(x) {\n  detectionHistory(\n    recordTable         = ituango_data, # tabla de registros\n    camOp                = ituango_camop, # Matriz de operación de cámaras\n    stationCol           = \"camid\",\n    speciesCol           = \"scientificName\",\n    recordDateTimeCol    = \"eventDateTime\",\n    recordDateTimeFormat  = \"%Y-%m-%d %H:%M:%S\",\n    species              = x,     # la función reemplaza x por cada una de las especies\n    occasionLength       = 13, # Colapso de las historias a 10 días\n    day1                 = \"station\", # \"survey\" a specific date, \"station\", #inicie en la fecha de cada survey\n    datesAsOccasionNames = FALSE,\n    includeEffort        = TRUE,\n    scaleEffort          = FALSE,\n    #unmarkedMultFrameInput=TRUE\n    timeZone             = \"America/Bogota\" \n    )\n  }\n)\n\n# names\nnames(ituango_DetHist_list) &lt;- unique(ituango_data$scientificName)\n# Finalmente creamos una lista nueva donde estén solo las historias de detección\nituango_ylist &lt;- lapply(ituango_DetHist_list, FUN = function(x) x$detection_history)\n# otra lista con effort scaled\nituango_efort &lt;- lapply(ituango_DetHist_list, FUN = function(x) x$effort)\n\n\n# perro 5\n# tigrinus 26"
  },
  {
    "objectID": "data/casas_mas_ituango.html",
    "href": "data/casas_mas_ituango.html",
    "title": "Occupación tigrinus",
    "section": "",
    "text": "&lt;!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’&gt;     dataset\n\n\n       GEOGCRS[“WGS 84”,ENSEMBLE[“World Geodetic System 1984 ensemble”,MEMBER[“World Geodetic System 1984 (Transit)”],MEMBER[“World Geodetic System 1984 (G730)”],MEMBER[“World Geodetic System 1984 (G873)”],MEMBER[“World Geodetic System 1984 (G1150)”],MEMBER[“World Geodetic System 1984 (G1674)”],MEMBER[“World Geodetic System 1984 (G1762)”],MEMBER[“World Geodetic System 1984 (G2139)”],ELLIPSOID[“WGS 84”,6378137,298.257223563,LENGTHUNIT[“metre”,1]],ENSEMBLEACCURACY[2.0]],PRIMEM[“Greenwich”,0,ANGLEUNIT[“degree”,0.0174532925199433]],CS[ellipsoidal,2],AXIS[“geodetic latitude (Lat)”,north,ORDER[1],ANGLEUNIT[“degree”,0.0174532925199433]],AXIS[“geodetic longitude (Lon)”,east,ORDER[2],ANGLEUNIT[“degree”,0.0174532925199433]],USAGE[SCOPE[“Horizontal component of 3D system.”],AREA[“World.”],BBOX[-90,-180,90,180]],ID[“EPSG”,4326]] +proj=longlat +datum=WGS84 +no_defs 3452 4326 EPSG:4326 WGS 84 longlat EPSG:7030 true"
  },
  {
    "objectID": "R/Activity.html",
    "href": "R/Activity.html",
    "title": "Activity",
    "section": "",
    "text": "cargar paquetes\n\nlibrary(tidyverse) # maneja datos\nlibrary(mapview) # mapas facil\nlibrary(readxl) # leer datos\nlibrary(lubridate) # fix dates\nlibrary(sf) # make vector maps\nlibrary(camtrapR) # to get activity graph\nlibrary(raster) # to get some geographical data and use extent\nlibrary(tmap) # make nice raster maps\nlibrary(tmaptools) # to use the read_osm function \nlibrary(OpenStreetMap) # get tiles from OSM\nlibrary(GADMTools) # to get deptos\nlibrary(grid) # print options  \n\nsource(\"D:/BoxFiles/Box Sync/CodigoR/tigrinus/R/organizadato.R\")\n\n\n\ncargar datos\n\nHuila_data &lt;-  read_delim(\"D:/BoxFiles/Box Sync/CodigoR/tigrinus/data/huila_merged.csv\", \n delim = \";\", escape_double = FALSE, col_types = cols(camera_trap_start_date = col_character()), trim_ws = TRUE)\n\n\n\nmapa casas\n\n##### read SHP ####\n# casas &lt;- st_read(\"D:/BoxFiles/Box Sync/CodigoR/tigrinus/data/Casas_1-point.shp\")\n# casas &lt;- read_csv(\"D:/BoxFiles/Box Sync/CodigoR/tigrinus/data/casas.csv\")\n# casas_shp &lt;- st_as_sf(casas, coords = c(\"lon\", \"lat\"), crs = \"EPSG:4326\")\n\n# st_write(casas_shp, \"D:/BoxFiles/Box Sync/CodigoR/tigrinus/data/casas.shp\")\n# casas_cocha &lt;- matrix (c(-0.98924, -77.15632,\n#   -0.96788, -77.15383,\n#   -0.97283, -77.16010,\n#    1.01544, -77.17456,\n#    1.01326, -77.17977,\n#    1.02510, -77.17050,\n#    1.02753, -77.16778,\n#    1.03276, -77.16458,\n#    1.03726, -77.16038,\n#    1.04351, -77.16407,\n#    1.05096, -77.15198,\n#    1.05954, -77.14333,\n#    1.06092, -77.13724,\n#    1.06301, -77.12153,\n#    1.05785, -77.11739,\n#    1.01819, -77.12116,\n#    1.01184, -77.09363),\n#    nrow = 17, ncol = 2, byrow = TRUE )\n\n\ncasas_shp &lt;- read_sf(\"D:/BoxFiles/Box Sync/CodigoR/tigrinus/data/casas.shp\")\n\n\n\nCrerar matrices para unmarked\n\n### Fix tables to use the function f.matrix.creator2 \n\nHuila_data$binomial &lt;- Huila_data$\"Genus Species\" #str_c (Huila_data$Genus, \"_\", Huila_data$Species)\n\n# fix Huila_data\n# fix dates \nHuila_data$camera_trap_start_date &lt;- ymd(Huila_data$camera_trap_start_date)\nHuila_data$camera_trap_end_date &lt;- ymd(Huila_data$camera_trap_end_date)\n\n#fix cams\nHuila_data$camera_trap &lt;- Huila_data$\"Depolyment Location ID\"\n# fix photo date\nHuila_data$Photo_Date &lt;- Huila_data$\"Date_Time Captured\" \n\n#### make sf object\ndatos.raw_sf &lt;- st_as_sf(Huila_data, coords = c(\"Longitude Resolution\", \"Latitude Resolution\"), crs = \"EPSG:4326\")\n\ncamaras &lt;-  datos.raw_sf # st_transform (datos.raw_sf, \"+proj=longlat +ellps=GRS80 +no_defs\") \n# camaras_16 &lt;- camaras %&gt;% filter (Year ==\"2016\" ) # & Year &lt;=\"2017\")\n# camaras_17 &lt;- camaras %&gt;% filter (Year ==\"2017\" ) # & Year &lt;=\"2017\")\n\n# Add column to get activity graph using activityDensity from camtrapR\n# Add column to get activity graph using activityDensity from camtrapR\ncamaras$fecha &lt;- as.POSIXlt(datos.raw_sf$\"Date_Time Captured\", format=\"%Y/%m/%d %H:%M:%S\")\n# add species name column to us the function activityDensity\n\n\ncamaras$DateTimeOriginal &lt;- as.character(as.POSIXlt(Huila_data$\"Date_Time Captured\", format=\"%d/%m/%Y %H:%M:%S\")) # as.character(camaras$DateRecord)\n# camaras_17$DateTimeOriginal &lt;- as.character(camaras_17$DateRecord)\ncamaras$Species &lt;- camaras$binomial\n\n\n#funcion para crear todas las tablas de datos\nall_data &lt;-  f.matrix.creator2 (Huila_data)\n(sp.names &lt;- names(all_data)) # ver lass especies y en que lista esta cada una\n# Tigrinus es lista 6\n\n\nActividad del tigrillo y perro\n\nactivityOverlap (recordTable = camaras,\n                 speciesA    = \"Leopardus tigrinus\",\n                 speciesB    = \"Canis lupus familiaris\",\n                 writePNG    = FALSE,\n                 plotR       = TRUE,\n                 addLegend = FALSE,\n                 legendPosition = \"topleft\",\n                 createDir   = FALSE,\n                 pngMaxPix   = 1000,\n                 linecol     = c(\"red\", \"blue\"),\n                 linewidth   = c(1,1),\n                 linetype    = c(1, 2),\n                 olapcol     = \"darkgrey\",\n                 add.rug     = TRUE,\n                 extend      = \"lightgrey\",\n                 ylim        = c(0, 0.25),\n                 main        = paste(\"Activity overlap \", \n                                     \"Leopardus tigrinus (red)\" , \"and\", \n                                     \"domestic dog (blue)\") )\nrect(0, 0, 6, 0.5, col= rgb(0.211,0.211,0.211, alpha=0.2), border = \"transparent\")\nrect(18, 0, 24, 0.5, col= rgb(0.211,0.211,0.211, alpha=0.2), border = \"transparent\")\n\n\n\n# save tigrinus only to hard disk.\n## turn on graphics device \npng(file = \"D:/BoxFiles/Box Sync/CodigoR/tigrinus/fig/tigrinus_activity2.png\", width = 1200, height = 700, res = 150)\npar(mar = c(5, 4, 3, 3) + 0.1)\nactivityDensity (recordTable = camaras,\n                 species     = as.character(sp.names[sp_number=6]))\nrect(0, 0, 6, 0.5, col= rgb(0.211,0.211,0.211, alpha=0.2), border = \"transparent\")\nrect(18, 0, 24, 0.5, col= rgb(0.211,0.211,0.211, alpha=0.2), border = \"transparent\")\n##turn off graphics device\ndev.off( )\n\n\n\nMapa del tigrinus (rojo) y el perro (azul)\n\ntigrinus &lt;- filter(camaras, Species==\"Leopardus tigrinus\")\nby_sp &lt;- camaras %&gt;%  group_by(Species) %&gt;% tally()\nby_sp_tigrinus &lt;- tigrinus %&gt;%  group_by(\"Depolyment Location ID\") %&gt;% tally()\nnames(by_sp_tigrinus) &lt;-  c(\"Predio\", \"Fotos tigrinus\", \"geometry\")\n\ndog &lt;- filter(camaras, Species==\"Canis lupus familiaris\")\nby_sp &lt;- camaras %&gt;%  group_by(Species) %&gt;% tally()\nby_sp_dog &lt;- dog %&gt;%  group_by(\"Depolyment Location ID\") %&gt;% tally()\nnames(by_sp_dog) &lt;-  c(\"Predio\", \"Fotos Dog\", \"geometry\")\n\n\n\ncolombia &lt;-  gadm_sf_loadCountries(\"COL\", level=1, basefile=\"./\")\ncollimit &lt;- gadm_sf_loadCountries(\"COL\", level=0, basefile=\"./\")\n\ndeptos &lt;- gadm_subset(colombia, regions=c(\"Huila\", \"Cauca\"))\n\n# get the extent of cameras\nventana &lt;- bb(camaras, ext=2) # ext=2 increase window by 2\n\nHuila_osm1 &lt;- tmaptools::read_osm(ventana, type=\"stamen-terrain\",  mergeTiles = TRUE)\n\n\n########## figure 1\ndata_box &lt;- ventana # st_as_sfc(st_bbox(cams_loc_QR_sf)) #bounding box\n\n# pal = mapviewPalette(\"mapviewTopoColors\")\n# get fondo de osm\nandes_osm1 &lt;- read_osm(ventana, zoom = NULL, type=\"stamen-terrain\", mergeTiles = TRUE) # type puede ser tambien bing, osm # type puede ser tambien bing, osm\ncolombia &lt;-  gadm_sf_loadCountries(\"COL\", level=1, basefile=\"./\")\ncollimit &lt;- gadm_sf_loadCountries(\"COL\", level=0, basefile=\"./\")\n\ndeptos &lt;- gadm_subset(colombia, regions=c(\"Huila\", \"Cauca\"))\n\n\ndepto_window &lt;- qtm(andes_osm1)  + \n  tm_shape(camaras) + \n  tm_dots(col = \"black\", size = 0.25, \n          shape = 16, title = \"Sampling point\", legend.show = TRUE,\n          legend.is.portrait = TRUE,\n          legend.z = NA) + \n  tm_shape(by_sp_tigrinus) +  tm_symbols (col=\"red\", size = 0.25) + \n  tm_shape(by_sp_dog) +  tm_symbols (col=\"blue\", size = 0.15) + \n  tm_layout(scale = .9) +\n  # legend.position = c(.78,.72), \n  # legend.outside.size = 0.1,\n  # legend.title.size = 1.6,\n  # legend.height = 0.9,\n  # legend.width = 1.5,\n  # legend.text.size = 1.2) + \n  # legend.hist.size = 0.5) + \n  tm_legend(position = c(\"left\", \"bottom\"), frame = TRUE,\n            bg.color=\"white\") + \n  tm_layout(frame=F) + tm_scale_bar() + tm_compass(position = c(.75, .82), color.light = \"grey90\") \n\ndep_map &lt;-  tm_shape(deptos$sf) + tm_polygons() +\n  tm_shape(camaras) + tm_symbols(shape = 0, col = \"red\", size = 0.25)\ncol_map &lt;- tm_shape(collimit$sf) + tm_polygons() + tm_shape(deptos$sf) + tm_polygons()\n\n##### print all\ndepto_window\nprint(dep_map, vp = viewport(0.73, 0.40, width = 0.25, height = 0.25))\nprint(col_map, vp = viewport(0.73, 0.65, width = 0.25, height = 0.25))"
  },
  {
    "objectID": "index.html#map",
    "href": "index.html#map",
    "title": "cargar paquetes",
    "section": "Map",
    "text": "Map\n\nGenaral map\n\ncodigo R\n#\n# general\ntm_shape(puntos_tigrinus_sf, # add bb\n         bbox = tmaptools::bb(puntos_tigrinus_sf, ext = 1.5)) +\n    tm_basemap(c(StreetMap = \"OpenStreetMap\", TopoMap = \"OpenTopoMap\")) +# (\"Esri.WorldImagery\") + # usa basemap\n   tm_symbols(shape = 21, col = \"red\", fill = \"blue\",size =0.4) #+ #punto negro\n\n\n\ncodigo R\n  # tm_facets(by = \"region\", ncol = 3)\n\n\n\nZoom to regions\n\ncodigo R\n### detallado\ntm_shape(puntos_tigrinus_sf) +\n    tm_basemap(c(StreetMap = \"OpenStreetMap\", TopoMap = \"OpenTopoMap\")) +# (\"Esri.WorldImagery\") + # usa basemap\n   tm_symbols(shape = 21, col = \"red\", fill = \"blue\",size =0.4) + #punto negro\n  tm_facets(by = \"region\", ncol = 3)"
  }
]