[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Occupación tigrinus",
    "section": "",
    "text": "codigo R\nlibrary(knitr)\nlibrary(tidyverse) # maneja datos\nlibrary(mapview) # mapas facil\nlibrary(readxl) #leer datos\nlibrary(sf) # vector map\nlibrary(geodata) # replace getData de raster para Terra\nlibrary(raster) # mapas raster\nlibrary(spatstat) # interpola mapa\nlibrary(maptools) # to coerce to ppp. note that 'maptools' will be retired by the end of 2023\n# library(stars)\nlibrary(unmarked) # occu models\nlibrary(DT) # html table\n\n\nsource(\"D:/BoxFiles/Box Sync/CodigoR/tigrinus/R/organizadato.R\")"
  },
  {
    "objectID": "index.html#cargar-datos",
    "href": "index.html#cargar-datos",
    "title": "Occupación tigrinus",
    "section": "cargar datos",
    "text": "cargar datos\n\ncodigo R\nFull_data_ucu <- read_excel(\"D:/BoxFiles/Box Sync/CodigoR/tigrinus/data/Full_data_Ucumari_Huila_Cocha1_Cocha2.xlsx\", \n    sheet = \"ucumari\", col_types = c(\"numeric\", \n        \"text\", \"text\", \"text\", \"text\", \"text\", \n        \"text\", \"text\", \"text\", \"text\", \"text\", \n        \"text\", \"text\", \"text\", \"text\", \"numeric\", \n        \"text\", \"text\", \"text\", \"text\", \"text\", \n        \"text\", \"text\", \"text\", \"text\", \"numeric\", \n        \"numeric\", \"numeric\", \"numeric\", \n        \"text\"))"
  },
  {
    "objectID": "index.html#crerar-matrices-para-unmarked",
    "href": "index.html#crerar-matrices-para-unmarked",
    "title": "Occupación tigrinus",
    "section": "crerar matrices para unmarked",
    "text": "crerar matrices para unmarked\n\n\ncodigo R\ncasas <- read_csv(\"D:/BoxFiles/Box Sync/CodigoR/tigrinus/data/casas.csv\")\ncasas_sf <- st_as_sf(casas, coords = c(\"lon\", \"lat\"), crs = \"EPSG:4326\")\n\n\n\n\n############# start spatial part\n#### make sf object\nucumari_sf <- st_as_sf(Full_data_ucu, coords = c(\"Longitude\", \"Latitude\"), crs = \"EPSG:4326\")\n\n\n# get centroid. 1st bbox, make pol\ncentroid_ucu <- st_centroid(st_as_sfc(st_bbox(ucumari_sf)))\n# get altitude\nelev_ucu_full <- elevation_3s(centroid_ucu[[1]][1], centroid_ucu[[1]][2], \n                         path=\"D:/BoxFiles/Box Sync/CodigoR/tigrinus/raster\")\n\n# elev_ucu_full_ras <- elev_ucu_full %>% raster()\n\n# st_bbox(ucumari_sf) # notice order xmin, xmax, ymin, ymax\next_ucu <- ext(-75.59, -75.47,  4.68,    4.81 )\nelev_ucu <- crop(elev_ucu_full, ext_ucu) \n\n# convert from terra to raster\nelev_ucu_ras <-  elev_ucu %>% raster()\n\n# get uniques\ncams_ucu <-Full_data_ucu %>% dplyr::select(c(\"Longitude\", \"Latitude\", \"camera_trap\")) %>% distinct()\n#### make sf object\ncams_ucu_sf <- st_as_sf(cams_ucu, coords = c(\"Longitude\", \"Latitude\"), crs = \"EPSG:4326\")\n\n# extract values from raster using altitude\ncams_ucu_sf$elev <- extract(elev_ucu_ras, cams_ucu_sf)\n\n############## make distance map\n# Convert points to sp spatialpointdatafram\ncasas_points <- as(casas_sf, \"Spatial\")\n# Projection\n# Be sure to have rgdal first installed.\ncasas_points_utm <- spTransform(casas_points, CRS('+init=epsg:32718'))\n# convert to ppp\ncasas_points_ppp <- as(as(casas_points_utm, \"SpatialPoints\"), \"ppp\")\n# distance\ncasas_distance <- distmap(casas_points_ppp)\n\n####### extract distance \n\ncasas_distance_ras<- raster(casas_distance) # convert raster\ncrs(casas_distance_ras) <- '+init=epsg:32718' # add crs\n\n# project raster\ncasa_distance <- projectRaster(casas_distance_ras, crs = crs(casas_points))\n\n# cams_ucu_sf$dist_casa <- raster::extract(casas_distance_ras, cams_ucu_sf)\ncams_ucu_sf$dist_casa <- raster::extract(casa_distance, cams_ucu_sf) # also works\n\n\n# plot map\nmapview(elev_ucu_ras) + mapview(cams_ucu_sf[\"camera_trap\"]) \n\n\n\n\n\n\n\ncodigo R\n############### end spatial part\n\nFull_data_ucu$binomial <- str_c (Full_data_ucu$Genus, \"_\", Full_data_ucu$Species)\n\n#funcion para crear todas las tablas de datos\nall_data <-  f.matrix.creator2 (Full_data_ucu)\n\n# names(all_data) # ver lass especies y en que lista esta cada una\n# kable(names(all_data)) # html table\n# Tigrinus es lista 8\n\ndatatable(\ndata = as.data.frame(names(all_data)),\ncaption = \"Especies Ucumari\",\nfilter = \"top\"\n)"
  },
  {
    "objectID": "index.html#unmarked",
    "href": "index.html#unmarked",
    "title": "Occupación tigrinus",
    "section": "unmarked",
    "text": "unmarked\n\ncodigo R\n# tabla con solo tiginus\ntigrinus_ucu <- all_data[[8]]\n# cargar paquete\nlibrary(unmarked)\n# crear objeto umf\numf_tigrinus_ucu <- unmarkedFrameOccu(y=tigrinus_ucu)\n# verificar datos en grafica\n# plot(umf_tigrinus_ucu)\n\n# tabla con solo perros\nperros_ucu <- all_data[[75]]\n# crear objeto umf\numf_perros_ucu <- unmarkedFrameOccu(y=perros_ucu)\n# verificar datos en grafica\n# plot(umf_perros_ucu)\n\n# tabla con solo ocelote\nocelote_ucu <- all_data[[16]]\n# crear objeto umf\numf_ocelote_ucu <- unmarkedFrameOccu(y=ocelote_ucu)\n# verificar datos en grafica\n# plot(umf_ocelote_ucu)"
  },
  {
    "objectID": "index.html#modelo-nulo",
    "href": "index.html#modelo-nulo",
    "title": "Occupación tigrinus",
    "section": "Modelo nulo",
    "text": "Modelo nulo\n\n\ncodigo R\n# modelo nulo tigrinus\nfm_tig_ucu <- occu(~1 ~1, umf_tigrinus_ucu)  # fit a model\n\nbackTransform(fm_tig_ucu, type=\"det\") #estimado lineal de deteccion\nbackTransform(fm_tig_ucu, type=\"state\") # estimado linel de ocupacion\n\n# modelo nulo perro\nfm_perros_ucu <- occu(~1 ~1, umf_perros_ucu)  # fit a model\n\nbackTransform(fm_perros_ucu, type=\"det\") #estimado lineal de deteccion\nbackTransform(fm_perros_ucu, type=\"state\") # estimado linel de ocupacion\n\n# modelo nulo ocelote\nfm_ocelote_ucu <- occu(~1 ~1, umf_ocelote_ucu)  # fit a model\n\nbackTransform(fm_ocelote_ucu, type=\"det\") #estimado lineal de deteccion\nbackTransform(fm_ocelote_ucu, type=\"state\") # estimado linel de ocupacion"
  },
  {
    "objectID": "index.html#modelos-de-co-ocurrencia",
    "href": "index.html#modelos-de-co-ocurrencia",
    "title": "Occupación tigrinus",
    "section": "MODELOS DE CO-OCURRENCIA",
    "text": "MODELOS DE CO-OCURRENCIA\n\n\ncodigo R\ndetformulas <- c( \"~1\", \"~1\")#, \"~1\")\n#stateformulas <- c('~elev','~elev', '~elev', \"~1\", \"~1\", \"~1\", \"~0\")# 3 sp\nstateformulas <- c('~elev','~elev', \"~0\")\ny <- list(tigrinus_ucu, perros_ucu)# , ocelote_ucu)\nnames(y) <- c(\"tigrinus\", \"perros\")#, \"ocelote\")\n\n\nobs_covs <-as.data.frame(scale(cams_ucu_sf$dist_casa))\nnames(obs_covs) <- \"dist_casa\"\n\nsite_covs <- data.frame(cams_ucu_sf[,c('elev','dist_casa')])[,1:2]\nsite_covs <-as.data.frame(apply(site_covs,2,scale))\nnames(site_covs) <- c(\"elev\", \"dist_casa\")\n\n\numf <-  unmarkedFrameOccuMulti(y=y, \n                              siteCovs=site_covs,\n                              obsCovs = NULL)\nplot(umf)\n\n\ncodigo R\n#umf\n\n# occFormulas Length should match number/order of columns in fDesign\numf@fDesign\n\n\nfit1 <- occuMulti(detformulas, stateformulas, umf,    \n        method=\"BFGS\", se=TRUE, engine=c(\"C\"), silent=FALSE)\n\nfit1\n\n# update model\n# occFormulas2 <- c('~dist_casa', '~dist_casa', '~dist_casa', \"~1\", \"~1\", \"~1\", \"~0\")\noccFormulas2 <- c('~dist_casa', '~dist_casa', \"~0\")\nfit2 <- update(fit1, stateformulas=occFormulas2)\nfit2\n\n#List of fitted models\nfl <- fitList(fit1, fit2)\ncoef(fl)\n\n###################\n# Model selection #\n###################\n\nmodSel(fl)\n\n#############\n# Model fit #\n#############\n\nbt <- parboot(fit1, nsim=50) # takes time best model\nplot(bt)\n\n\n\nplot predicted marginal occupancy\n\ncodigo R\n#Plot predicted marginal occupancy as a function of disturbance\nr <- range(cams_ucu_sf$elev)\nx1 <- seq(r[1],r[2],length.out=100)\nx_scale <- (x1-mean(cams_ucu_sf$elev))/sd(cams_ucu_sf$elev)\n\nr2 <- range(cams_ucu_sf$dist_casa)\nx2 <- seq(r2[1],r2[2],length.out=100)\nx2_scale <- (x2-mean(cams_ucu_sf$dist_casa))/sd(cams_ucu_sf$dist_casa)\n\nnd <- matrix(NA, 100, 2)\nnd <- data.frame(elev=x_scale, dist_casa= x2_scale)\n\n\n\ntigrinus_pred <- predict(fit1, \"state\", species=\"tigrinus\", newdata=nd)\n\nBootstrapping confidence intervals with 100 samples\n\ncodigo R\ntigrinus_pred$Species <- \"tigrinus\"\n\nperros_pred <- predict(fit1, \"state\", species=\"perros\", newdata=nd)\n\nBootstrapping confidence intervals with 100 samples\n\ncodigo R\nperros_pred$Species <- \"perros\"\n\n# ocelote_pred <- predict(fit2, \"state\", species=\"ocelote\", newdata=nd)\n# ocelote_pred$Species <- \"ocelote\"\n\n\nplot_dat <- rbind(tigrinus_pred, perros_pred)#, ocelote_pred)\n\nggplot(data=plot_dat, aes(x=rep(x1,2), y=Predicted)) + # change to 3 sp and x2 to distance\n  geom_ribbon(aes(ymin=lower, ymax=upper, fill=Species), alpha=0.3) +\n  geom_line(aes(col=Species)) +\n  labs(x=\"Elevation\", y=\"Marginal occupancy\") +\n  theme_bw() +\n  theme(panel.grid.major=element_blank(), panel.grid.minor=element_blank(),\n        axis.text=element_text(size=12), axis.title=element_text(size=14),\n        legend.text=element_text(size=12), legend.title=element_text(size=14))\n\n\n\n\n\n\nplot predicted co-occurrence occupancy\n\ncodigo R\n#Plot predicted marginal occupancy as a function of disturbance\nr <- range(cams_ucu_sf$elev)\nx1 <- seq(r[1],r[2],length.out=100)\nx_scale <- (x1-mean(cams_ucu_sf$elev))/sd(cams_ucu_sf$elev)\n\nr2 <- range(cams_ucu_sf$dist_casa)\nx2 <- seq(r2[1],r2[2],length.out=100)\nx2_scale <- (x2-mean(cams_ucu_sf$dist_casa))/sd(cams_ucu_sf$dist_casa)\n\nnd <- matrix(NA, 100, 2)\nnd <- data.frame(elev=x_scale, dist_casa= x2_scale)\n\n\ntigrinus_perros_pred <- predict(fit1, \"state\", \n                         species=c(\"tigrinus\", \"perros\"), newdata=nd)\n\nBootstrapping confidence intervals with 100 samples\n\ncodigo R\n# tigrinus_pred$Species <- c(\"tigrinus\", \"perros\")\n\n# perros_pred <- predict(fit1, \"state\", species=\"perros\", newdata=nd)\n# perros_pred$Species <- \"perros\"\n\n# ocelote_pred <- predict(fit2, \"state\", species=\"ocelote\", newdata=nd)\n# ocelote_pred$Species <- \"ocelote\"\n\n\nplot_dat <- tigrinus_perros_pred #rbind(tigrinus_pred, perros_pred)#, ocelote_pred)\n\nggplot(data=plot_dat, aes(x=rep(x1), y=Predicted)) + # change to 3 sp and x2 to distance\n  geom_ribbon(aes(ymin=lower, ymax=upper, fill = \"grey50\"), alpha=0.3) +\n  geom_line(aes(y=Predicted), col=\"blue\") +\n  labs(x=\"Elevation\", y=\"co-occurence\") +\n  theme_bw() +\n  theme(panel.grid.major=element_blank(), panel.grid.minor=element_blank(),\n        axis.text=element_text(size=12), axis.title=element_text(size=14),\n        legend.text=element_text(size=12), legend.title=element_text(size=14))\n\n\n\n\n\n\nplot predicted conditional occupancy\n\ncodigo R\n#Plot predicted marginal occupancy as a function of disturbance\nr <- range(cams_ucu_sf$elev)\nx1 <- seq(r[1],r[2],length.out=100)\nx_scale <- (x1-mean(cams_ucu_sf$elev))/sd(cams_ucu_sf$elev)\n\nr2 <- range(cams_ucu_sf$dist_casa)\nx2 <- seq(r2[1],r2[2],length.out=100)\nx2_scale <- (x2-mean(cams_ucu_sf$dist_casa))/sd(cams_ucu_sf$dist_casa)\n\nnd <- matrix(NA, 100, 2)\nnd <- data.frame(elev=x_scale, dist_casa= x2_scale)\n\n##### conditional\n\ntigrinus_perro_no <- predict(fit1, \"state\", \n                         species=\"tigrinus\", \n                         cond='-perros',\n                         newdata=nd)\n\nBootstrapping confidence intervals with 100 samples\n\ncodigo R\ntigrinus_perro_no$Species <- \"perro ausente\"\n\ntigrinus_perro_si <- predict(fit1, \"state\", \n                         species=\"tigrinus\", \n                         cond='perros',\n                         newdata=nd)\n\nBootstrapping confidence intervals with 100 samples\n\ncodigo R\ntigrinus_perro_si$Species <- \"perro presente\"\n\n\n\n\n\n# perros_pred <- predict(fit1, \"state\", species=\"perros\", newdata=nd)\n# perros_pred$Species <- \"perros\"\n\n# ocelote_pred <- predict(fit2, \"state\", species=\"ocelote\", newdata=nd)\n# ocelote_pred$Species <- \"ocelote\"\n\n\nplot_dat <- rbind(tigrinus_perro_si, tigrinus_perro_no)#, ocelote_pred)\n\nggplot(data=plot_dat, aes(x=rep(x1,2), y=Predicted)) + # change to 3 sp and x2 to distance\n  geom_ribbon(aes(ymin=lower, ymax=upper, fill=Species), alpha=0.3) +\n  geom_line(aes(col=Species)) +\n  labs(x=\"Elevation\", y=\"tigrinus conditional occupancy\") +\n  theme_bw() +\n  theme(panel.grid.major=element_blank(), panel.grid.minor=element_blank(),\n        axis.text=element_text(size=12), axis.title=element_text(size=14),\n        legend.text=element_text(size=12), legend.title=element_text(size=14))"
  },
  {
    "objectID": "index.html#crerar-matrices-para-unmarked-1",
    "href": "index.html#crerar-matrices-para-unmarked-1",
    "title": "Occupación tigrinus",
    "section": "crerar matrices para unmarked",
    "text": "crerar matrices para unmarked\n\ncodigo R\n#funcion para crear todas las tablas de datos\nall_data_total <-  f.matrix.creator2 (total)\n# names(all_data_total) # ver lass especies y en que lista esta cada una\n# Tigrinus es lista 7\n\ndatatable(\ndata = as.data.frame(names(all_data_total)),\ncaption = \"Especies Ucumari\",\nfilter = \"top\"\n)\n\n\n\n\n\n\n\ncodigo R\n#code to shrink the matrix to exactly 150 columns: Aprox una semana\nf.shrink.matrix.to150<-function(matrix){\n  nc<-dim(matrix)[2]\n  if(!nc%%150){ # of the number of columns is exactly divisible by 15\n    newc<-nc%/%150\n    old.cols<-seq(1,nc,newc)\n    new.matrix<-matrix(NA,nr=nrow(matrix),nc=150)\n    for(i in 1:150){\n      new.matrix[,i]<-apply(matrix[,old.cols[i]:(old.cols[i]+newc-1)],1,max,na.rm=T)\n    }\n  } else{\n    rem<-nc%%150\n    newc<-nc%/%150\n    old.cols<-seq(1,nc-rem,newc)\n    new.matrix<-matrix(NA,nr=nrow(matrix),nc=150)\n    for(i in 1:149)\n      new.matrix[,i]<-apply(matrix[,old.cols[i]:(old.cols[i]+newc-1)],1,max,na.rm=T)\n    new.matrix[,150]<-apply(matrix[,old.cols[150]:nc],1,max,na.rm=T) \n  }\n  new.matrix[new.matrix==\"-Inf\"]<-NA\n  rownames(new.matrix)<-rownames(matrix)\n  new.matrix\n}\n\n\n\n\n# tabla con solo tiginus\ntigrinus_total <- all_data_total[[7]]\n\n# colapsa a una semana take tima\ntigrinus_150<-f.shrink.matrix.to150(matrix = all_data_total[[7]])\n\n\n# crear objeto umf\numf_tigrinus_total <- unmarkedFrameOccu(y=tigrinus_150)\n# verificar datos en grafica\nplot(umf_tigrinus_total)"
  },
  {
    "objectID": "index.html#crerar-matrices-para-unmarked-2",
    "href": "index.html#crerar-matrices-para-unmarked-2",
    "title": "Occupación tigrinus",
    "section": "crerar matrices para unmarked",
    "text": "crerar matrices para unmarked\n\n\ncodigo R\n############# start spatial part\n#### make sf object\ncocha1_sf <- st_as_sf(cocha1_data, coords = c(\"Longitude\", \"Latitude\"), crs = \"EPSG:4326\")\n#### make sf object\ncocha2_sf <- st_as_sf(cocha2_data, coords = c(\"Longitude\", \"Latitude\"), crs = \"EPSG:4326\")\n\n\n# get centroid. 1st bbox, make pol\ncentroid_cocha <- st_centroid(st_as_sfc(st_bbox(cocha1_sf)))\n# get altitude\nelev_cocha_full <- elevation_3s(centroid_cocha[[1]][1], centroid_cocha[[1]][2], \n                         path=\"C:/CodigoR/tigrinus2/raster\")\n\n# elev_ucu_full_ras <- elev_ucu_full %>% raster()\n\n# st_bbox(ucumari_sf) # notice order xmin, xmax, ymin, ymax\next_cocha <- ext(-77.17, -77.05,  0.886,    1.085 )\nelev_cocha <- crop(elev_cocha_full, ext_cocha) \n\n# convert from terra to raster\nelev_cocha_ras <-  elev_cocha %>% raster()\n\n##### get uniques\ncams_cocha1 <-cocha1_data %>% dplyr::select(c(\"Longitude\", \"Latitude\", \"camera_trap\")) %>% distinct()\n#### make sf object\ncams_cocha1_sf <- st_as_sf(cams_cocha1, coords = c(\"Longitude\", \"Latitude\"), crs = \"EPSG:4326\")\n\ncams_cocha2 <-cocha2_data %>% dplyr::select(c(\"Longitude\", \"Latitude\", \"camera_trap\")) %>% distinct()\n#### make sf object\ncams_cocha2_sf <- st_as_sf(cams_cocha2, coords = c(\"Longitude\", \"Latitude\"), crs = \"EPSG:4326\")\n\n\n\n# extract values from raster using altitude\ncams_cocha1_sf$elev <- extract(elev_cocha_ras, cams_cocha1_sf)\ncams_cocha2_sf$elev <- extract(elev_cocha_ras, cams_cocha2_sf)\n\n\n############## make distance map\n# # Convert points to sp spatialpointdatafram\n# casas_points <- as(casas_sf, \"Spatial\")\n# # Projection\n# # Be sure to have rgdal first installed.\n# casas_points_utm <- spTransform(casas_points, CRS('+init=epsg:32718'))\n# # convert to ppp\n# casas_points_ppp <- as(as(casas_points_utm, \"SpatialPoints\"), \"ppp\")\n# # distance\n# casas_distance <- distmap(casas_points_ppp)\n\n####### extract distance \n# \n# casas_distance_ras<- raster(casas_distance) # convert raster\n# crs(casas_distance_ras) <- '+init=epsg:32718' # add crs\n# \n# # project raster\n# casa_distance <- projectRaster(casas_distance_ras, crs = crs(casas_points))\n\n\n# extracr raster values\n# cams_ucu_sf$dist_casa <- raster::extract(casas_distance_ras, cams_ucu_sf)\ncams_cocha1_sf$dist_casa <- raster::extract(casa_distance, cams_cocha1_sf) # also works\ncams_cocha2_sf$dist_casa <- raster::extract(casa_distance, cams_cocha2_sf) # also works\n\n\n# plot map\nmapview(elev_cocha_ras) + mapview(cams_cocha1_sf[\"camera_trap\"]) + mapview(cams_cocha2_sf[\"camera_trap\"]) \n\n\n\n\n\n\n\ncodigo R\n############### end spatial part\n\n# fix cocha2 data\n# cocha2_data$binomial <- str_c (cocha2_data$Genus, \"_\", cocha2_data$Species)\n\n#funcion para crear todas las tablas de datos\nall_data_cocha1 <-  f.matrix.creator2 (cocha1_data)\nall_data_cocha2 <-  f.matrix.creator2 (cocha2_data)\n# names(all_data) # ver lass especies y en que lista esta cada una\n\n\n# kable(names(all_data_cocha1)) # html table\n# Tigrinus es lista 11 y perro 2\n\n# kable(names(all_data_cocha2)) # html table\n# Tigrinus es 30\n# Perro no hay\n\ndatatable(\ndata = as.data.frame(names(all_data_cocha1)),\ncaption = \"Especies Ucumari\",\nfilter = \"top\"\n)"
  },
  {
    "objectID": "index.html#unmarked-1",
    "href": "index.html#unmarked-1",
    "title": "Occupación tigrinus",
    "section": "unmarked",
    "text": "unmarked\n\ncodigo R\n# tabla con solo tiginus\ntigrinus_cocha1 <- all_data_cocha1[[11]]\ntigrinus_cocha2 <- all_data_cocha2[[30]]\n# cargar paquete\nlibrary(unmarked)\n# crear objeto umf\numf_tigrinus_cocha1 <- unmarkedFrameOccu(y=tigrinus_cocha1)\numf_tigrinus_cocha2 <- unmarkedFrameOccu(y=tigrinus_cocha2)\n# verificar datos en grafica\nplot(umf_tigrinus_cocha1)\n\n\n\n\n\ncodigo R\nplot(umf_tigrinus_cocha2)\n\n\n\n\n\ncodigo R\n# tabla con solo perro\nperros_cocha1 <- all_data_cocha1[[2]]\n# cargar paquete\nlibrary(unmarked)\n# crear objeto umf\numf_perros_cocha1 <- unmarkedFrameOccu(y=perros_cocha1)\n# verificar datos en grafica\nplot(umf_perros_cocha1)"
  },
  {
    "objectID": "index.html#modelo-nulo-1",
    "href": "index.html#modelo-nulo-1",
    "title": "Occupación tigrinus",
    "section": "Modelo nulo",
    "text": "Modelo nulo\n\n\ncodigo R\n# modelo nulo\nfm_tig_cocha1 <- occu(~1 ~1, umf_tigrinus_cocha1)  # fit a model\nfm_tig_cocha2 <- occu(~1 ~1, umf_tigrinus_cocha2)  # fit a model\n\nbackTransform(fm_tig_cocha1, type=\"det\") #estimado lineal de deteccion\nbackTransform(fm_tig_cocha1, type=\"state\") # estimado linel de ocupacion\n\nbackTransform(fm_tig_cocha2, type=\"det\") #estimado lineal de deteccion\nbackTransform(fm_tig_cocha2, type=\"state\") # estimado linel de ocupacion\n\n# modelo nulo\nfm_perros_cocha1 <- occu(~1 ~1, umf_perros_cocha1)  # fit a model\n\nbackTransform(fm_perros_cocha1, type=\"det\") #estimado lineal de deteccion\nbackTransform(fm_perros_cocha1, type=\"state\") # estimado linel de ocupacion"
  },
  {
    "objectID": "index.html#modelos-de-co-ocurrencia-1",
    "href": "index.html#modelos-de-co-ocurrencia-1",
    "title": "Occupación tigrinus",
    "section": "MODELOS DE CO-OCURRENCIA",
    "text": "MODELOS DE CO-OCURRENCIA\n\n\ncodigo R\ndetformulas <- c( \"~1\", \"~1\")#, \"~1\")\n#stateformulas <- c('~elev','~elev', '~elev', \"~1\", \"~1\", \"~1\", \"~0\")# 3 sp\nstateformulas <- c('~elev','~elev', \"~0\")\ny <- list(tigrinus_cocha1, perros_cocha1)# , ocelote_ucu)\nnames(y) <- c(\"tigrinus\", \"perros\")#, \"ocelote\")\n\n\nobs_covs <-as.data.frame(scale(cams_cocha1_sf$dist_casa))\nnames(obs_covs) <- \"dist_casa\"\n\nsite_covs <- data.frame(cams_cocha1_sf[,c('elev','dist_casa')])[,1:2]\nsite_covs <-as.data.frame(apply(site_covs,2,scale))\nnames(site_covs) <- c(\"elev\", \"dist_casa\")\n\n\numf <-  unmarkedFrameOccuMulti(y=y, \n                              siteCovs=site_covs,\n                              obsCovs = NULL)\nplot(umf)\n\n\ncodigo R\n#umf\n\n# occFormulas Length should match number/order of columns in fDesign\numf@fDesign\n\n\nfit1 <- occuMulti(detformulas, stateformulas, umf,    \n        method=\"BFGS\", se=TRUE, engine=c(\"C\"), silent=FALSE)\n\nfit1\n\n# update model\n# occFormulas2 <- c('~dist_casa', '~dist_casa', '~dist_casa', \"~1\", \"~1\", \"~1\", \"~0\")\noccFormulas2 <- c('~dist_casa', '~dist_casa', \"~0\")\nfit2 <- update(fit1, stateformulas=occFormulas2)\nfit2\n\n#List of fitted models\nfl <- fitList(fit1, fit2)\ncoef(fl)\n\n\n###################\n# Model selection #\n###################\nmodSel(fl)\n\n#############\n# Model fit #\n#############\nbt <- parboot(fit2, nsim=50) # takes time\nplot(bt)\n\n\n\nplot predicted marginal occupancy\n\ncodigo R\n#Plot predicted marginal occupancy as a function of disturbance\nr <- range(cams_cocha1_sf$elev)\nx1 <- seq(r[1],r[2],length.out=100)\nx_scale <- (x1-mean(cams_cocha1_sf$elev))/sd(cams_cocha1_sf$elev)\n\nr2 <- range(cams_cocha1_sf$dist_casa)\nx2 <- seq(r2[1],r2[2],length.out=100)\nx2_scale <- (x2-mean(cams_cocha1_sf$dist_casa))/sd(cams_cocha1_sf$dist_casa)\n\nnd <- matrix(NA, 100, 2)\nnd <- data.frame(elev=x_scale, dist_casa= x2_scale)\n\n\n\ntigrinus_pred <- predict(fit2, \"state\", species=\"tigrinus\", newdata=nd)\n\nBootstrapping confidence intervals with 100 samples\n\ncodigo R\ntigrinus_pred$Species <- \"tigrinus\"\n\nperros_pred <- predict(fit2, \"state\", species=\"perros\", newdata=nd)\n\nBootstrapping confidence intervals with 100 samples\n\ncodigo R\nperros_pred$Species <- \"perros\"\n\n# ocelote_pred <- predict(fit2, \"state\", species=\"ocelote\", newdata=nd)\n# ocelote_pred$Species <- \"ocelote\"\n\n\nplot_dat <- rbind(tigrinus_pred, perros_pred)#, ocelote_pred)\n\nggplot(data=plot_dat, aes(x=rep(x2,2), y=Predicted)) + # change to 3 sp and x2 to distance\n  geom_ribbon(aes(ymin=lower, ymax=upper, fill=Species), alpha=0.3) +\n  geom_line(aes(col=Species)) +\n  labs(x=\"Distancia casa\", y=\"Marginal occupancy\") +\n  theme_bw() +\n  theme(panel.grid.major=element_blank(), panel.grid.minor=element_blank(),\n        axis.text=element_text(size=12), axis.title=element_text(size=14),\n        legend.text=element_text(size=12), legend.title=element_text(size=14))\n\n\n\n\n\n\nplot predicted co-occurrence occupancy\n\ncodigo R\n#Plot predicted marginal occupancy as a function of disturbance\nr <- range(cams_cocha1_sf$elev)\nx1 <- seq(r[1],r[2],length.out=100)\nx_scale <- (x1-mean(cams_cocha1_sf$elev))/sd(cams_cocha1_sf$elev)\n\nr2 <- range(cams_ucu_sf$dist_casa)\nx2 <- seq(r2[1],r2[2],length.out=100)\nx2_scale <- (x2-mean(cams_cocha1_sf$dist_casa))/sd(cams_cocha1_sf$dist_casa)\n\nnd <- matrix(NA, 100, 2)\nnd <- data.frame(elev=x_scale, dist_casa= x2_scale)\n\n\ntigrinus_perros_pred <- predict(fit2, \"state\", \n                         species=c(\"tigrinus\", \"perros\"), newdata=nd)\n\nBootstrapping confidence intervals with 100 samples\n\ncodigo R\n# tigrinus_pred$Species <- c(\"tigrinus\", \"perros\")\n\n# perros_pred <- predict(fit1, \"state\", species=\"perros\", newdata=nd)\n# perros_pred$Species <- \"perros\"\n\n# ocelote_pred <- predict(fit2, \"state\", species=\"ocelote\", newdata=nd)\n# ocelote_pred$Species <- \"ocelote\"\n\n\nplot_dat <- tigrinus_perros_pred #rbind(tigrinus_pred, perros_pred)#, ocelote_pred)\n\nggplot(data=plot_dat, aes(x=rep(x2), y=Predicted)) + # change to 3 sp and x2 to distance\n  geom_ribbon(aes(ymin=lower, ymax=upper, fill = \"grey50\"), alpha=0.3) +\n  geom_line(aes(y=Predicted), col=\"blue\") +\n  labs(x=\"Distancia casa\", y=\"co-occurence\") +\n  theme_bw() +\n  theme(panel.grid.major=element_blank(), panel.grid.minor=element_blank(),\n        axis.text=element_text(size=12), axis.title=element_text(size=14),\n        legend.text=element_text(size=12), legend.title=element_text(size=14))\n\n\n\n\n\n\nplot predicted conditional occupancy\n\ncodigo R\n#Plot predicted marginal occupancy as a function of disturbance\nr <- range(cams_cocha1_sf$elev)\nx1 <- seq(r[1],r[2],length.out=100)\nx_scale <- (x1-mean(cams_cocha1_sf$elev))/sd(cams_cocha1_sf$elev)\n\nr2 <- range(cams_cocha1_sf$dist_casa)\nx2 <- seq(r2[1],r2[2],length.out=100)\nx2_scale <- (x2-mean(cams_cocha1_sf$dist_casa))/sd(cams_cocha1_sf$dist_casa)\n\nnd <- matrix(NA, 100, 2)\nnd <- data.frame(elev=x_scale, dist_casa= x2_scale)\n\n##### conditional\n\ntigrinus_perro_no <- predict(fit2, \"state\", \n                         species=\"tigrinus\", \n                         cond='-perros',\n                         newdata=nd)\n\nBootstrapping confidence intervals with 100 samples\n\ncodigo R\ntigrinus_perro_no$Species <- \"perro ausente\"\n\ntigrinus_perro_si <- predict(fit2, \"state\", \n                         species=\"tigrinus\", \n                         cond='perros',\n                         newdata=nd)\n\nBootstrapping confidence intervals with 100 samples\n\ncodigo R\ntigrinus_perro_si$Species <- \"perro presente\"\n\n\n\n\n\n# perros_pred <- predict(fit1, \"state\", species=\"perros\", newdata=nd)\n# perros_pred$Species <- \"perros\"\n\n# ocelote_pred <- predict(fit2, \"state\", species=\"ocelote\", newdata=nd)\n# ocelote_pred$Species <- \"ocelote\"\n\n\nplot_dat <- rbind(tigrinus_perro_si, tigrinus_perro_no)#, ocelote_pred)\n\nggplot(data=plot_dat, aes(x=rep(x2,2), y=Predicted)) + # change to 3 sp and x2 to distance\n  geom_ribbon(aes(ymin=lower, ymax=upper, fill=Species), alpha=0.3) +\n  geom_line(aes(col=Species)) +\n  labs(x=\"Distancia casa\", y=\"tigrinus conditional occupancy\") +\n  theme_bw() +\n  theme(panel.grid.major=element_blank(), panel.grid.minor=element_blank(),\n        axis.text=element_text(size=12), axis.title=element_text(size=14),\n        legend.text=element_text(size=12), legend.title=element_text(size=14))"
  }
]