[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Occupación tigrinus",
    "section": "",
    "text": "codigo R\nlibrary(knitr)\nlibrary(tidyverse) # maneja datos\nlibrary(mapview) # mapas facil\nlibrary(readxl) #leer datos\nlibrary(sf) # vector map\nlibrary(geodata) # replace getData de raster para Terra\nlibrary(raster) # mapas raster\nlibrary(spatstat) # interpola mapa\nlibrary(maptools) # to coerce to ppp. note that 'maptools' will be retired by the end of 2023\nlibrary(rgdal) # rgdal will be retired during 2023 #some tricks to change projection\n# library(stars)\n# library(unmarked) # occu models\nlibrary(DT) # html table\n\n\nsource(\"C:/CodigoR/tigrinus2/R/organizadato.R\")"
  },
  {
    "objectID": "index.html#cargar-datos",
    "href": "index.html#cargar-datos",
    "title": "Occupación tigrinus",
    "section": "cargar datos",
    "text": "cargar datos\n\ncodigo R\nFull_data_ucu <- read_excel(\"D:/BoxFiles/Box Sync/CodigoR/tigrinus/data/Full_data_Ucumari_Huila_Cocha1_Cocha2.xlsx\", \n    sheet = \"ucumari\", col_types = c(\"numeric\", \n        \"text\", \"text\", \"text\", \"text\", \"text\", \n        \"text\", \"text\", \"text\", \"text\", \"text\", \n        \"text\", \"text\", \"text\", \"text\", \"numeric\", \n        \"text\", \"text\", \"text\", \"text\", \"text\", \n        \"text\", \"text\", \"text\", \"text\", \"numeric\", \n        \"numeric\", \"numeric\", \"numeric\", \n        \"text\"))"
  },
  {
    "objectID": "index.html#crerar-matrices-para-unmarked",
    "href": "index.html#crerar-matrices-para-unmarked",
    "title": "Occupación tigrinus",
    "section": "crerar matrices para unmarked",
    "text": "crerar matrices para unmarked\n\n\ncodigo R\ncasas <- read_csv(\"C:/CodigoR/tigrinus2/data/casas.csv\")\ncasas_sf <- st_as_sf(casas, coords = c(\"lon\", \"lat\"), crs = \"EPSG:4326\")\n\n\n\n\n############# start spatial part\n#### make sf object\nucumari_sf <- st_as_sf(Full_data_ucu, coords = c(\"Longitude\", \"Latitude\"), crs = \"EPSG:4326\")\n\n\n# get centroid. 1st bbox, make pol\ncentroid_ucu <- st_centroid(st_as_sfc(st_bbox(ucumari_sf)))\n# get altitude\nelev_ucu_full <- elevation_3s(centroid_ucu[[1]][1], centroid_ucu[[1]][2], \n                         path=\"D:/BoxFiles/Box Sync/CodigoR/tigrinus/raster\")\n\n# elev_ucu_full_ras <- elev_ucu_full %>% raster()\n\n# st_bbox(ucumari_sf) # notice order xmin, xmax, ymin, ymax\next_ucu <- ext(-75.59, -75.47,  4.68,    4.81 )\nelev_ucu <- crop(elev_ucu_full, ext_ucu) \n\n# convert from terra to raster\nelev_ucu_ras <-  elev_ucu %>% raster()\n\n# get uniques\ncams_ucu <-Full_data_ucu %>% dplyr::select(c(\"Longitude\", \"Latitude\", \"camera_trap\")) %>% distinct()\n#### make sf object\ncams_ucu_sf <- st_as_sf(cams_ucu, coords = c(\"Longitude\", \"Latitude\"), crs = \"EPSG:4326\")\n\n# extract values from raster using altitude\ncams_ucu_sf$elev <- extract(elev_ucu_ras, cams_ucu_sf)\n\n############## make distance map\n# Convert points to sp spatialpointdatafram\ncasas_points <- as(casas_sf, \"Spatial\")\n# Projection\n# Be sure to have rgdal first installed.\ncasas_points_utm <- spTransform(casas_points, CRS('+init=epsg:21818'))\n# convert to ppp\ncasas_points_ppp <- as(as(casas_points_utm, \"SpatialPoints\"), \"ppp\")\n# distance\ncasas_distance <- distmap(casas_points_ppp)\n\n####### extract distance \n\ncasas_distance_ras<- raster(casas_distance) # convert raster\ncrs(casas_distance_ras) <- '+init=epsg:21818' # add crs\n\n# project raster\ncasa_distance <- projectRaster(casas_distance_ras, crs = crs(casas_points))\n\n# cams_ucu_sf$dist_casa <- raster::extract(casas_distance_ras, cams_ucu_sf)\ncams_ucu_sf$dist_casa <- raster::extract(casa_distance, cams_ucu_sf) # also works\n\n\n# plot map\npal = mapviewPalette(\"mapviewTopoColors\") #color palete\n\nmapview(elev_ucu_ras) + \n  mapview(casa_distance, col.regions = pal(100), at = seq(600, 240000, 100), legend = TRUE) +\n  mapview(cams_ucu_sf[\"camera_trap\"]) \n\n\n\n\n\n\n\ncodigo R\n############### end spatial part\n\nFull_data_ucu$binomial <- str_c (Full_data_ucu$Genus, \"_\", Full_data_ucu$Species)\n\n#funcion para crear todas las tablas de datos\nall_data_ucu <-  f.matrix.creator2 (Full_data_ucu)\n\n# names(all_data) # ver lass especies y en que lista esta cada una\n# kable(names(all_data)) # html table\n# Tigrinus es lista 8\n\ndatatable(\ndata = as.data.frame(names(all_data_ucu)),\ncaption = \"Especies Ucumari\",\nfilter = \"top\"\n)"
  },
  {
    "objectID": "index.html#unmarked",
    "href": "index.html#unmarked",
    "title": "Occupación tigrinus",
    "section": "unmarked",
    "text": "unmarked\n\ncodigo R\nlibrary(unmarked)\n# tabla con solo tiginus\ntigrinus_ucu <- all_data_ucu[[8]]\n# cargar paquete\nlibrary(unmarked)\n# crear objeto umf\numf_tigrinus_ucu <- unmarkedFrameOccu(y=tigrinus_ucu)\n# verificar datos en grafica\n# plot(umf_tigrinus_ucu)\n\n# tabla con solo perros\nperros_ucu <- all_data_ucu[[75]]\n# crear objeto umf\numf_perros_ucu <- unmarkedFrameOccu(y=perros_ucu)\n# verificar datos en grafica\n# plot(umf_perros_ucu)\n\n# tabla con solo ocelote\nocelote_ucu <- all_data_ucu[[16]]\n# crear objeto umf\numf_ocelote_ucu <- unmarkedFrameOccu(y=ocelote_ucu)\n# verificar datos en grafica\n# plot(umf_ocelote_ucu)"
  },
  {
    "objectID": "index.html#modelo-nulo",
    "href": "index.html#modelo-nulo",
    "title": "Occupación tigrinus",
    "section": "Modelo nulo",
    "text": "Modelo nulo\n\ncodigo R\n# modelo nulo tigrinus\nfm_tig_ucu <- occu(~1 ~1, umf_tigrinus_ucu)  # fit a model\n\nbackTransform(fm_tig_ucu, type=\"det\") #estimado lineal de deteccion\n\nBacktransformed linear combination(s) of Detection estimate(s)\nEstimate SE LinComb (Intercept) 0.0184 0.00977 -3.98 1\nTransformation: logistic\n\ncodigo R\nbackTransform(fm_tig_ucu, type=\"state\") # estimado linel de ocupacion\n\nBacktransformed linear combination(s) of Occupancy estimate(s)\nEstimate SE LinComb (Intercept) 0.198 0.0968 -1.4 1\nTransformation: logistic\n\ncodigo R\n# modelo nulo perro\nfm_perros_ucu <- occu(~1 ~1, umf_perros_ucu)  # fit a model\n\nbackTransform(fm_perros_ucu, type=\"det\") #estimado lineal de deteccion\n\nBacktransformed linear combination(s) of Detection estimate(s)\nEstimate SE LinComb (Intercept) 0.000356 0.000614 -7.94 1\nTransformation: logistic\n\ncodigo R\nbackTransform(fm_perros_ucu, type=\"state\") # estimado linel de ocupacion\n\nBacktransformed linear combination(s) of Occupancy estimate(s)\nEstimate SE LinComb (Intercept) 0.985 1.38 4.17 1\nTransformation: logistic\n\ncodigo R\n# modelo nulo ocelote\nfm_ocelote_ucu <- occu(~1 ~1, umf_ocelote_ucu)  # fit a model\n\nbackTransform(fm_ocelote_ucu, type=\"det\") #estimado lineal de deteccion\n\nBacktransformed linear combination(s) of Detection estimate(s)\nEstimate SE LinComb (Intercept) 0.0109 0.00736 -4.51 1\nTransformation: logistic\n\ncodigo R\nbackTransform(fm_ocelote_ucu, type=\"state\") # estimado linel de ocupacion\n\nBacktransformed linear combination(s) of Occupancy estimate(s)\nEstimate SE LinComb (Intercept) 0.288 0.181 -0.904 1\nTransformation: logistic"
  },
  {
    "objectID": "index.html#modelos-de-co-ocurrencia",
    "href": "index.html#modelos-de-co-ocurrencia",
    "title": "Occupación tigrinus",
    "section": "MODELOS DE CO-OCURRENCIA",
    "text": "MODELOS DE CO-OCURRENCIA\n\ncodigo R\ndetformulas <- c( \"~1\", \"~1\")#, \"~1\")\n#stateformulas <- c('~elev','~elev', '~elev', \"~1\", \"~1\", \"~1\", \"~0\")# 3 sp\nstateformulas <- c('~elev','~elev', \"~0\")\ny <- list(tigrinus_ucu, perros_ucu)# , ocelote_ucu)\nnames(y) <- c(\"tigrinus\", \"perros\")#, \"ocelote\")\n\n\nobs_covs <-as.data.frame(scale(cams_ucu_sf$dist_casa))\nnames(obs_covs) <- \"dist_casa\"\n\nsite_covs_ucu <- data.frame(cams_ucu_sf[,c('elev','dist_casa')])[,1:2]\nsite_covs_ucu <-as.data.frame(apply(site_covs_ucu,2,scale))\nnames(site_covs_ucu) <- c(\"elev\", \"dist_casa\")\n\n\numf <-  unmarkedFrameOccuMulti(y=y, \n                              siteCovs=site_covs_ucu,\n                              obsCovs = NULL)\nplot(umf)\n\n\n\n\n\ncodigo R\n#umf\n\n# occFormulas Length should match number/order of columns in fDesign\numf@fDesign\n\n    f1[tigrinus] f2[perros] f3[tigrinus:perros]\npsi[11] 1 1 1 psi[10] 1 0 0 psi[01] 0 1 0 psi[00] 0 0 0\n\ncodigo R\nfit1 <- occuMulti(detformulas, stateformulas, umf,    \n        method=\"BFGS\", se=TRUE, engine=c(\"C\"), silent=FALSE)\n\nfit1\n\nCall: occuMulti(detformulas = detformulas, stateformulas = stateformulas, data = umf, method = “BFGS”, se = TRUE, engine = c(“C”), silent = FALSE, maxOrder = 2L)\nOccupancy: Estimate SE z P(>|z|) [tigrinus] (Intercept) -1.3964 0.611 -2.286 0.0223 [tigrinus] elev 0.0983 0.456 0.215 0.8295 [perros] (Intercept) -48.0649 100.952 -0.476 0.6340 [perros] elev 38.5090 77.990 0.494 0.6215\nDetection: Estimate SE z P(>|z|) [tigrinus] (Intercept) -3.98 0.543 -7.33 2.22e-13 [perros] (Intercept) -5.77 1.105 -5.22 1.79e-07\nAIC: 152.5147\n\ncodigo R\n# update model\n# occFormulas2 <- c('~dist_casa', '~dist_casa', '~dist_casa', \"~1\", \"~1\", \"~1\", \"~0\")\noccFormulas2 <- c('~dist_casa', '~dist_casa', \"~0\")\nfit2 <- update(fit1, stateformulas=occFormulas2)\nfit2\n\nCall: occuMulti(detformulas = c(“~1”, “~1”), stateformulas = c(“~dist_casa”, “~dist_casa”, “~0”), data = umf, maxOrder = 2L, method = “BFGS”, se = TRUE, engine = c(“C”), silent = FALSE)\nOccupancy: Estimate SE z P(>|z|) [tigrinus] (Intercept) -1.473 0.648 -2.274 0.023 [tigrinus] dist_casa 0.606 0.596 1.016 0.309 [perros] (Intercept) -22.080 35.939 -0.614 0.539 [perros] dist_casa -35.460 55.936 -0.634 0.526\nDetection: Estimate SE z P(>|z|) [tigrinus] (Intercept) -4.00 0.552 -7.24 4.38e-13 [perros] (Intercept) -6.53 1.011 -6.46 1.04e-10\nAIC: 152.6737\n\nModel Selection\n\ncodigo R\n#List of fitted models\nfl <- fitList(elev=fit1, dist=fit2)\n# coef(fl)\n\n\n###################\n# Model selection #\n###################\n\nmodSel(fl)\n\n nPars    AIC delta AICwt cumltvWt\nelev 6 152.51 0.00 0.52 0.52 dist 6 152.67 0.16 0.48 1.00\n\ncodigo R\n#############\n# Model fit #\n#############\n\n# bt <- parboot(fit1, nsim=50) # takes time best model\n# plot(bt)\n\n\n\nplot predicted marginal occupancy\n\ncodigo R\n#Plot predicted marginal occupancy as a function of disturbance\nr <- range(cams_ucu_sf$elev)\nx1 <- seq(r[1],r[2],length.out=100)\nx_scale <- (x1-mean(cams_ucu_sf$elev))/sd(cams_ucu_sf$elev)\n\nr2 <- range(cams_ucu_sf$dist_casa)\nx2 <- seq(r2[1],r2[2],length.out=100)\nx2_scale <- (x2-mean(cams_ucu_sf$dist_casa))/sd(cams_ucu_sf$dist_casa)\n\nnd <- matrix(NA, 100, 2)\nnd <- data.frame(elev=x_scale, dist_casa= x2_scale)\n\n\n\ntigrinus_pred <- predict(fit1, \"state\", species=\"tigrinus\", newdata=nd)\ntigrinus_pred$Species <- \"tigrinus\"\n\nperros_pred <- predict(fit1, \"state\", species=\"perros\", newdata=nd)\nperros_pred$Species <- \"perros\"\n\n# ocelote_pred <- predict(fit2, \"state\", species=\"ocelote\", newdata=nd)\n# ocelote_pred$Species <- \"ocelote\"\n\n\nplot_dat <- rbind(tigrinus_pred, perros_pred)#, ocelote_pred)\n\nggplot(data=plot_dat, aes(x=rep(x1,2), y=Predicted)) + # change to 3 sp and x2 to distance\n  geom_ribbon(aes(ymin=lower, ymax=upper, fill=Species), alpha=0.3) +\n  geom_line(aes(col=Species)) +\n  labs(x=\"Elevation\", y=\"Marginal occupancy\") +\n  theme_bw() +\n  theme(panel.grid.major=element_blank(), panel.grid.minor=element_blank(),\n        axis.text=element_text(size=12), axis.title=element_text(size=14),\n        legend.text=element_text(size=12), legend.title=element_text(size=14))\n\n\n\n\n\n\nplot predicted co-occurrence occupancy\n\ncodigo R\n#Plot predicted marginal occupancy as a function of disturbance\nr <- range(cams_ucu_sf$elev)\nx1 <- seq(r[1],r[2],length.out=100)\nx_scale <- (x1-mean(cams_ucu_sf$elev))/sd(cams_ucu_sf$elev)\n\nr2 <- range(cams_ucu_sf$dist_casa)\nx2 <- seq(r2[1],r2[2],length.out=100)\nx2_scale <- (x2-mean(cams_ucu_sf$dist_casa))/sd(cams_ucu_sf$dist_casa)\n\nnd <- matrix(NA, 100, 2)\nnd <- data.frame(elev=x_scale, dist_casa= x2_scale)\n\n\ntigrinus_perros_pred <- predict(fit1, \"state\", \n                         species=c(\"tigrinus\", \"perros\"), newdata=nd)\n\n# tigrinus_pred$Species <- c(\"tigrinus\", \"perros\")\n\n# perros_pred <- predict(fit1, \"state\", species=\"perros\", newdata=nd)\n# perros_pred$Species <- \"perros\"\n\n# ocelote_pred <- predict(fit2, \"state\", species=\"ocelote\", newdata=nd)\n# ocelote_pred$Species <- \"ocelote\"\n\n\nplot_dat <- tigrinus_perros_pred #rbind(tigrinus_pred, perros_pred)#, ocelote_pred)\n\nggplot(data=plot_dat, aes(x=rep(x1), y=Predicted)) + # change to 3 sp and x2 to distance\n  geom_ribbon(aes(ymin=lower, ymax=upper, fill = \"grey50\"), alpha=0.3) +\n  geom_line(aes(y=Predicted), col=\"blue\") +\n  labs(x=\"Elevation\", y=\"co-occurence\") +\n  theme_bw() +\n  theme(panel.grid.major=element_blank(), panel.grid.minor=element_blank(),\n        axis.text=element_text(size=12), axis.title=element_text(size=14),\n        legend.text=element_text(size=12), legend.title=element_text(size=14))\n\n\n\n\n\n\nplot predicted conditional occupancy\n\ncodigo R\n#Plot predicted marginal occupancy as a function of disturbance\nr <- range(cams_ucu_sf$elev)\nx1 <- seq(r[1],r[2],length.out=100)\nx_scale <- (x1-mean(cams_ucu_sf$elev))/sd(cams_ucu_sf$elev)\n\nr2 <- range(cams_ucu_sf$dist_casa)\nx2 <- seq(r2[1],r2[2],length.out=100)\nx2_scale <- (x2-mean(cams_ucu_sf$dist_casa))/sd(cams_ucu_sf$dist_casa)\n\nnd <- matrix(NA, 100, 2)\nnd <- data.frame(elev=x_scale, dist_casa= x2_scale)\n\n##### conditional\n\ntigrinus_perro_no <- predict(fit1, \"state\", \n                         species=\"tigrinus\", \n                         cond='-perros',\n                         newdata=nd)\n\ntigrinus_perro_no$Species <- \"perro ausente\"\n\ntigrinus_perro_si <- predict(fit1, \"state\", \n                         species=\"tigrinus\", \n                         cond='perros',\n                         newdata=nd)\n\ntigrinus_perro_si$Species <- \"perro presente\"\n\n\n\n\n\n# perros_pred <- predict(fit1, \"state\", species=\"perros\", newdata=nd)\n# perros_pred$Species <- \"perros\"\n\n# ocelote_pred <- predict(fit2, \"state\", species=\"ocelote\", newdata=nd)\n# ocelote_pred$Species <- \"ocelote\"\n\n\nplot_dat <- rbind(tigrinus_perro_si, tigrinus_perro_no)#, ocelote_pred)\n\nggplot(data=plot_dat, aes(x=rep(x1,2), y=Predicted)) + # change to 3 sp and x2 to distance\n  geom_ribbon(aes(ymin=lower, ymax=upper, fill=Species), alpha=0.3) +\n  geom_line(aes(col=Species)) +\n  labs(x=\"Elevation\", y=\"tigrinus conditional occupancy\") +\n  theme_bw() +\n  theme(panel.grid.major=element_blank(), panel.grid.minor=element_blank(),\n        axis.text=element_text(size=12), axis.title=element_text(size=14),\n        legend.text=element_text(size=12), legend.title=element_text(size=14))"
  },
  {
    "objectID": "index.html#crerar-matrices-para-unmarked-1",
    "href": "index.html#crerar-matrices-para-unmarked-1",
    "title": "Occupación tigrinus",
    "section": "crerar matrices para unmarked",
    "text": "crerar matrices para unmarked\n\n\ncodigo R\n############# start spatial part\n#### make sf object\nhuila_sf <- st_as_sf(huila_data, coords = c(\"Longitude\", \"Latitude\"), crs = \"EPSG:4326\")\n\n\n# get centroid. 1st bbox, make pol\ncentroid_huila <- st_centroid(st_as_sfc(st_bbox(huila_sf)))\n# get altitude\nelev_huila_full <- elevation_3s(centroid_huila[[1]][1], centroid_huila[[1]][2], \n                         path=\"D:/BoxFiles/Box Sync/CodigoR/tigrinus/raster\")\n\n# elev_ucu_full_ras <- elev_ucu_full %>% raster()\n\n# st_bbox(ucumari_sf) # notice order xmin, xmax, ymin, ymax\next_huila <- ext(-76.39, -76.282,  1.71,    1.84 )\nelev_huila <- crop(elev_huila_full, ext_huila) \n\n# convert from terra to raster\nelev_huila_ras <-  elev_huila %>% raster()\n\n# get uniques\ncams_huila <-huila_data %>% dplyr::select(c(\"Longitude\", \"Latitude\", \"camera_trap\")) %>% distinct()\n#### make sf object\ncams_huila_sf <- st_as_sf(cams_huila, coords = c(\"Longitude\", \"Latitude\"), crs = \"EPSG:4326\")\n\n# extract values from raster using altitude\ncams_huila_sf$elev <- extract(elev_huila_ras, cams_huila_sf)\n\n############## make distance map\n# # Convert points to sp spatialpointdatafram\n# casas_points <- as(casas_sf, \"Spatial\")\n# # Projection\n# # Be sure to have rgdal first installed.\n# casas_points_utm <- spTransform(casas_points, CRS('+init=epsg:32718'))\n# # convert to ppp\n# casas_points_ppp <- as(as(casas_points_utm, \"SpatialPoints\"), \"ppp\")\n# # distance\n# casas_distance <- distmap(casas_points_ppp)\n\n####### extract distance \n# \n# casas_distance_ras<- raster(casas_distance) # convert raster\n# crs(casas_distance_ras) <- '+init=epsg:32718' # add crs\n# \n# # project raster\n# casa_distance <- projectRaster(casas_distance_ras, crs = crs(casas_points))\n\n# cams_ucu_sf$dist_casa <- raster::extract(casas_distance_ras, cams_ucu_sf)\ncams_huila_sf$dist_casa <- raster::extract(casa_distance, cams_huila_sf) # also works\n\n\n# plot map\nmapview(elev_huila_ras) + mapview(cams_huila_sf[\"camera_trap\"]) \n\n\n\n\n\n\n\ncodigo R\n############### end spatial part\n\n#huila_data$binomial <- str_c (huila_data$Genus, \"_\", huila_data$Species)\n\n#funcion para crear todas las tablas de datos\nall_data_huila <-  f.matrix.creator2 (huila_data)\n\n# names(all_data) # ver lass especies y en que lista esta cada una\n# kable(names(all_data)) # html table\n# Tigrinus es lista 6\n# perro es 43\n\ndatatable(\ndata = as.data.frame(names(all_data_huila)),\ncaption = \"Especies Huila\",\nfilter = \"top\"\n)"
  },
  {
    "objectID": "index.html#crerar-matrices-para-unmarked-2",
    "href": "index.html#crerar-matrices-para-unmarked-2",
    "title": "Occupación tigrinus",
    "section": "crerar matrices para unmarked",
    "text": "crerar matrices para unmarked\n\n\ncodigo R\n############# start spatial part\n#### make sf object\ncocha1_sf <- st_as_sf(cocha1_data, coords = c(\"Longitude\", \"Latitude\"), crs = \"EPSG:4326\")\n#### make sf object\ncocha2_sf <- st_as_sf(cocha2_data, coords = c(\"Longitude\", \"Latitude\"), crs = \"EPSG:4326\")\n\n\n# get centroid. 1st bbox, make pol\ncentroid_cocha <- st_centroid(st_as_sfc(st_bbox(cocha1_sf)))\n# get altitude\nelev_cocha_full <- elevation_3s(centroid_cocha[[1]][1], centroid_cocha[[1]][2], \n                         path=\"C:/CodigoR/tigrinus2/raster\")\n\n# elev_ucu_full_ras <- elev_ucu_full %>% raster()\n\n# st_bbox(ucumari_sf) # notice order xmin, xmax, ymin, ymax\next_cocha <- ext(-77.17, -77.05,  0.886,    1.085 )\nelev_cocha <- crop(elev_cocha_full, ext_cocha) \n\n# convert from terra to raster\nelev_cocha_ras <-  elev_cocha %>% raster()\n\n##### get uniques\ncams_cocha1 <-cocha1_data %>% dplyr::select(c(\"Longitude\", \"Latitude\", \"camera_trap\")) %>% distinct()\n#### make sf object\ncams_cocha1_sf <- st_as_sf(cams_cocha1, coords = c(\"Longitude\", \"Latitude\"), crs = \"EPSG:4326\")\n\ncams_cocha2 <-cocha2_data %>% dplyr::select(c(\"Longitude\", \"Latitude\", \"camera_trap\")) %>% distinct()\n#### make sf object\ncams_cocha2_sf <- st_as_sf(cams_cocha2, coords = c(\"Longitude\", \"Latitude\"), crs = \"EPSG:4326\")\n\n\n\n# extract values from raster using altitude\ncams_cocha1_sf$elev <- extract(elev_cocha_ras, cams_cocha1_sf)\ncams_cocha2_sf$elev <- extract(elev_cocha_ras, cams_cocha2_sf)\n\n\n############## make distance map\n# # Convert points to sp spatialpointdatafram\n# casas_points <- as(casas_sf, \"Spatial\")\n# # Projection\n# # Be sure to have rgdal first installed.\n# casas_points_utm <- spTransform(casas_points, CRS('+init=epsg:32718'))\n# # convert to ppp\n# casas_points_ppp <- as(as(casas_points_utm, \"SpatialPoints\"), \"ppp\")\n# # distance\n# casas_distance <- distmap(casas_points_ppp)\n\n####### extract distance \n# \n# casas_distance_ras<- raster(casas_distance) # convert raster\n# crs(casas_distance_ras) <- '+init=epsg:32718' # add crs\n# \n# # project raster\n# casa_distance <- projectRaster(casas_distance_ras, crs = crs(casas_points))\n\n\n# extracr raster values\n# cams_ucu_sf$dist_casa <- raster::extract(casas_distance_ras, cams_ucu_sf)\ncams_cocha1_sf$dist_casa <- raster::extract(casa_distance, cams_cocha1_sf) # also works\ncams_cocha2_sf$dist_casa <- raster::extract(casa_distance, cams_cocha2_sf) # also works\n\n\n# plot map\nmapview(elev_cocha_ras) + mapview(cams_cocha1_sf[\"camera_trap\"]) + mapview(cams_cocha2_sf[\"camera_trap\"]) \n\n\n\n\n\n\n\ncodigo R\n############### end spatial part\n\n# fix cocha2 data\n# cocha2_data$binomial <- str_c (cocha2_data$Genus, \"_\", cocha2_data$Species)\n\n#funcion para crear todas las tablas de datos\nall_data_cocha1 <-  f.matrix.creator2 (cocha1_data)\nall_data_cocha2 <-  f.matrix.creator2 (cocha2_data)\n# names(all_data) # ver lass especies y en que lista esta cada una\n\n\n# kable(names(all_data_cocha1)) # html table\n# Tigrinus es lista 11 y perro 2\n\n# kable(names(all_data_cocha2)) # html table\n# Tigrinus es 30\n# Perro no hay\n\ndatatable(\ndata = as.data.frame(names(all_data_cocha1)),\ncaption = \"Especies La Cocha\",\nfilter = \"top\"\n)"
  },
  {
    "objectID": "index.html#unmarked-1",
    "href": "index.html#unmarked-1",
    "title": "Occupación tigrinus",
    "section": "unmarked",
    "text": "unmarked\n\ncodigo R\n# tabla con solo tigrinus\ntigrinus_huila <- all_data_huila[[6]]\n\n# crear objeto umf\numf_tigrinus_huila <- unmarkedFrameOccu(y=tigrinus_huila)\n# verificar datos en grafica\n# plot(umf_tigrinus_ucu)\n\n# tabla con solo perros\nperros_huila <- all_data_huila[[43]]\n# crear objeto umf\numf_perros_huila <- unmarkedFrameOccu(y=perros_huila)\n# verificar datos en grafica\n# plot(umf_perros_ucu)\n\n# # tabla con solo ocelote\n# ocelote_huila <- all_data[[16]]\n# # crear objeto umf\n# umf_ocelote_huila <- unmarkedFrameOccu(y=ocelote_ucu)\n# # verificar datos en grafica\n# # plot(umf_ocelote_ucu)"
  },
  {
    "objectID": "index.html#modelo-nulo-1",
    "href": "index.html#modelo-nulo-1",
    "title": "Occupación tigrinus",
    "section": "Modelo nulo",
    "text": "Modelo nulo\n\ncodigo R\n# modelo nulo tigrinus\nfm_tig_huila <- occu(~1 ~1, umf_tigrinus_huila)  # fit a model\n\nbackTransform(fm_tig_huila, type=\"det\") #estimado lineal de deteccion\n\nBacktransformed linear combination(s) of Detection estimate(s)\nEstimate SE LinComb (Intercept) 0.00746 0.00512 -4.89 1\nTransformation: logistic\n\ncodigo R\nbackTransform(fm_tig_huila, type=\"state\") # estimado linel de ocupacion\n\nBacktransformed linear combination(s) of Occupancy estimate(s)\nEstimate SE LinComb (Intercept) 0.66 0.424 0.663 1\nTransformation: logistic\n\ncodigo R\n# modelo nulo perro\nfm_perros_huila <- occu(~1 ~1, umf_perros_huila)  # fit a model\n\nbackTransform(fm_perros_huila, type=\"det\") #estimado lineal de deteccion\n\nBacktransformed linear combination(s) of Detection estimate(s)\nEstimate SE LinComb (Intercept) 0.00152 0.00076 -6.49 1\nTransformation: logistic\n\ncodigo R\nbackTransform(fm_perros_huila, type=\"state\") # estimado linel de ocupacion\n\nBacktransformed linear combination(s) of Occupancy estimate(s)\nEstimate SE LinComb (Intercept) 1 NaN 23.8 1\nTransformation: logistic\n\ncodigo R\n# # modelo nulo ocelote\n# fm_ocelote_huila <- occu(~1 ~1, umf_ocelote_huila)  # fit a model\n# \n# backTransform(fm_ocelote_huila, type=\"det\") #estimado lineal de deteccion\n# backTransform(fm_ocelote_huila, type=\"state\") # estimado linel de ocupacion\n#"
  },
  {
    "objectID": "index.html#modelos-de-co-ocurrencia-1",
    "href": "index.html#modelos-de-co-ocurrencia-1",
    "title": "Occupación tigrinus",
    "section": "MODELOS DE CO-OCURRENCIA",
    "text": "MODELOS DE CO-OCURRENCIA\n\ncodigo R\ndetformulas <- c( \"~1\", \"~1\")#, \"~1\")\n#stateformulas <- c('~elev','~elev', '~elev', \"~1\", \"~1\", \"~1\", \"~0\")# 3 sp\nstateformulas <- c('~elev','~elev', \"~0\")\ny <- list(tigrinus_huila, perros_huila)# , ocelote_huila)\nnames(y) <- c(\"tigrinus\", \"perros\")#, \"ocelote\")\n\n\nobs_covs <-as.data.frame(scale(cams_huila_sf$dist_casa))\nnames(obs_covs) <- \"dist_casa\"\n\nsite_covs_huila <- data.frame(cams_huila_sf[,c('elev','dist_casa')])[,1:2]\nsite_covs_huila <-as.data.frame(apply(site_covs_huila,2,scale))\nnames(site_covs_huila) <- c(\"elev\", \"dist_casa\")\n\n\numf <-  unmarkedFrameOccuMulti(y=y, \n                              siteCovs=site_covs_huila,\n                              obsCovs = NULL)\nplot(umf)\n\n\n\n\n\ncodigo R\n#umf\n\n# occFormulas Length should match number/order of columns in fDesign\numf@fDesign\n\n    f1[tigrinus] f2[perros] f3[tigrinus:perros]\npsi[11] 1 1 1 psi[10] 1 0 0 psi[01] 0 1 0 psi[00] 0 0 0\n\ncodigo R\nfit1 <- occuMulti(detformulas, stateformulas, umf,    \n        method=\"BFGS\", se=TRUE, engine=c(\"C\"), silent=FALSE)\n\nfit1\n\nCall: occuMulti(detformulas = detformulas, stateformulas = stateformulas, data = umf, method = “BFGS”, se = TRUE, engine = c(“C”), silent = FALSE, maxOrder = 2L)\nOccupancy: Estimate SE z P(>|z|) [tigrinus] (Intercept) 96.274 149.319 0.645 0.5191 [tigrinus] elev 80.638 126.032 0.640 0.5223 [perros] (Intercept) -2.324 1.159 -2.005 0.0449 [perros] elev -0.979 0.774 -1.265 0.2060\nDetection: Estimate SE z P(>|z|) [tigrinus] (Intercept) -5.15 0.278 -18.51 1.75e-76 [perros] (Intercept) -4.39 0.961 -4.57 4.84e-06\nAIC: 227.2404\n\ncodigo R\n# update model\n# occFormulas2 <- c('~dist_casa', '~dist_casa', '~dist_casa', \"~1\", \"~1\", \"~1\", \"~0\")\noccFormulas2 <- c('~dist_casa', '~dist_casa', \"~0\")\nfit2 <- update(fit1, stateformulas=occFormulas2)\nfit2\n\nCall: occuMulti(detformulas = c(“~1”, “~1”), stateformulas = c(“~dist_casa”, “~dist_casa”, “~0”), data = umf, maxOrder = 2L, method = “BFGS”, se = TRUE, engine = c(“C”), silent = FALSE)\nOccupancy: Estimate SE z P(>|z|) [tigrinus] (Intercept) 15.69 124.97 0.126 0.900 [tigrinus] dist_casa 15.99 129.90 0.123 0.902 [perros] (Intercept) -4.09 2.98 -1.372 0.170 [perros] dist_casa -3.38 3.61 -0.934 0.350\nDetection: Estimate SE z P(>|z|) [tigrinus] (Intercept) -5.18 0.305 -17.02 6.22e-65 [perros] (Intercept) -4.39 0.971 -4.52 6.19e-06\nAIC: 228.9213\n\nModel Selection\n\ncodigo R\n#List of fitted models\nfl <- fitList(elev=fit1, dist=fit2)\n# coef(fl)\n\n###################\n# Model selection #\n###################\n\nmodSel(fl)\n\n nPars    AIC delta AICwt cumltvWt\nelev 6 227.24 0.00 0.70 0.70 dist 6 228.92 1.68 0.30 1.00\n\ncodigo R\n#############\n# Model fit #\n#############\n\n# bt <- parboot(fit1, nsim=50) # takes time best model\n# plot(bt)\n\n\n\nplot predicted marginal occupancy\n\ncodigo R\n#Plot predicted marginal occupancy as a function of disturbance\nr <- range(cams_huila_sf$elev)\nx1 <- seq(r[1],r[2],length.out=100)\nx_scale <- (x1-mean(cams_huila_sf$elev))/sd(cams_huila_sf$elev)\n\nr2 <- range(cams_huila_sf$dist_casa)\nx2 <- seq(r2[1],r2[2],length.out=100)\nx2_scale <- (x2-mean(cams_huila_sf$dist_casa))/sd(cams_huila_sf$dist_casa)\n\nnd <- matrix(NA, 100, 2)\nnd <- data.frame(elev=x_scale, dist_casa= x2_scale)\n\n\n\ntigrinus_pred <- predict(fit1, \"state\", species=\"tigrinus\", newdata=nd)\ntigrinus_pred$Species <- \"tigrinus\"\n\nperros_pred <- predict(fit1, \"state\", species=\"perros\", newdata=nd)\nperros_pred$Species <- \"perros\"\n\n# ocelote_pred <- predict(fit2, \"state\", species=\"ocelote\", newdata=nd)\n# ocelote_pred$Species <- \"ocelote\"\n\n\nplot_dat <- rbind(tigrinus_pred, perros_pred)#, ocelote_pred)\n\nggplot(data=plot_dat, aes(x=rep(x1,2), y=Predicted)) + # change to 3 sp and x2 to distance\n  geom_ribbon(aes(ymin=lower, ymax=upper, fill=Species), alpha=0.3) +\n  geom_line(aes(col=Species)) +\n  labs(x=\"Elevation\", y=\"Marginal occupancy\") +\n  theme_bw() +\n  theme(panel.grid.major=element_blank(), panel.grid.minor=element_blank(),\n        axis.text=element_text(size=12), axis.title=element_text(size=14),\n        legend.text=element_text(size=12), legend.title=element_text(size=14))\n\n\n\n\n\n\nplot predicted co-occurrence occupancy\n\ncodigo R\n#Plot predicted marginal occupancy as a function of disturbance\nr <- range(cams_huila_sf$elev)\nx1 <- seq(r[1],r[2],length.out=100)\nx_scale <- (x1-mean(cams_huila_sf$elev))/sd(cams_huila_sf$elev)\n\nr2 <- range(cams_huila_sf$dist_casa)\nx2 <- seq(r2[1],r2[2],length.out=100)\nx2_scale <- (x2-mean(cams_huila_sf$dist_casa))/sd(cams_huila_sf$dist_casa)\n\nnd <- matrix(NA, 100, 2)\nnd <- data.frame(elev=x_scale, dist_casa= x2_scale)\n\n\ntigrinus_perros_pred <- predict(fit1, \"state\", \n                         species=c(\"tigrinus\", \"perros\"), newdata=nd)\n\n# tigrinus_pred$Species <- c(\"tigrinus\", \"perros\")\n\n# perros_pred <- predict(fit1, \"state\", species=\"perros\", newdata=nd)\n# perros_pred$Species <- \"perros\"\n\n# ocelote_pred <- predict(fit2, \"state\", species=\"ocelote\", newdata=nd)\n# ocelote_pred$Species <- \"ocelote\"\n\n\nplot_dat <- tigrinus_perros_pred #rbind(tigrinus_pred, perros_pred)#, ocelote_pred)\n\nggplot(data=plot_dat, aes(x=rep(x1), y=Predicted)) + # change to 3 sp and x2 to distance\n  geom_ribbon(aes(ymin=lower, ymax=upper, fill = \"grey50\"), alpha=0.3) +\n  geom_line(aes(y=Predicted), col=\"blue\") +\n  labs(x=\"Elevation\", y=\"co-occurence\") +\n  theme_bw() +\n  theme(panel.grid.major=element_blank(), panel.grid.minor=element_blank(),\n        axis.text=element_text(size=12), axis.title=element_text(size=14),\n        legend.text=element_text(size=12), legend.title=element_text(size=14))\n\n\n\n\n\n\nplot predicted conditional occupancy\n\ncodigo R\n#Plot predicted marginal occupancy as a function of disturbance\nr <- range(cams_huila_sf$elev)\nx1 <- seq(r[1],r[2],length.out=100)\nx_scale <- (x1-mean(cams_huila_sf$elev))/sd(cams_huila_sf$elev)\n\nr2 <- range(cams_huila_sf$dist_casa)\nx2 <- seq(r2[1],r2[2],length.out=100)\nx2_scale <- (x2-mean(cams_huila_sf$dist_casa))/sd(cams_huila_sf$dist_casa)\n\nnd <- matrix(NA, 100, 2)\nnd <- data.frame(elev=x_scale, dist_casa= x2_scale)\n\n##### conditional\n\ntigrinus_perro_no <- predict(fit1, \"state\", \n                         species=\"tigrinus\", \n                         cond='-perros',\n                         newdata=nd)\n\ntigrinus_perro_no$Species <- \"perro ausente\"\n\ntigrinus_perro_si <- predict(fit1, \"state\", \n                         species=\"tigrinus\", \n                         cond='perros',\n                         newdata=nd)\n\ntigrinus_perro_si$Species <- \"perro presente\"\n\n\n\n\n\n# perros_pred <- predict(fit1, \"state\", species=\"perros\", newdata=nd)\n# perros_pred$Species <- \"perros\"\n\n# ocelote_pred <- predict(fit2, \"state\", species=\"ocelote\", newdata=nd)\n# ocelote_pred$Species <- \"ocelote\"\n\n\nplot_dat <- rbind(tigrinus_perro_si, tigrinus_perro_no)#, ocelote_pred)\n\nggplot(data=plot_dat, aes(x=rep(x1,2), y=Predicted)) + # change to 3 sp and x2 to distance\n  geom_ribbon(aes(ymin=lower, ymax=upper, fill=Species), alpha=0.3) +\n  geom_line(aes(col=Species)) +\n  labs(x=\"Elevation\", y=\"tigrinus conditional occupancy\") +\n  theme_bw() +\n  theme(panel.grid.major=element_blank(), panel.grid.minor=element_blank(),\n        axis.text=element_text(size=12), axis.title=element_text(size=14),\n        legend.text=element_text(size=12), legend.title=element_text(size=14))"
  },
  {
    "objectID": "index.html#unmarked-2",
    "href": "index.html#unmarked-2",
    "title": "Occupación tigrinus",
    "section": "unmarked",
    "text": "unmarked\n\ncodigo R\n# tabla con solo tiginus\ntigrinus_cocha1 <- all_data_cocha1[[11]]\ntigrinus_cocha2 <- all_data_cocha2[[30]]\n# cargar paquete\nlibrary(unmarked)\n# crear objeto umf\numf_tigrinus_cocha1 <- unmarkedFrameOccu(y=tigrinus_cocha1)\numf_tigrinus_cocha2 <- unmarkedFrameOccu(y=tigrinus_cocha2)\n# verificar datos en grafica\nplot(umf_tigrinus_cocha1)\n\n\n\n\n\ncodigo R\nplot(umf_tigrinus_cocha2)\n\n\n\n\n\ncodigo R\n# tabla con solo perro\nperros_cocha1 <- all_data_cocha1[[2]]\n# cargar paquete\nlibrary(unmarked)\n# crear objeto umf\numf_perros_cocha1 <- unmarkedFrameOccu(y=perros_cocha1)\n# verificar datos en grafica\nplot(umf_perros_cocha1)"
  },
  {
    "objectID": "index.html#modelo-nulo-2",
    "href": "index.html#modelo-nulo-2",
    "title": "Occupación tigrinus",
    "section": "Modelo nulo",
    "text": "Modelo nulo\n\ncodigo R\n# modelo nulo\nfm_tig_cocha1 <- occu(~1 ~1, umf_tigrinus_cocha1)  # fit a model\nfm_tig_cocha2 <- occu(~1 ~1, umf_tigrinus_cocha2)  # fit a model\n\nbackTransform(fm_tig_cocha1, type=\"det\") #estimado lineal de deteccion\n\nBacktransformed linear combination(s) of Detection estimate(s)\nEstimate SE LinComb (Intercept) 0.0171 0.0092 -4.05 1\nTransformation: logistic\n\ncodigo R\nbackTransform(fm_tig_cocha1, type=\"state\") # estimado linel de ocupacion\n\nBacktransformed linear combination(s) of Occupancy estimate(s)\nEstimate SE LinComb (Intercept) 0.263 0.131 -1.03 1\nTransformation: logistic\n\ncodigo R\nbackTransform(fm_tig_cocha2, type=\"det\") #estimado lineal de deteccion\n\nBacktransformed linear combination(s) of Detection estimate(s)\nEstimate SE LinComb (Intercept) 0.0112 0.0052 -4.48 1\nTransformation: logistic\n\ncodigo R\nbackTransform(fm_tig_cocha2, type=\"state\") # estimado linel de ocupacion\n\nBacktransformed linear combination(s) of Occupancy estimate(s)\nEstimate SE LinComb (Intercept) 0.236 0.105 -1.17 1\nTransformation: logistic\n\ncodigo R\n# modelo nulo\nfm_perros_cocha1 <- occu(~1 ~1, umf_perros_cocha1)  # fit a model\n\nbackTransform(fm_perros_cocha1, type=\"det\") #estimado lineal de deteccion\n\nBacktransformed linear combination(s) of Detection estimate(s)\nEstimate SE LinComb (Intercept) 0.00179 0.000896 -6.32 1\nTransformation: logistic\n\ncodigo R\nbackTransform(fm_perros_cocha1, type=\"state\") # estimado linel de ocupacion\n\nBacktransformed linear combination(s) of Occupancy estimate(s)\nEstimate SE LinComb (Intercept) 1 NaN 7.83 1\nTransformation: logistic"
  },
  {
    "objectID": "index.html#modelos-de-co-ocurrencia-2",
    "href": "index.html#modelos-de-co-ocurrencia-2",
    "title": "Occupación tigrinus",
    "section": "MODELOS DE CO-OCURRENCIA",
    "text": "MODELOS DE CO-OCURRENCIA\n\ncodigo R\ndetformulas <- c( \"~1\", \"~1\")#, \"~1\")\n#stateformulas <- c('~elev','~elev', '~elev', \"~1\", \"~1\", \"~1\", \"~0\")# 3 sp\nstateformulas <- c('~elev','~elev', \"~0\")\ny <- list(tigrinus_cocha1, perros_cocha1)# , ocelote_ucu)\nnames(y) <- c(\"tigrinus\", \"perros\")#, \"ocelote\")\n\n\nobs_covs <-as.data.frame(scale(cams_cocha1_sf$dist_casa))\nnames(obs_covs) <- \"dist_casa\"\n\nsite_covs_cocha1 <- data.frame(cams_cocha1_sf[,c('elev','dist_casa')])[,1:2]\nsite_covs_cocha1 <-as.data.frame(apply(site_covs_cocha1,2,scale))\nnames(site_covs_cocha1) <- c(\"elev\", \"dist_casa\")\n\n\numf <-  unmarkedFrameOccuMulti(y=y, \n                              siteCovs=site_covs_cocha1,\n                              obsCovs = NULL)\nplot(umf)\n\n\n\n\n\ncodigo R\n#umf\n\n# occFormulas Length should match number/order of columns in fDesign\numf@fDesign\n\n    f1[tigrinus] f2[perros] f3[tigrinus:perros]\npsi[11] 1 1 1 psi[10] 1 0 0 psi[01] 0 1 0 psi[00] 0 0 0\n\ncodigo R\nfit1 <- occuMulti(detformulas, stateformulas, umf,    \n        method=\"BFGS\", se=TRUE, engine=c(\"C\"), silent=FALSE)\n\nfit1\n\nCall: occuMulti(detformulas = detformulas, stateformulas = stateformulas, data = umf, method = “BFGS”, se = TRUE, engine = c(“C”), silent = FALSE, maxOrder = 2L)\nOccupancy: Estimate SE z P(>|z|) [tigrinus] (Intercept) -1.019 0.695 -1.466 0.1426 [tigrinus] elev -0.254 0.523 -0.486 0.6271 [perros] (Intercept) -2.349 1.070 -2.194 0.0282 [perros] elev -0.961 0.917 -1.048 0.2946\nDetection: Estimate SE z P(>|z|) [tigrinus] (Intercept) -4.06 0.553 -7.35 2.04e-13 [perros] (Intercept) -4.05 0.948 -4.28 1.90e-05\nAIC: 189.2644\n\ncodigo R\n# update model\n# occFormulas2 <- c('~dist_casa', '~dist_casa', '~dist_casa', \"~1\", \"~1\", \"~1\", \"~0\")\noccFormulas2 <- c('~dist_casa', '~dist_casa', \"~0\")\nfit2 <- update(fit1, stateformulas=occFormulas2)\nfit2\n\nCall: occuMulti(detformulas = c(“~1”, “~1”), stateformulas = c(“~dist_casa”, “~dist_casa”, “~0”), data = umf, maxOrder = 2L, method = “BFGS”, se = TRUE, engine = c(“C”), silent = FALSE)\nOccupancy: Estimate SE z P(>|z|) [tigrinus] (Intercept) -1.0281 0.678 -1.516 0.1295 [tigrinus] dist_casa -0.0526 0.472 -0.111 0.9113 [perros] (Intercept) -2.1771 0.969 -2.247 0.0247 [perros] dist_casa -0.5529 0.865 -0.639 0.5226\nDetection: Estimate SE z P(>|z|) [tigrinus] (Intercept) -4.05 0.546 -7.41 1.23e-13 [perros] (Intercept) -4.03 0.930 -4.33 1.47e-05\nAIC: 190.4627\n\nModel Selection\n\ncodigo R\n#List of fitted models\nfl <- fitList(elev=fit1, dist=fit2)\n# coef(fl)\n\n\n###################\n# Model selection #\n###################\nmodSel(fl)\n\n nPars    AIC delta AICwt cumltvWt\nelev 6 189.26 0.00 0.65 0.65 dist 6 190.46 1.20 0.35 1.00\n\ncodigo R\n#############\n# Model fit #\n#############\n# bt <- parboot(fit2, nsim=50) # takes time\n# plot(bt)\n\n\n\nplot predicted marginal occupancy\n\ncodigo R\n#Plot predicted marginal occupancy as a function of disturbance\nr <- range(cams_cocha1_sf$elev)\nx1 <- seq(r[1],r[2],length.out=100)\nx_scale <- (x1-mean(cams_cocha1_sf$elev))/sd(cams_cocha1_sf$elev)\n\nr2 <- range(cams_cocha1_sf$dist_casa)\nx2 <- seq(r2[1],r2[2],length.out=100)\nx2_scale <- (x2-mean(cams_cocha1_sf$dist_casa))/sd(cams_cocha1_sf$dist_casa)\n\nnd <- matrix(NA, 100, 2)\nnd <- data.frame(elev=x_scale, dist_casa= x2_scale)\n\n\n\ntigrinus_pred <- predict(fit2, \"state\", species=\"tigrinus\", newdata=nd)\ntigrinus_pred$Species <- \"tigrinus\"\n\nperros_pred <- predict(fit2, \"state\", species=\"perros\", newdata=nd)\nperros_pred$Species <- \"perros\"\n\n# ocelote_pred <- predict(fit2, \"state\", species=\"ocelote\", newdata=nd)\n# ocelote_pred$Species <- \"ocelote\"\n\n\nplot_dat <- rbind(tigrinus_pred, perros_pred)#, ocelote_pred)\n\nggplot(data=plot_dat, aes(x=rep(x2,2), y=Predicted)) + # change to 3 sp and x2 to distance\n  geom_ribbon(aes(ymin=lower, ymax=upper, fill=Species), alpha=0.3) +\n  geom_line(aes(col=Species)) +\n  labs(x=\"Distancia casa\", y=\"Marginal occupancy\") +\n  theme_bw() +\n  theme(panel.grid.major=element_blank(), panel.grid.minor=element_blank(),\n        axis.text=element_text(size=12), axis.title=element_text(size=14),\n        legend.text=element_text(size=12), legend.title=element_text(size=14))\n\n\n\n\n\n\nplot predicted co-occurrence occupancy\n\ncodigo R\n#Plot predicted marginal occupancy as a function of disturbance\nr <- range(cams_cocha1_sf$elev)\nx1 <- seq(r[1],r[2],length.out=100)\nx_scale <- (x1-mean(cams_cocha1_sf$elev))/sd(cams_cocha1_sf$elev)\n\nr2 <- range(cams_ucu_sf$dist_casa)\nx2 <- seq(r2[1],r2[2],length.out=100)\nx2_scale <- (x2-mean(cams_cocha1_sf$dist_casa))/sd(cams_cocha1_sf$dist_casa)\n\nnd <- matrix(NA, 100, 2)\nnd <- data.frame(elev=x_scale, dist_casa= x2_scale)\n\n\ntigrinus_perros_pred <- predict(fit2, \"state\", \n                         species=c(\"tigrinus\", \"perros\"), newdata=nd)\n\n# tigrinus_pred$Species <- c(\"tigrinus\", \"perros\")\n\n# perros_pred <- predict(fit1, \"state\", species=\"perros\", newdata=nd)\n# perros_pred$Species <- \"perros\"\n\n# ocelote_pred <- predict(fit2, \"state\", species=\"ocelote\", newdata=nd)\n# ocelote_pred$Species <- \"ocelote\"\n\n\nplot_dat <- tigrinus_perros_pred #rbind(tigrinus_pred, perros_pred)#, ocelote_pred)\n\nggplot(data=plot_dat, aes(x=rep(x2), y=Predicted)) + # change to 3 sp and x2 to distance\n  geom_ribbon(aes(ymin=lower, ymax=upper, fill = \"grey50\"), alpha=0.3) +\n  geom_line(aes(y=Predicted), col=\"blue\") +\n  labs(x=\"Distancia casa\", y=\"co-occurence\") +\n  theme_bw() +\n  theme(panel.grid.major=element_blank(), panel.grid.minor=element_blank(),\n        axis.text=element_text(size=12), axis.title=element_text(size=14),\n        legend.text=element_text(size=12), legend.title=element_text(size=14))\n\n\n\n\n\n\nplot predicted conditional occupancy\n\ncodigo R\n#Plot predicted marginal occupancy as a function of disturbance\nr <- range(cams_cocha1_sf$elev)\nx1 <- seq(r[1],r[2],length.out=100)\nx_scale <- (x1-mean(cams_cocha1_sf$elev))/sd(cams_cocha1_sf$elev)\n\nr2 <- range(cams_cocha1_sf$dist_casa)\nx2 <- seq(r2[1],r2[2],length.out=100)\nx2_scale <- (x2-mean(cams_cocha1_sf$dist_casa))/sd(cams_cocha1_sf$dist_casa)\n\nnd <- matrix(NA, 100, 2)\nnd <- data.frame(elev=x_scale, dist_casa= x2_scale)\n\n##### conditional\n\ntigrinus_perro_no <- predict(fit2, \"state\", \n                         species=\"tigrinus\", \n                         cond='-perros',\n                         newdata=nd)\n\ntigrinus_perro_no$Species <- \"perro ausente\"\n\ntigrinus_perro_si <- predict(fit2, \"state\", \n                         species=\"tigrinus\", \n                         cond='perros',\n                         newdata=nd)\n\ntigrinus_perro_si$Species <- \"perro presente\"\n\n\n\n\n\n# perros_pred <- predict(fit1, \"state\", species=\"perros\", newdata=nd)\n# perros_pred$Species <- \"perros\"\n\n# ocelote_pred <- predict(fit2, \"state\", species=\"ocelote\", newdata=nd)\n# ocelote_pred$Species <- \"ocelote\"\n\n\nplot_dat <- rbind(tigrinus_perro_si, tigrinus_perro_no)#, ocelote_pred)\n\nggplot(data=plot_dat, aes(x=rep(x2,2), y=Predicted)) + # change to 3 sp and x2 to distance\n  geom_ribbon(aes(ymin=lower, ymax=upper, fill=Species), alpha=0.3) +\n  geom_line(aes(col=Species)) +\n  labs(x=\"Distancia casa\", y=\"tigrinus conditional occupancy\") +\n  theme_bw() +\n  theme(panel.grid.major=element_blank(), panel.grid.minor=element_blank(),\n        axis.text=element_text(size=12), axis.title=element_text(size=14),\n        legend.text=element_text(size=12), legend.title=element_text(size=14))"
  },
  {
    "objectID": "index.html#crerar-matrices-para-unmarked-3",
    "href": "index.html#crerar-matrices-para-unmarked-3",
    "title": "Occupación tigrinus",
    "section": "crerar matrices para unmarked",
    "text": "crerar matrices para unmarked\n\n\ncodigo R\n############# start spatial part\n#### make sf object\nlafe_sf <- st_as_sf(lafe_data, coords = c(\"Longitude\", \"Latitude\"), crs = \"EPSG:4326\")\n\n\n# get centroid. 1st bbox, make pol\ncentroid_lafe <- st_centroid(st_as_sfc(st_bbox(lafe_sf)))\n# get altitude\nelev_lafe_full <- elevation_3s(centroid_lafe[[1]][1], centroid_lafe[[1]][2], \n                         path=\"C:/CodigoR/tigrinus2/raster\")\n\n# elev_ucu_full_ras <- elev_ucu_full %>% raster()\n\n# st_bbox(ucumari_sf) # notice order xmin, xmax, ymin, ymax\next_lafe <- ext(-75.49, -75.179,  5.81,    6.03 )\nelev_lafe <- crop(elev_lafe_full, ext_lafe) \n\n# convert from terra to raster\nelev_lafe_ras <-  elev_lafe %>% raster()\n\n# get uniques\ncams_lafe <-lafe_data %>% dplyr::select(c(\"Longitude\", \"Latitude\", \"camera_trap\")) %>% distinct()\n#### make sf object\ncams_lafe_sf <- st_as_sf(cams_lafe, coords = c(\"Longitude\", \"Latitude\"), crs = \"EPSG:4326\")\n\n# extract values from raster using altitude\ncams_lafe_sf$elev <- extract(elev_lafe_ras, cams_lafe_sf)\n\n############## make distance map\n# # Convert points to sp spatialpointdatafram\n# casas_points <- as(casas_sf, \"Spatial\")\n# # Projection\n# # Be sure to have rgdal first installed.\n# casas_points_utm <- spTransform(casas_points, CRS('+init=epsg:32718'))\n# # convert to ppp\n# casas_points_ppp <- as(as(casas_points_utm, \"SpatialPoints\"), \"ppp\")\n# # distance\n# casas_distance <- distmap(casas_points_ppp)\n\n####### extract distance \n# \n# casas_distance_ras<- raster(casas_distance) # convert raster\n# crs(casas_distance_ras) <- '+init=epsg:32718' # add crs\n# \n# # project raster\n# casa_distance <- projectRaster(casas_distance_ras, crs = crs(casas_points))\n\n# cams_ucu_sf$dist_casa <- raster::extract(casas_distance_ras, cams_ucu_sf)\ncams_lafe_sf$dist_casa <- raster::extract(casa_distance, cams_lafe_sf) # also works\n\n\n# plot map\nmapview(elev_lafe_ras) + mapview(cams_lafe_sf[\"camera_trap\"]) \n\n\n\n\n\n\n\ncodigo R\n############### end spatial part\n\n#lafe_data$binomial <- str_c (lafe_data$Genus, \"_\", lafe_data$Species)\n\n#funcion para crear todas las tablas de datos\nall_data_lafe <-  f.matrix.creator2 (lafe_data)\n\n# names(all_data) # ver lass especies y en que lista esta cada una\n# kable(names(all_data)) # html table\n# Tigrinus es lista 3\n# perro es 2\n\ndatatable(\ndata = as.data.frame(names(all_data_lafe)),\ncaption = \"Especies La Fe\",\nfilter = \"top\"\n)"
  },
  {
    "objectID": "index.html#unmarked-3",
    "href": "index.html#unmarked-3",
    "title": "Occupación tigrinus",
    "section": "unmarked",
    "text": "unmarked\n\ncodigo R\n# tabla con solo tiginus\ntigrinus_lafe <- all_data_lafe[[3]]\n\n# colapsa a una semana take time\ntigrinus_lafe_48<-f.shrink.matrix.to26(matrix = all_data_lafe[[3]])\n\n# crear objeto umf\numf_tigrinus_lafe <- unmarkedFrameOccu(y=tigrinus_lafe_48)\n# verificar datos en grafica\n# plot(umf_tigrinus_ucu)\n\n# tabla con solo perros\nperros_lafe <- all_data_lafe[[2]]\n\n# colapsa a una semana take time\nperros_lafe_48<-f.shrink.matrix.to26(matrix = all_data_lafe[[2]])\n# crear objeto umf\numf_perros_lafe <- unmarkedFrameOccu(y=perros_lafe_48)\n# verificar datos en grafica\n# plot(umf_perros_ucu)\n\n# # tabla con solo ocelote\n# ocelote_lafe <- all_data[[16]]\n# # crear objeto umf\n# umf_ocelote_lafe <- unmarkedFrameOccu(y=ocelote_ucu)\n# # verificar datos en grafica\n# # plot(umf_ocelote_ucu)"
  },
  {
    "objectID": "index.html#modelo-nulo-3",
    "href": "index.html#modelo-nulo-3",
    "title": "Occupación tigrinus",
    "section": "Modelo nulo",
    "text": "Modelo nulo\n\ncodigo R\n# modelo nulo tigrinus\nfm_tig_lafe <- occu(~1 ~1, umf_tigrinus_lafe)  # fit a model\n\nbackTransform(fm_tig_lafe, type=\"det\") #estimado lineal de deteccion\n\nBacktransformed linear combination(s) of Detection estimate(s)\nEstimate SE LinComb (Intercept) 0.129 0.0797 -1.91 1\nTransformation: logistic\n\ncodigo R\nbackTransform(fm_tig_lafe, type=\"state\") # estimado linel de ocupacion\n\nBacktransformed linear combination(s) of Occupancy estimate(s)\nEstimate SE LinComb (Intercept) 0.513 0.293 0.0508 1\nTransformation: logistic\n\ncodigo R\n# modelo nulo perro\nfm_perros_lafe <- occu(~1 ~1, umf_perros_lafe)  # fit a model\n\nbackTransform(fm_perros_lafe, type=\"det\") #estimado lineal de deteccion\n\nBacktransformed linear combination(s) of Detection estimate(s)\nEstimate SE LinComb (Intercept) 0.247 0.06 -1.11 1\nTransformation: logistic\n\ncodigo R\nbackTransform(fm_perros_lafe, type=\"state\") # estimado linel de ocupacion\n\nBacktransformed linear combination(s) of Occupancy estimate(s)\nEstimate SE LinComb (Intercept) 0.748 0.171 1.09 1\nTransformation: logistic\n\ncodigo R\n# # modelo nulo ocelote\n# fm_ocelote_lafe <- occu(~1 ~1, umf_ocelote_lafe)  # fit a model\n# \n# backTransform(fm_ocelote_lafe, type=\"det\") #estimado lineal de deteccion\n# backTransform(fm_ocelote_lafe, type=\"state\") # estimado linel de ocupacion\n#"
  },
  {
    "objectID": "index.html#modelos-de-co-ocurrencia-3",
    "href": "index.html#modelos-de-co-ocurrencia-3",
    "title": "Occupación tigrinus",
    "section": "MODELOS DE CO-OCURRENCIA",
    "text": "MODELOS DE CO-OCURRENCIA\n\ncodigo R\ndetformulas <- c( \"~1\", \"~1\")#, \"~1\")\n#stateformulas <- c('~elev','~elev', '~elev', \"~1\", \"~1\", \"~1\", \"~0\")# 3 sp\nstateformulas <- c('~elev','~elev', \"~0\")\ny <- list(tigrinus_lafe, perros_lafe)# , ocelote_lafe)\nnames(y) <- c(\"tigrinus\", \"perros\")#, \"ocelote\")\n\n\nobs_covs <-as.data.frame(scale(cams_lafe_sf$dist_casa))\nnames(obs_covs) <- \"dist_casa\"\n\nsite_covs_lafe <- data.frame(cams_lafe_sf[,c('elev','dist_casa')])[,1:2]\nsite_covs_lafe <-as.data.frame(apply(site_covs_lafe,2,scale))\nnames(site_covs_lafe) <- c(\"elev\", \"dist_casa\")\n\n\numf <-  unmarkedFrameOccuMulti(y=y, \n                              siteCovs=site_covs_lafe,\n                              obsCovs = NULL)\nplot(umf)\n\n\n\n\n\ncodigo R\n#umf\n\n# occFormulas Length should match number/order of columns in fDesign\numf@fDesign\n\n    f1[tigrinus] f2[perros] f3[tigrinus:perros]\npsi[11] 1 1 1 psi[10] 1 0 0 psi[01] 0 1 0 psi[00] 0 0 0\n\ncodigo R\nfit1 <- occuMulti(detformulas, stateformulas, umf,     \n        method=\"BFGS\", se=TRUE, engine=c(\"C\"), silent=FALSE)\n\nfit1\n\nCall: occuMulti(detformulas = detformulas, stateformulas = stateformulas, data = umf, method = “BFGS”, se = TRUE, engine = c(“C”), silent = FALSE, maxOrder = 2L)\nOccupancy: Estimate SE z P(>|z|) [tigrinus] (Intercept) -0.362 0.738 -0.491 0.624 [tigrinus] elev 0.179 0.589 0.304 0.761 [perros] (Intercept) 12.205 NaN NaN NaN [perros] elev -2.326 NaN NaN NaN\nDetection: Estimate SE z P(>|z|) [tigrinus] (Intercept) -3.65 0.472 -7.73 1.06e-14 [perros] (Intercept) -3.30 0.167 -19.69 2.46e-86\nAIC: 449.8858\n\ncodigo R\n# update model\n# occFormulas2 <- c('~dist_casa', '~dist_casa', '~dist_casa', \"~1\", \"~1\", \"~1\", \"~0\")\noccFormulas2 <- c('~dist_casa', '~dist_casa', \"~1\")\nfit2 <- update(fit1, stateformulas=occFormulas2)\nfit2\n\nCall: occuMulti(detformulas = c(“~1”, “~1”), stateformulas = c(“~dist_casa”, “~dist_casa”, “~1”), data = umf, maxOrder = 2L, method = “BFGS”, se = TRUE, engine = c(“C”), silent = FALSE)\nOccupancy: Estimate SE z P(>|z|) [tigrinus] (Intercept) -2.991 NaN NaN NaN [tigrinus] dist_casa -0.545 0.693 -0.786 0.432 [perros] (Intercept) 12.387 NaN NaN NaN [perros] dist_casa 2.229 NaN NaN NaN [tigrinus:perros] (Intercept) 2.674 NaN NaN NaN\nDetection: Estimate SE z P(>|z|) [tigrinus] (Intercept) -3.69 0.488 -7.56 3.99e-14 [perros] (Intercept) -3.30 0.167 -19.69 2.48e-86\nAIC: 451.2344\n\nModel Selection\n\ncodigo R\n#List of fitted models\nfl <- fitList(elev=fit1, dist=fit2)\n# coef(fl)\n\n###################\n# Model selection #\n###################\n\nmodSel(fl)\n\n nPars    AIC delta AICwt cumltvWt\nelev 6 449.89 0.00 0.66 0.66 dist 7 451.23 1.35 0.34 1.00\n\ncodigo R\n#############\n# Model fit #\n#############\n\n# bt <- parboot(fit1, nsim=50) # takes time best model\n# plot(bt)\n\n\n\nplot predicted marginal occupancy\n\ncodigo R\n#Plot predicted marginal occupancy as a function of disturbance\nr <- range(cams_lafe_sf$elev)\nx1 <- seq(r[1],r[2],length.out=100)\nx_scale <- (x1-mean(cams_lafe_sf$elev))/sd(cams_lafe_sf$elev)\n\nr2 <- range(cams_lafe_sf$dist_casa)\nx2 <- seq(r2[1],r2[2],length.out=100)\nx2_scale <- (x2-mean(cams_lafe_sf$dist_casa))/sd(cams_lafe_sf$dist_casa)\n\nnd <- matrix(NA, 100, 2)\nnd <- data.frame(elev=x_scale, dist_casa= x2_scale)\n\n\n\ntigrinus_pred <- predict(fit1, \"state\", species=\"tigrinus\", newdata=nd)\ntigrinus_pred$Species <- \"tigrinus\"\n\nperros_pred <- predict(fit1, \"state\", species=\"perros\", newdata=nd)\nperros_pred$Species <- \"perros\"\n\n# ocelote_pred <- predict(fit2, \"state\", species=\"ocelote\", newdata=nd)\n# ocelote_pred$Species <- \"ocelote\"\n\n\nplot_dat <- rbind(tigrinus_pred, perros_pred)#, ocelote_pred)\n\nggplot(data=plot_dat, aes(x=rep(x1,2), y=Predicted)) + # change to 3 sp and x2 to distance\n  geom_ribbon(aes(ymin=lower, ymax=upper, fill=Species), alpha=0.3) +\n  geom_line(aes(col=Species)) +\n  labs(x=\"Elev\", y=\"Marginal occupancy\") +\n  theme_bw() +\n  theme(panel.grid.major=element_blank(), panel.grid.minor=element_blank(),\n        axis.text=element_text(size=12), axis.title=element_text(size=14),\n        legend.text=element_text(size=12), legend.title=element_text(size=14))\n\n\n\nplot predicted co-occurrence occupancy\n\ncodigo R\n#Plot predicted marginal occupancy as a function of disturbance\nr <- range(cams_huila_sf$elev)\nx1 <- seq(r[1],r[2],length.out=100)\nx_scale <- (x1-mean(cams_huila_sf$elev))/sd(cams_huila_sf$elev)\n\nr2 <- range(cams_huila_sf$dist_casa)\nx2 <- seq(r2[1],r2[2],length.out=100)\nx2_scale <- (x2-mean(cams_huila_sf$dist_casa))/sd(cams_huila_sf$dist_casa)\n\nnd <- matrix(NA, 100, 2)\nnd <- data.frame(elev=x_scale, dist_casa= x2_scale)\n\n\ntigrinus_perros_pred <- predict(fit1, \"state\", \n                         species=c(\"tigrinus\", \"perros\"), newdata=nd)\n\n# tigrinus_pred$Species <- c(\"tigrinus\", \"perros\")\n\n# perros_pred <- predict(fit1, \"state\", species=\"perros\", newdata=nd)\n# perros_pred$Species <- \"perros\"\n\n# ocelote_pred <- predict(fit2, \"state\", species=\"ocelote\", newdata=nd)\n# ocelote_pred$Species <- \"ocelote\"\n\n\nplot_dat <- tigrinus_perros_pred #rbind(tigrinus_pred, perros_pred)#, ocelote_pred)\n\nggplot(data=plot_dat, aes(x=rep(x1), y=Predicted)) + # change to 3 sp and x2 to distance\n  geom_ribbon(aes(ymin=lower, ymax=upper, fill = \"grey50\"), alpha=0.3) +\n  geom_line(aes(y=Predicted), col=\"blue\") +\n  labs(x=\"Elev\", y=\"co-occurence\") +\n  theme_bw() +\n  theme(panel.grid.major=element_blank(), panel.grid.minor=element_blank(),\n        axis.text=element_text(size=12), axis.title=element_text(size=14),\n        legend.text=element_text(size=12), legend.title=element_text(size=14))\n\n\n\nplot predicted conditional occupancy\n\ncodigo R\n#Plot predicted marginal occupancy as a function of disturbance\nr <- range(cams_lafe_sf$elev)\nx1 <- seq(r[1],r[2],length.out=100)\nx_scale <- (x1-mean(cams_lafe_sf$elev))/sd(cams_lafe_sf$elev)\n\nr2 <- range(cams_lafe_sf$dist_casa)\nx2 <- seq(r2[1],r2[2],length.out=100)\nx2_scale <- (x2-mean(cams_lafe_sf$dist_casa))/sd(cams_lafe_sf$dist_casa)\n\nnd <- matrix(NA, 100, 2)\nnd <- data.frame(elev=x_scale, dist_casa= x2_scale)\n\n##### conditional\n\ntigrinus_perro_no <- predict(fit1, \"state\", \n                         species=\"tigrinus\", \n                         cond='-perros',\n                         newdata=nd)\n\ntigrinus_perro_no$Species <- \"perro ausente\"\n\ntigrinus_perro_si <- predict(fit1, \"state\", \n                         species=\"tigrinus\", \n                         cond='perros',\n                         newdata=nd)\n\ntigrinus_perro_si$Species <- \"perro presente\"\n\n\n\n\n\n# perros_pred <- predict(fit1, \"state\", species=\"perros\", newdata=nd)\n# perros_pred$Species <- \"perros\"\n\n# ocelote_pred <- predict(fit2, \"state\", species=\"ocelote\", newdata=nd)\n# ocelote_pred$Species <- \"ocelote\"\n\n\nplot_dat <- rbind(tigrinus_perro_si, tigrinus_perro_no)#, ocelote_pred)\n\nggplot(data=plot_dat, aes(x=rep(x1,2), y=Predicted)) + # change to 3 sp and x2 to distance\n  geom_ribbon(aes(ymin=lower, ymax=upper, fill=Species), alpha=0.3) +\n  geom_line(aes(col=Species)) +\n  labs(x=\"Distancia Casa\", y=\"tigrinus conditional occupancy\") +\n  theme_bw() +\n  theme(panel.grid.major=element_blank(), panel.grid.minor=element_blank(),\n        axis.text=element_text(size=12), axis.title=element_text(size=14),\n        legend.text=element_text(size=12), legend.title=element_text(size=14))"
  },
  {
    "objectID": "index.html#crerar-matrices-para-unmarked-4",
    "href": "index.html#crerar-matrices-para-unmarked-4",
    "title": "Occupación tigrinus",
    "section": "crerar matrices para unmarked",
    "text": "crerar matrices para unmarked\n\n\ncodigo R\n############# start spatial part\n#### make sf object\nriogrande_sf <- st_as_sf(riogrande_data, coords = c(\"Longitude\", \"Latitude\"), crs = \"EPSG:4326\")\n\n\n# get centroid. 1st bbox, make pol\ncentroid_riogrande <- st_centroid(st_as_sfc(st_bbox(riogrande_sf)))\n# get altitude\nelev_riogrande_full <- elevation_3s(centroid_riogrande[[1]][1], centroid_riogrande[[1]][2], \n                         path=\"C:/CodigoR/tigrinus2/raster\")\n\n# elev_ucu_full_ras <- elev_ucu_full %>% raster()\n\n# st_bbox(ucumari_sf) # notice order xmin, xmax, ymin, ymax\next_riogrande <- ext(-75.94, -75.275,  6.27,    6.896 )\nelev_riogrande <- crop(elev_riogrande_full, ext_riogrande) \n\n# convert from terra to raster\nelev_riogrande_ras <-  elev_riogrande %>% raster()\n\n# get uniques\ncams_riogrande <-riogrande_data %>% dplyr::select(c(\"Longitude\", \"Latitude\", \"camera_trap\")) %>% distinct()\n#### make sf object\ncams_riogrande_sf <- st_as_sf(cams_riogrande, coords = c(\"Longitude\", \"Latitude\"), crs = \"EPSG:4326\")\n\n# extract values from raster using altitude\ncams_riogrande_sf$elev <- extract(elev_riogrande_ras, cams_riogrande_sf)\n\n############## make distance map\n# # Convert points to sp spatialpointdatafram\n# casas_points <- as(casas_sf, \"Spatial\")\n# # Projection\n# # Be sure to have rgdal first installed.\n# casas_points_utm <- spTransform(casas_points, CRS('+init=epsg:32718'))\n# # convert to ppp\n# casas_points_ppp <- as(as(casas_points_utm, \"SpatialPoints\"), \"ppp\")\n# # distance\n# casas_distance <- distmap(casas_points_ppp)\n\n####### extract distance \n# \n# casas_distance_ras<- raster(casas_distance) # convert raster\n# crs(casas_distance_ras) <- '+init=epsg:32718' # add crs\n# \n# # project raster\n# casa_distance <- projectRaster(casas_distance_ras, crs = crs(casas_points))\n\n# cams_ucu_sf$dist_casa <- raster::extract(casas_distance_ras, cams_ucu_sf)\ncams_riogrande_sf$dist_casa <- raster::extract(casa_distance, cams_riogrande_sf) # also works\n\n\n# plot map\nmapview(elev_riogrande_ras) + mapview(cams_riogrande_sf[\"camera_trap\"]) \n\n\n\n\n\n\n\ncodigo R\n############### end spatial part\n\n#riogrande_data$binomial <- str_c (riogrande_data$Genus, \"_\", riogrande_data$Species)\n\n#funcion para crear todas las tablas de datos\nall_data_riogrande <-  f.matrix.creator2 (riogrande_data)\n\n# names(all_data) # ver lass especies y en que lista esta cada una\n# kable(names(all_data)) # html table\n# Tigrinus es lista 11\n# perro es 1\n\ndatatable(\ndata = as.data.frame(names(all_data_riogrande)),\ncaption = \"Especies Rio Grande\",\nfilter = \"top\"\n)"
  },
  {
    "objectID": "index.html#unmarked-4",
    "href": "index.html#unmarked-4",
    "title": "Occupación tigrinus",
    "section": "unmarked",
    "text": "unmarked\n\ncodigo R\n# colapsa a una semana take time\ntigrinus_riogrande_48<-f.shrink.matrix.to26(matrix = all_data_riogrande[[11]])\n\n# tabla con solo tiginus\ntigrinus_riogrande <- tigrinus_riogrande_48 #all_data_riogrande[[11]]\n\n\n\n# crear objeto umf\numf_tigrinus_riogrande <- unmarkedFrameOccu(y=tigrinus_riogrande)\n# verificar datos en grafica\n# plot(umf_tigrinus_ucu)\n\n# colapsa a una semana take time\nperros_riogrande_48<-f.shrink.matrix.to26(matrix = all_data_riogrande[[1]])\n\n# tabla con solo perros\nperros_riogrande <- perros_riogrande_48 #all_data_riogrande[[1]]\n# crear objeto umf\numf_perros_riogrande <- unmarkedFrameOccu(y=perros_riogrande)\n# verificar datos en grafica\n# plot(umf_perros_ucu)\n\n# # tabla con solo ocelote\n# ocelote_riogrande <- all_data[[16]]\n# # crear objeto umf\n# umf_ocelote_riogrande <- unmarkedFrameOccu(y=ocelote_ucu)\n# # verificar datos en grafica\n# # plot(umf_ocelote_ucu)"
  },
  {
    "objectID": "index.html#modelo-nulo-4",
    "href": "index.html#modelo-nulo-4",
    "title": "Occupación tigrinus",
    "section": "Modelo nulo",
    "text": "Modelo nulo\n\ncodigo R\n# modelo nulo tigrinus\nfm_tig_riogrande <- occu(~1 ~1, umf_tigrinus_riogrande)  # fit a model\n\nbackTransform(fm_tig_riogrande, type=\"det\") #estimado lineal de deteccion\n\nBacktransformed linear combination(s) of Detection estimate(s)\nEstimate SE LinComb (Intercept) 0.225 0.102 -1.24 1\nTransformation: logistic\n\ncodigo R\nbackTransform(fm_tig_riogrande, type=\"state\") # estimado linel de ocupacion\n\nBacktransformed linear combination(s) of Occupancy estimate(s)\nEstimate SE LinComb (Intercept) 0.236 0.111 -1.18 1\nTransformation: logistic\n\ncodigo R\n# modelo nulo perro\nfm_perros_riogrande <- occu(~1 ~1, umf_perros_riogrande)  # fit a model\n\nbackTransform(fm_perros_riogrande, type=\"det\") #estimado lineal de deteccion\n\nBacktransformed linear combination(s) of Detection estimate(s)\nEstimate SE LinComb (Intercept) 0.118 0.0936 -2.01 1\nTransformation: logistic\n\ncodigo R\nbackTransform(fm_perros_riogrande, type=\"state\") # estimado linel de ocupacion\n\nBacktransformed linear combination(s) of Occupancy estimate(s)\nEstimate SE LinComb (Intercept) 0.482 0.33 -0.0723 1\nTransformation: logistic\n\ncodigo R\n# # modelo nulo ocelote\n# fm_ocelote_riogrande <- occu(~1 ~1, umf_ocelote_riogrande)  # fit a model\n# \n# backTransform(fm_ocelote_riogrande, type=\"det\") #estimado lineal de deteccion\n# backTransform(fm_ocelote_riogrande, type=\"state\") # estimado linel de ocupacion\n#"
  },
  {
    "objectID": "index.html#modelos-de-co-ocurrencia-4",
    "href": "index.html#modelos-de-co-ocurrencia-4",
    "title": "Occupación tigrinus",
    "section": "MODELOS DE CO-OCURRENCIA",
    "text": "MODELOS DE CO-OCURRENCIA\n\ncodigo R\ndetformulas <- c( \"~1\", \"~1\")#, \"~1\")\n#stateformulas <- c('~elev','~elev', '~elev', \"~1\", \"~1\", \"~1\", \"~0\")# 3 sp\nstateformulas <- c('~elev','~elev', \"~0\")\ny <- list(tigrinus_riogrande, perros_riogrande)# , ocelote_riogrande)\nnames(y) <- c(\"tigrinus\", \"perros\")#, \"ocelote\")\n\n\nobs_covs <-as.data.frame(scale(cams_riogrande_sf$dist_casa))\nnames(obs_covs) <- \"dist_casa\"\n\nsite_covs_riogrande <- data.frame(cams_riogrande_sf[,c('elev','dist_casa')])[,1:2]\nsite_covs_riogrande <-as.data.frame(apply(site_covs_riogrande,2,scale))\nnames(site_covs_riogrande) <- c(\"elev\", \"dist_casa\")\n\n\numf <-  unmarkedFrameOccuMulti(y=y, \n                              siteCovs=site_covs_riogrande,\n                              obsCovs = NULL)\nplot(umf)\n\n\n\n\n\ncodigo R\n#umf\n\n# occFormulas Length should match number/order of columns in fDesign\numf@fDesign\n\n    f1[tigrinus] f2[perros] f3[tigrinus:perros]\npsi[11] 1 1 1 psi[10] 1 0 0 psi[01] 0 1 0 psi[00] 0 0 0\n\ncodigo R\nfit1 <- occuMulti(detformulas, stateformulas, umf,    \n        method=\"BFGS\", se=TRUE, engine=c(\"C\"), silent=FALSE)\n\nfit1\n\nCall: occuMulti(detformulas = detformulas, stateformulas = stateformulas, data = umf, method = “BFGS”, se = TRUE, engine = c(“C”), silent = FALSE, maxOrder = 2L)\nOccupancy: Estimate SE z P(>|z|) [tigrinus] (Intercept) -0.888 0.763 -1.164 0.245 [tigrinus] elev -2.289 1.549 -1.478 0.140 [perros] (Intercept) -0.498 0.861 -0.578 0.564 [perros] elev -0.579 0.655 -0.884 0.377\nDetection: Estimate SE z P(>|z|) [tigrinus] (Intercept) -1.48 0.592 -2.49 0.0126 [perros] (Intercept) -1.70 0.713 -2.39 0.0170\nAIC: 143.037\n\ncodigo R\n# update model\n# occFormulas2 <- c('~dist_casa', '~dist_casa', '~dist_casa', \"~1\", \"~1\", \"~1\", \"~0\")\noccFormulas2 <- c('~dist_casa', '~dist_casa', \"~0\")\nfit2 <- update(fit1, stateformulas=occFormulas2)\nfit2\n\nCall: occuMulti(detformulas = c(“~1”, “~1”), stateformulas = c(“~dist_casa”, “~dist_casa”, “~0”), data = umf, maxOrder = 2L, method = “BFGS”, se = TRUE, engine = c(“C”), silent = FALSE)\nOccupancy: Estimate SE z P(>|z|) [tigrinus] (Intercept) -1.211 0.632 -1.916 0.0554 [tigrinus] dist_casa -0.364 1.029 -0.354 0.7237 [perros] (Intercept) -0.315 1.114 -0.283 0.7772 [perros] dist_casa 1.859 2.907 0.639 0.5225\nDetection: Estimate SE z P(>|z|) [tigrinus] (Intercept) -1.23 0.584 -2.11 0.0349 [perros] (Intercept) -1.69 0.721 -2.34 0.0190\nAIC: 143.4188\n\nModel Selection\n\ncodigo R\n#List of fitted models\nfl <- fitList(elev=fit1, dist=fit2)\n# coef(fl)\n\n###################\n# Model selection #\n###################\n\nmodSel(fl)\n\n nPars    AIC delta AICwt cumltvWt\nelev 6 143.04 0.00 0.55 0.55 dist 6 143.42 0.38 0.45 1.00\n\ncodigo R\n#############\n# Model fit #\n#############\n\n# bt <- parboot(fit1, nsim=50) # takes time best model\n# plot(bt)\n\n\n\nplot predicted marginal occupancy\n\ncodigo R\n#Plot predicted marginal occupancy as a function of disturbance\nr <- range(cams_riogrande_sf$elev)\nx1 <- seq(r[1],r[2],length.out=100)\nx_scale <- (x1-mean(cams_riogrande_sf$elev))/sd(cams_riogrande_sf$elev)\n\nr2 <- range(cams_riogrande_sf$dist_casa)\nx2 <- seq(r2[1],r2[2],length.out=100)\nx2_scale <- (x2-mean(cams_riogrande_sf$dist_casa))/sd(cams_riogrande_sf$dist_casa)\n\nnd <- matrix(NA, 100, 2)\nnd <- data.frame(elev=x_scale, dist_casa= x2_scale)\n\n\n\ntigrinus_pred <- predict(fit2, \"state\", species=\"tigrinus\", newdata=nd)\ntigrinus_pred$Species <- \"tigrinus\"\n\nperros_pred <- predict(fit2, \"state\", species=\"perros\", newdata=nd)\nperros_pred$Species <- \"perros\"\n\n# ocelote_pred <- predict(fit2, \"state\", species=\"ocelote\", newdata=nd)\n# ocelote_pred$Species <- \"ocelote\"\n\n\nplot_dat <- rbind(tigrinus_pred, perros_pred)#, ocelote_pred)\n\nggplot(data=plot_dat, aes(x=rep(x2,2), y=Predicted)) + # change to 3 sp and x2 to distance\n  geom_ribbon(aes(ymin=lower, ymax=upper, fill=Species), alpha=0.3) +\n  geom_line(aes(col=Species)) +\n  labs(x=\"Distancia Casa\", y=\"Marginal occupancy\") +\n  theme_bw() +\n  theme(panel.grid.major=element_blank(), panel.grid.minor=element_blank(),\n        axis.text=element_text(size=12), axis.title=element_text(size=14),\n        legend.text=element_text(size=12), legend.title=element_text(size=14))\n\n\n\n\n\n\nplot predicted co-occurrence occupancy\n\ncodigo R\n#Plot predicted marginal occupancy as a function of disturbance\nr <- range(cams_lafe_sf$elev)\nx1 <- seq(r[1],r[2],length.out=100)\nx_scale <- (x1-mean(cams_lafe_sf$elev))/sd(cams_lafe_sf$elev)\n\nr2 <- range(cams_lafe_sf$dist_casa)\nx2 <- seq(r2[1],r2[2],length.out=100)\nx2_scale <- (x2-mean(cams_lafe_sf$dist_casa))/sd(cams_lafe_sf$dist_casa)\n\nnd <- matrix(NA, 100, 2)\nnd <- data.frame(elev=x_scale, dist_casa= x2_scale)\n\n\ntigrinus_perros_pred <- predict(fit2, \"state\", \n                         species=c(\"tigrinus\", \"perros\"), newdata=nd)\n\n# tigrinus_pred$Species <- c(\"tigrinus\", \"perros\")\n\n# perros_pred <- predict(fit1, \"state\", species=\"perros\", newdata=nd)\n# perros_pred$Species <- \"perros\"\n\n# ocelote_pred <- predict(fit2, \"state\", species=\"ocelote\", newdata=nd)\n# ocelote_pred$Species <- \"ocelote\"\n\n\nplot_dat <- tigrinus_perros_pred #rbind(tigrinus_pred, perros_pred)#, ocelote_pred)\n\nggplot(data=plot_dat, aes(x=rep(x2), y=Predicted)) + # change to 3 sp and x2 to distance\n  geom_ribbon(aes(ymin=lower, ymax=upper, fill = \"grey50\"), alpha=0.3) +\n  geom_line(aes(y=Predicted), col=\"blue\") +\n  labs(x=\"Distancia Casa\", y=\"co-occurence\") +\n  theme_bw() +\n  theme(panel.grid.major=element_blank(), panel.grid.minor=element_blank(),\n        axis.text=element_text(size=12), axis.title=element_text(size=14),\n        legend.text=element_text(size=12), legend.title=element_text(size=14))\n\n\n\n\n\n\nplot predicted conditional occupancy\n\ncodigo R\n#Plot predicted marginal occupancy as a function of disturbance\nr <- range(cams_riogrande_sf$elev)\nx1 <- seq(r[1],r[2],length.out=100)\nx_scale <- (x1-mean(cams_riogrande_sf$elev))/sd(cams_riogrande_sf$elev)\n\nr2 <- range(cams_riogrande_sf$dist_casa)\nx2 <- seq(r2[1],r2[2],length.out=100)\nx2_scale <- (x2-mean(cams_riogrande_sf$dist_casa))/sd(cams_riogrande_sf$dist_casa)\n\nnd <- matrix(NA, 100, 2)\nnd <- data.frame(elev=x_scale, dist_casa= x2_scale)\n\n##### conditional\n\ntigrinus_perro_no <- predict(fit2, \"state\", \n                         species=\"tigrinus\", \n                         cond='-perros',\n                         newdata=nd)\n\ntigrinus_perro_no$Species <- \"perro ausente\"\n\ntigrinus_perro_si <- predict(fit2, \"state\", \n                         species=\"tigrinus\", \n                         cond='perros',\n                         newdata=nd)\n\ntigrinus_perro_si$Species <- \"perro presente\"\n\n\n\n\n\n# perros_pred <- predict(fit1, \"state\", species=\"perros\", newdata=nd)\n# perros_pred$Species <- \"perros\"\n\n# ocelote_pred <- predict(fit2, \"state\", species=\"ocelote\", newdata=nd)\n# ocelote_pred$Species <- \"ocelote\"\n\n\nplot_dat <- rbind(tigrinus_perro_si, tigrinus_perro_no)#, ocelote_pred)\n\nggplot(data=plot_dat, aes(x=rep(x1,2), y=Predicted)) + # change to 3 sp and x2 to distance\n  geom_ribbon(aes(ymin=lower, ymax=upper, fill=Species), alpha=0.3) +\n  geom_line(aes(col=Species)) +\n  labs(x=\"Distancia Casa\", y=\"tigrinus conditional occupancy\") +\n  theme_bw() +\n  theme(panel.grid.major=element_blank(), panel.grid.minor=element_blank(),\n        axis.text=element_text(size=12), axis.title=element_text(size=14),\n        legend.text=element_text(size=12), legend.title=element_text(size=14))"
  },
  {
    "objectID": "index.html#modelos-de-co-ocurrencia-5",
    "href": "index.html#modelos-de-co-ocurrencia-5",
    "title": "Occupación tigrinus",
    "section": "MODELOS DE CO-OCURRENCIA",
    "text": "MODELOS DE CO-OCURRENCIA\n\ncodigo R\ndetformulas <- c( \"~1\", \"~1\")#, \"~1\")\n#stateformulas <- c('~elev','~elev', '~elev', \"~1\", \"~1\", \"~1\", \"~0\")# 3 sp\nstateformulas <- c('~elev','~elev', \"~0\")\ny_full <- list(tigrinus_full_26, perros_full_26)# , ocelote_ucu)\nnames(y_full) <- c(\"tigrinus\", \"perros\")#, \"ocelote\")\n\n\n# obs_covs <-as.data.frame(scale(cams_ucu_sf$dist_casa))\n# names(obs_covs) <- \"dist_casa\"\n\n\numf <-  unmarkedFrameOccuMulti(y=y_full, \n                              siteCovs=site_covs_full,\n                              obsCovs = NULL)\nplot(umf)\n\n\n\n\n\ncodigo R\n#umf\n\n# occFormulas Length should match number/order of columns in fDesign\numf@fDesign\n\n    f1[tigrinus] f2[perros] f3[tigrinus:perros]\npsi[11] 1 1 1 psi[10] 1 0 0 psi[01] 0 1 0 psi[00] 0 0 0\n\ncodigo R\nfit1 <- occuMulti(detformulas, stateformulas, umf,    \n        method=\"BFGS\", se=TRUE, engine=c(\"C\"), silent=FALSE)\n\nfit1\n\nCall: occuMulti(detformulas = detformulas, stateformulas = stateformulas, data = umf, method = “BFGS”, se = TRUE, engine = c(“C”), silent = FALSE, maxOrder = 2L)\nOccupancy: Estimate SE z P(>|z|) [tigrinus] (Intercept) 4.62 3.12 1.48054 0.139 [tigrinus] elev -3.49 2.19 -1.59028 0.112 [perros] (Intercept) 28.26 16777.22 0.00168 0.999 [perros] elev -1.54 3.17 -0.48613 0.627\nDetection: Estimate SE z P(>|z|) [tigrinus] (Intercept) -3.72 0.164 -22.7 1.09e-113 [perros] (Intercept) -4.55 0.197 -23.1 1.32e-117\nAIC: 775.9273\n\ncodigo R\n# fit_opt <- optimizePenalty(fit1, penalties=c(0,1,2))\n\n# update model\n# occFormulas2 <- c('~dist_casa', '~dist_casa', '~dist_casa', \"~1\", \"~1\", \"~1\", \"~0\")\noccFormulas2 <- c('~dist_casa', '~dist_casa', \"~0\")\nfit2 <- update(fit1, stateformulas=occFormulas2)\nfit2\n\nCall: occuMulti(detformulas = c(“~1”, “~1”), stateformulas = c(“~dist_casa”, “~dist_casa”, “~0”), data = umf, maxOrder = 2L, method = “BFGS”, se = TRUE, engine = c(“C”), silent = FALSE)\nOccupancy: Estimate SE z P(>|z|) [tigrinus] (Intercept) -0.7606 0.337 -2.254 2.42e-02 [tigrinus] dist_casa -0.2583 0.259 -0.998 3.18e-01 [perros] (Intercept) -1.7709 0.332 -5.335 9.55e-08 [perros] dist_casa -0.0737 0.239 -0.309 7.57e-01\nDetection: Estimate SE z P(>|z|) [tigrinus] (Intercept) -2.65 0.279 -9.50 2.04e-21 [perros] (Intercept) -2.24 0.396 -5.65 1.63e-08\nAIC: 752.2022\n\nModel Selection\n\ncodigo R\n#List of fitted models\nfl <- fitList(elev=fit1, dist=fit2)\n# coef(fl)\n\n\n###################\n# Model selection #\n###################\n\nmodSel(fl)\n\n nPars    AIC delta AICwt cumltvWt\ndist 6 752.20 0.00 1e+00 1.00 elev 6 775.93 23.73 7e-06 1.00\n\ncodigo R\n#############\n# Model fit #\n#############\n\n# bt <- parboot(fit1, nsim=50) # takes time best model\n# plot(bt)\n\n\n\nplot predicted marginal occupancy\n\ncodigo R\n#Plot predicted marginal occupancy as a function of disturbance\nr <- range(site_covs_join$elev)\nx1 <- seq(r[1],r[2],length.out=100)\nx_scale <- (x1-mean(site_covs_join$elev))/sd(site_covs_join$elev)\n\nr2 <- range(site_covs_join$dist_casa)\nx2 <- seq(r2[1],r2[2],length.out=100)\nx2_scale <- (x2-mean(site_covs_join$dist_casa))/sd(site_covs_join$dist_casa)\n\nnd <- matrix(NA, 100, 2)\nnd <- data.frame(elev=x_scale, dist_casa= x2_scale)\n\n\n\ntigrinus_pred <- predict(fit2, \"state\", species=\"tigrinus\", newdata=nd)\ntigrinus_pred$Species <- \"tigrinus\"\n\nperros_pred <- predict(fit2, \"state\", species=\"perros\", newdata=nd)\nperros_pred$Species <- \"perros\"\n\n# ocelote_pred <- predict(fit2, \"state\", species=\"ocelote\", newdata=nd)\n# ocelote_pred$Species <- \"ocelote\"\n\n\nplot_dat <- rbind(tigrinus_pred, perros_pred)#, ocelote_pred)\n\nggplot(data=plot_dat, aes(x=rep(x2,2), y=Predicted)) + # change to 3 sp and x2 to distance\n  geom_ribbon(aes(ymin=lower, ymax=upper, fill=Species), alpha=0.3) +\n  geom_line(aes(col=Species)) +\n  labs(x=\"Dist Casas\", y=\"Marginal occupancy\") +\n  theme_bw() +\n  theme(panel.grid.major=element_blank(), panel.grid.minor=element_blank(),\n        axis.text=element_text(size=12), axis.title=element_text(size=14),\n        legend.text=element_text(size=12), legend.title=element_text(size=14))\n\n\n\n\n\n\nplot predicted co-occurrence occupancy\n\ncodigo R\n#Plot predicted marginal occupancy as a function of disturbance\nr <- range(cams_ucu_sf$elev)\nx1 <- seq(r[1],r[2],length.out=100)\nx_scale <- (x1-mean(cams_ucu_sf$elev))/sd(cams_ucu_sf$elev)\n\nr2 <- range(cams_ucu_sf$dist_casa)\nx2 <- seq(r2[1],r2[2],length.out=100)\nx2_scale <- (x2-mean(cams_ucu_sf$dist_casa))/sd(cams_ucu_sf$dist_casa)\n\nnd <- matrix(NA, 100, 2)\nnd <- data.frame(elev=x_scale, dist_casa= x2_scale)\n\n\ntigrinus_perros_pred <- predict(fit2, \"state\", \n                         species=c(\"tigrinus\", \"perros\"), newdata=nd)\n\n# tigrinus_pred$Species <- c(\"tigrinus\", \"perros\")\n\n# perros_pred <- predict(fit1, \"state\", species=\"perros\", newdata=nd)\n# perros_pred$Species <- \"perros\"\n\n# ocelote_pred <- predict(fit2, \"state\", species=\"ocelote\", newdata=nd)\n# ocelote_pred$Species <- \"ocelote\"\n\n\nplot_dat <- tigrinus_perros_pred #rbind(tigrinus_pred, perros_pred)#, ocelote_pred)\n\nggplot(data=plot_dat, aes(x=rep(x2), y=Predicted)) + # change to 3 sp and x2 to distance\n  geom_ribbon(aes(ymin=lower, ymax=upper, fill = \"grey50\"), alpha=0.3) +\n  geom_line(aes(y=Predicted), col=\"blue\") +\n  labs(x=\"Dist Casa\", y=\"co-occurence\") +\n  theme_bw() +\n  theme(panel.grid.major=element_blank(), panel.grid.minor=element_blank(),\n        axis.text=element_text(size=12), axis.title=element_text(size=14),\n        legend.text=element_text(size=12), legend.title=element_text(size=14))\n\n\n\n\n\n\nplot predicted conditional occupancy\n\ncodigo R\n#Plot predicted marginal occupancy as a function of disturbance\nr <- range(cams_ucu_sf$elev)\nx1 <- seq(r[1],r[2],length.out=100)\nx_scale <- (x1-mean(cams_ucu_sf$elev))/sd(cams_ucu_sf$elev)\n\nr2 <- range(cams_ucu_sf$dist_casa)\nx2 <- seq(r2[1],r2[2],length.out=100)\nx2_scale <- (x2-mean(cams_ucu_sf$dist_casa))/sd(cams_ucu_sf$dist_casa)\n\nnd <- matrix(NA, 100, 2)\nnd <- data.frame(elev=x_scale, dist_casa= x2_scale)\n\n##### conditional\n\ntigrinus_perro_no <- predict(fit2, \"state\", \n                         species=\"tigrinus\", \n                         cond='-perros',\n                         newdata=nd)\n\ntigrinus_perro_no$Species <- \"perro ausente\"\n\ntigrinus_perro_si <- predict(fit2, \"state\", \n                         species=\"tigrinus\", \n                         cond='perros',\n                         newdata=nd)\n\ntigrinus_perro_si$Species <- \"perro presente\"\n\n\n\n\n\n# perros_pred <- predict(fit1, \"state\", species=\"perros\", newdata=nd)\n# perros_pred$Species <- \"perros\"\n\n# ocelote_pred <- predict(fit2, \"state\", species=\"ocelote\", newdata=nd)\n# ocelote_pred$Species <- \"ocelote\"\n\n\nplot_dat <- rbind(tigrinus_perro_si, tigrinus_perro_no)#, ocelote_pred)\n\nggplot(data=plot_dat, aes(x=rep(x2,2), y=Predicted)) + # change to 3 sp and x2 to distance\n  geom_ribbon(aes(ymin=lower, ymax=upper, fill=Species), alpha=0.3) +\n  geom_line(aes(col=Species)) +\n  labs(x=\"Dist Casa\", y=\"tigrinus conditional occupancy\") +\n  theme_bw() +\n  theme(panel.grid.major=element_blank(), panel.grid.minor=element_blank(),\n        axis.text=element_text(size=12), axis.title=element_text(size=14),\n        legend.text=element_text(size=12), legend.title=element_text(size=14))"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "CO-OCURRENCIA DEL TIGRILLO LANUDO (LEOPARDUS TIGRINUS) CON PERROS DOMÉSTICOS A LO LARGO DE LOS ANDES COLOMBIANOS\nEl tigrillo lanudo (Leopardus tigrinus) en Colombia está restringido a bosques de niebla y páramos. La presencia de animales domésticos en estos ambientes suele ser frecuente, debido a las poblaciones locales y el manejo tradicional que se les ha dado. En términos generales, a las mascotas se les permite ir y venir a voluntad, incluyendo su desplazamiento en hábitats naturales sin ningún tipo de supervisión. El impacto de la presencia de perros en ambientes naturales ha sido documentado previamente en términos de competencia, depredación y recientemente se han identificado como vectores de enfermedades perjudiciales para la fauna silvestre, como sarna y parvovirus. El objetivo de este trabajo fue determinar como la altitud y la distancia a las casas influyen en la co-ocurrencia de tigrillos y perros domésticos, así como identificar si existe segregación temporal en estas áreas de co-ocurrencia. Usamos datos de 302 sitios en los que se ubicaron trampas cámara para construir modelos de co-ocurrencia, usando el paquete unmarked en R, para seis localidades en los Andes colombianos: altiplano norte de Antioquia, oriente antioqueño, Ucumari (Risaralda), Pitalito (Huila) y dos sitios en la Laguna de La Cocha (Nariño). Los resultados obtenidos muestran que ambas especies co-ocurren en menos del 8% de los sitios muestreados y que la elevación y la distancia a las casas influyen en la co-ocurrencia de las dos especies a escala local, a escala regional la distancia a las casas fue más importante. Adicional a la baja co-ocurrencia ambas especies presentan una alta segregación temporal."
  }
]